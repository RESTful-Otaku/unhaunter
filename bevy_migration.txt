PROJECT: 
/home/deavid/git/rust/bevy-website


--- PROJECT FILE LIST ---


content/learn/migration-guides/0.12-to-0.13.md
content/learn/migration-guides/0.13-to-0.14.md
content/learn/migration-guides/0.14-to-0.15.md
content/learn/migration-guides/0.15-to-0.16.md
content/news/2024-02-17-bevy-0.13/index.md
content/news/2024-07-04-bevy-0.14/index.md
content/news/2024-11-29-bevy-0.15/index.md
content/news/2025-04-24-bevy-0.16/index.md
release-content/0.14/migration-guides/10839_Generalised_ECS_reactivity_with_Observers.md
release-content/0.14/migration-guides/10973_Contextually_clearing_gizmos.md
release-content/0.14/migration-guides/11165_Decouple_BackgroundColor_from_UiImage.md
release-content/0.14/migration-guides/11278_Fix_fit_canvas_to_parent.md
release-content/0.14/migration-guides/11426_Computed_State__Sub_States.md
release-content/0.14/migration-guides/11426_on_enter_startup_states.md
release-content/0.14/migration-guides/11698_Prefer_UVec2_when_working_with_texture_dimensions.md
release-content/0.14/migration-guides/11707_Rework_animation_to_be_done_in_two_phases.md
release-content/0.14/migration-guides/11766_Fix_CameraProjectionPlugin_not_implementing_Plugin_in_some.md
release-content/0.14/migration-guides/11808_Fix_CameraProjection_panic_and_improve_CameraProjectionPlu.md
release-content/0.14/migration-guides/11823_Immediately_apply_deferred_system_params_in_Systemrun.md
release-content/0.14/migration-guides/11904_Add_support_for_KHR_texture_transform.md
release-content/0.14/migration-guides/11939_rename_Camera3dBundles_dither_field_to_deband_dither_to_al.md
release-content/0.14/migration-guides/11956_Add_random_shader_utils_fix_cluster_debug_visualization.md
release-content/0.14/migration-guides/11986_Remove_the_UpdateAssets_and_AssetEvents_schedules.md
release-content/0.14/migration-guides/11989_Implement_the_AnimationGraph_allowing_for_multiple_animati.md
release-content/0.14/migration-guides/12012_Move_AlphaMode_into_bevy_render.md
release-content/0.14/migration-guides/12018_Add_Direction3dA_and_move_direction_types_out_of_primitive.md
release-content/0.14/migration-guides/12024_reflect_treat_proxy_types_correctly_when_serializing.md
release-content/0.14/migration-guides/12038_fix_some_typos.md
release-content/0.14/migration-guides/12055_configure_surface_needs_to_be_on_the_main_thread_on_iOS.md
release-content/0.14/migration-guides/12105_Made_bevy_color_a_dependency_of_bevy_render.md
release-content/0.14/migration-guides/12116_Port_bevy_core_pipeline_to_LinearRgba.md
release-content/0.14/migration-guides/12136_Replace_FromWorld_requirement_on_ReflectResource_and_refle.md
release-content/0.14/migration-guides/12163_Migrate_from_LegacyColor_to_bevy_colorColor.md
release-content/0.14/migration-guides/12164_Make_sysinfo_diagnostic_plugin_optional.md
release-content/0.14/migration-guides/12169_Add_an_index_argument_to_parallel_iteration_helpers_in_bev.md
release-content/0.14/migration-guides/12189_Rename_Direction2d3d_to_Dir23.md
release-content/0.14/migration-guides/12216_Intern_mesh_vertex_buffer_layouts_so_that_we_dont_have_to_.md
release-content/0.14/migration-guides/12218_Deprecate_SpriteSheetBundle_and_AtlasImageBundle.md
release-content/0.14/migration-guides/12234_Move_commands_module_into_bevyecsworld.md
release-content/0.14/migration-guides/12250_Batching_replace_GpuArrayBufferIndexindex_with_a_u32.md
release-content/0.14/migration-guides/12252_Gizmo_line_joints.md
release-content/0.14/migration-guides/12302_Allow_setting_RenderAssetUsages_for_gLTF_meshes__materials.md
release-content/0.14/migration-guides/12311_Remove_ComponentStorage_and_associated_types.md
release-content/0.14/migration-guides/12313_Disentangle_bevy_utilsbevy_cores_reexported_dependencies.md
release-content/0.14/migration-guides/12314_Clean_up_type_registrations.md
release-content/0.14/migration-guides/12394_Gizmo_line_styles.md
release-content/0.14/migration-guides/12407_Fix_leftover_references_to_children_when_despawning_audio_.md
release-content/0.14/migration-guides/12426_separating_finite_and_infinite_3d_planes.md
release-content/0.14/migration-guides/12453_13277_14029_sorted_and_binned_render_phase_items.md
release-content/0.14/migration-guides/12474_Remove_archetype_component_access_from_QueryState.md
release-content/0.14/migration-guides/12476_Store_only_the_IDs_needed_for_Query_iteration.md
release-content/0.14/migration-guides/12499_Make_from_reflect_or_world_also_try_ReflectDefault_and_imp.md
release-content/0.14/migration-guides/12512_Update_to_fixedbitset_05.md
release-content/0.14/migration-guides/12538_Add_setting_to_enabledisable_shadows_to_MaterialPlugin.md
release-content/0.14/migration-guides/12547_Add_AsyncSeek_trait_to_Reader_to_be_able_to_seek_inside_as.md
release-content/0.14/migration-guides/12550_Use_asyncfn_in_traits_rather_than_BoxedFuture.md
release-content/0.14/migration-guides/12551_Remove_WorldCell.md
release-content/0.14/migration-guides/12557_refactor_separate_out_PanicHandlerPlugin.md
release-content/0.14/migration-guides/12559_Remove_needless_color_specializaion_for_SpritePipeline.md
release-content/0.14/migration-guides/12574_Make_cardinal_splines_include_endpoints.md
release-content/0.14/migration-guides/12575_Color_maths_4.md
release-content/0.14/migration-guides/12582_Divide_the_single_VisibleEntities_list_into_separate_lists.md
release-content/0.14/migration-guides/12605_Make_AssetActionIgnore_not_copy_assets_to_imported_assets.md
release-content/0.14/migration-guides/12655_Removed_IntoAssedIdT_for_HandleT_as_mentioned_in_12600.md
release-content/0.14/migration-guides/12686_Meshing_for_Triangle3d_primitive.md
release-content/0.14/migration-guides/12698_Restore_pre_0131_Root_Node_Layout_behavior.md
release-content/0.14/migration-guides/12709_Error_info_has_been_added_to_LoadStateFailed.md
release-content/0.14/migration-guides/12711_Fix_Ord_and_PartialOrd_differing_for_FloatOrd_and_optimize.md
release-content/0.14/migration-guides/12715_Fix_TypeRegistry_use_in_dynamic_scene.md
release-content/0.14/migration-guides/12721_bevy_reflect_Rename_UntypedReflectDeserializer_to_ReflectD.md
release-content/0.14/migration-guides/12732_Move_FloatOrd_into_bevy_math.md
release-content/0.14/migration-guides/12747_Move_Point_out_of_cubic_splines_module_and_expand_it.md
release-content/0.14/migration-guides/12749_Clean_up_WinitWindowsremove_window.md
release-content/0.14/migration-guides/12757_Update_glam_version_requirement_from_025_to_027.md
release-content/0.14/migration-guides/12772_Moves_intern_and_label_modules_into_bevy_ecs.md
release-content/0.14/migration-guides/12773_Generate_MeshUniforms_on_the_GPU_via_compute_shader_where_.md
release-content/0.14/migration-guides/12791_Microoptimize_queue_material_meshes_primarily_to_remove_bi.md
release-content/0.14/migration-guides/12811_remove_DeterministicRenderingConfig.md
release-content/0.14/migration-guides/12827_Consolidate_RenderUiMaterials2d_into_RenderAssets.md
release-content/0.14/migration-guides/12847_Remove_stepping_from_default_features.md
release-content/0.14/migration-guides/12859_remove_close_on_esc.md
release-content/0.14/migration-guides/12862_Disable_RAY_QUERY_and_RAY_TRACING_ACCELERATION_STRUCTURE_b.md
release-content/0.14/migration-guides/12868_Deprecate_ReceivedCharacter.md
release-content/0.14/migration-guides/12889_Implement_GPU_frustum_culling.md
release-content/0.14/migration-guides/12895_Make_some_ReflectComponentReflectBundle_methods_work_with_.md
release-content/0.14/migration-guides/12902_Add_previous_view_uniformsinverse_view.md
release-content/0.14/migration-guides/12910_Implement_percentagecloser_filtering_PCF_for_point_lights.md
release-content/0.14/migration-guides/12917_flipping_texture_coords_methods_has_been_added_to_the_Stan.md
release-content/0.14/migration-guides/12936_Optimize_Event_Updates.md
release-content/0.14/migration-guides/12945_Fix_rendering_of_sprites_text_and_meshlets_after_12582.md
release-content/0.14/migration-guides/12954_Expose_desired_maximum_frame_latency_through_window_creati.md
release-content/0.14/migration-guides/12978_Introduce_a_WindowWrapper_to_extend_the_lifetime_of_the_wi.md
release-content/0.14/migration-guides/12982_Clean_up_2d_render_phases.md
release-content/0.14/migration-guides/12986_Make_Transformrotate_axis_and_Transformrotate_local_axis_u.md
release-content/0.14/migration-guides/12997_multi_threaded_feature_rename.md
release-content/0.14/migration-guides/13022_Make_AppExit_more_specific_about_exit_reason.md
release-content/0.14/migration-guides/13031_Implement_clearcoat_per_the_Filament_and_the_KHR_materials.md
release-content/0.14/migration-guides/13044_Make_SystemParamnew_archetype_and_QueryStatenew_archetype_.md
release-content/0.14/migration-guides/13080_Deprecate_dynamic_plugins.md
release-content/0.14/migration-guides/13087_Use_Vec3A_for_3D_bounding_volumes_and_raycasts.md
release-content/0.14/migration-guides/13090_Better_SystemId_to_Entity_conversions.md
release-content/0.14/migration-guides/13121_Implement_filmic_color_grading.md
release-content/0.14/migration-guides/13159_Improve_tracing_layer_customization.md
release-content/0.14/migration-guides/13177_Make_AssetMetaCheck_a_field_on_the_asset_plugin.md
release-content/0.14/migration-guides/13182_Implement_Reflect_for_ResultT_E_as_enum.md
release-content/0.14/migration-guides/13186_Wgpu_020.md
release-content/0.14/migration-guides/13199_Add_BufferVec_an_higherperformance_alternative_to_StorageB.md
release-content/0.14/migration-guides/13209_move_wgsl_color_operations_from_bevy_pbr_to_bevy_render.md
release-content/0.14/migration-guides/13216_Separate_state_crate.md
release-content/0.14/migration-guides/13236_Ensure_clean_exit.md
release-content/0.14/migration-guides/13238_More_idiomatic_texture_atlas_builder.md
release-content/0.14/migration-guides/13261_More_gizmos_builders.md
release-content/0.14/migration-guides/13264_Use_Dir3_for_local_axis_methods_in_GlobalTransform.md
release-content/0.14/migration-guides/13317_12502_Remove_limit_on_RenderLayers.md
release-content/0.14/migration-guides/13343_constrain_WorldQueryget_state_to_only_use_Components.md
release-content/0.14/migration-guides/13350_Add_emissive_exposure_weight_to_the_StandardMaterial.md
release-content/0.14/migration-guides/13366_fix_upgrade_to_winit_v030.md
release-content/0.14/migration-guides/13411_Common_MeshBuilder_trait.md
release-content/0.14/migration-guides/13419_Allow_mix_of_hdr_and_nonhdr_cameras_to_same_render_target.md
release-content/0.14/migration-guides/13438_Inconsistent_segmentsresolution_naming.md
release-content/0.14/migration-guides/13452_Rename_Rect_inset_method_to_inflate.md
release-content/0.14/migration-guides/13462_Fix_UI_elements_randomly_not_appearing_after_13277.md
release-content/0.14/migration-guides/13465_Make_LoadContext_use_the_builder_pattern_for_loading_depen.md
release-content/0.14/migration-guides/13489_Normalise_matrix_naming.md
release-content/0.14/migration-guides/13534_Make_gizmos_take_primitives_by_ref.md
release-content/0.14/migration-guides/13580_Add_subdivisions_to_PlaneMeshBuilder.md
release-content/0.14/migration-guides/13594_Unify_transition_names_to_exited_and_entered.md
release-content/0.14/migration-guides/13603_Updates_default_Text_font_size_to_24px.md
release-content/0.14/migration-guides/13605_Additional_options_to_mesh_primitives.md
release-content/0.14/migration-guides/13626_Combine_transition_systems_of_Substates.md
release-content/0.14/migration-guides/13637_Move_state_installation_methods_from_bevy_app_to_bevy_stat.md
release-content/0.14/migration-guides/13654_Rename_point_light_to_clusterable_object_in_cluster_contex.md
release-content/0.14/migration-guides/13660_rename_touchpad_to_gesture_and_add_new_gestures.md
release-content/0.14/migration-guides/13678_flush_key_input_cache_when_Bevy_loses_focus_Adopted.md
release-content/0.14/migration-guides/13710_Made_Meshmerge_take_a_reference_of_Mesh.md
release-content/0.14/migration-guides/14017_Make_default_behavior_for_BackgroundColor_and_BorderColor_.md
release-content/0.14/migration-guides/5781_bevy_reflect_Recursive_registration.md
release-content/0.14/migration-guides/9202_Refactor_App_and_SubApp_internals_for_better_separation.md
release-content/0.14/release-notes/10164_Meshlet_rendering_initial_feature.md
release-content/0.14/release-notes/10756_hooks_and_observers.md
release-content/0.14/release-notes/10973_Contextually_clearing_gizmos.md
release-content/0.14/release-notes/11165_Decouple_BackgroundColor_from_UiImage.md
release-content/0.14/release-notes/11237_Add_a_gizmobased_overlay_to_show_UI_node_outlines_Adopted.md
release-content/0.14/release-notes/11426_Computed_States__Sub_States.md
release-content/0.14/release-notes/11535_Query_Joins.md
release-content/0.14/release-notes/11658_Add_Rotation2d.md
release-content/0.14/release-notes/11659_bevy_reflect_Custom_attributes.md
release-content/0.14/release-notes/11823_Immediately_apply_deferred_system_params_in_Systemrun.md
release-content/0.14/release-notes/11904_Add_support_for_KHR_texture_transform.md
release-content/0.14/release-notes/11906_Run_the_multithreaded_executor_at_the_end_of_each_system_t.md
release-content/0.14/release-notes/11989_Implement_the_AnimationGraph_allowing_for_multiple_animati.md
release-content/0.14/release-notes/12013_Upstreaming_bevy_color.md
release-content/0.14/release-notes/12100_Add_WinitEvent_aggregate_event_for_synchronized_window_eve.md
release-content/0.14/release-notes/12135_Support_wireframes_for_2D_meshes.md
release-content/0.14/release-notes/12187_Alignment_API_for_Transforms.md
release-content/0.14/release-notes/12394_Gizmo_line_styles.md
release-content/0.14/release-notes/12484_Uniform_point_sampling_methods_for_some_primitive_shapes.md
release-content/0.14/release-notes/12500_Add_border_radius_to_UI_nodes_adopted.md
release-content/0.14/release-notes/12547_Add_AsyncSeek_trait_to_Reader_to_be_able_to_seek_inside_as.md
release-content/0.14/release-notes/12622_Throttle_render_assets.md
release-content/0.14/release-notes/12672_Make_dynamic_linking_a_noop_on_wasm_targets.md
release-content/0.14/release-notes/12709_Error_info_has_been_added_to_LoadStateFailed.md
release-content/0.14/release-notes/12747_Move_Point_out_of_cubic_splines_module_and_expand_it.md
release-content/0.14/release-notes/12792_Implement_Auto_Exposure_plugin.md
release-content/0.14/release-notes/12889_Implement_GPU_frustum_culling.md
release-content/0.14/release-notes/12910_Implement_percentagecloser_filtering_PCF_for_point_lights.md
release-content/0.14/release-notes/12916_Implement_visibility_ranges_also_known_as_hierarchical_lev.md
release-content/0.14/release-notes/13009_Implement_fast_depth_of_field_as_a_postprocessing_effect.md
release-content/0.14/release-notes/13022_Make_AppExit_more_specific_about_exit_reason.md
release-content/0.14/release-notes/13057_Implement_volumetric_fog_and_volumetric_lighting_also_know.md
release-content/0.14/release-notes/13080_Deprecate_dynamic_plugins.md
release-content/0.14/release-notes/13121_Implement_filmic_color_grading.md
release-content/0.14/release-notes/13123_Implement_a_SystemBuilder_for_building_SystemParams.md
release-content/0.14/release-notes/13162_Add_a_process_for_working_groups.md
release-content/0.14/release-notes/13200_Add_UV_channel_selection_to_StandardMaterial.md
release-content/0.14/release-notes/13233_Add_Annulusgizmos.md
release-content/0.14/release-notes/13270_Extrusion.md
release-content/0.14/release-notes/13317_12502_Remove_limit_on_RenderLayers.md
release-content/0.14/release-notes/13347_Add_on_unimplemented_Diagnostics_to_Most_Public_Traits.md
release-content/0.14/release-notes/13366_fix_upgrade_to_winit_v030.md
release-content/0.14/release-notes/13417_implement_the_full_set_of_sort_methods_on_QueryIter.md
release-content/0.14/release-notes/13418_Implement_optin_sharp_screenspace_reflections_for_the_defe.md
release-content/0.14/release-notes/13423_Implement_subpixel_morphological_antialiasing_or_SMAA.md
release-content/0.14/release-notes/13450_Implement_PBR_anisotropy_per_KHR_materials_anisotropy.md
release-content/0.14/release-notes/13453_add_handling_of_all_missing_gltf_extras_scene_mesh__materi.md
release-content/0.14/release-notes/13489_Normalise_matrix_naming.md
release-content/0.14/release-notes/13572_Implement_motion_vectors_and_TAA_for_skinned_meshes_and_me.md
release-content/0.14/release-notes/13579_State_Identity_Transitions.md
release-content/0.14/release-notes/13586_glTF_labels_add_enum_to_avoid_misspelling_and_keep_uptodat.md
release-content/0.14/release-notes/13649_State_Scoped_Entities.md
release-content/0.14/release-notes/13650_Map_entities_from_a_resource_when_written_to_the_world.md
release-content/0.14/release-notes/13653_Added_CompassQuadrant_and_CompassOctant_as_per_13647.md
release-content/0.14/release-notes/5781_bevy_reflect_Recursive_registration.md
release-content/0.14/release-notes/9135_Add_pipeline_statistics.md
release-content/0.14/release-notes/9924_PerObject_Motion_Blur.md
release-content/0.14/release-notes/New_gizmos_types.md
release-content/0.14/release-notes/new_math_primitives.md
release-content/0.15/migration-guides/10193_Cosmic_text.md
release-content/0.15/migration-guides/10823_Generalized_IntoAssetSourceId_and_IntoAssetPath_Implementa.md
release-content/0.15/migration-guides/11741_Send_SceneInstanceReady_when_spawning_any_kind_of_scene.md
release-content/0.15/migration-guides/12095_Add_features_to_switch_NativeActivity_and_GameActivity_usa.md
release-content/0.15/migration-guides/12637_check_sampler_type_in_as_bind_group_derives.md
release-content/0.15/migration-guides/12770_Implement_gamepads_as_entities.md
release-content/0.15/migration-guides/12929_Remove_redundant_information_and_optimize_dynamic_allocati.md
release-content/0.15/migration-guides/13014_Dedicated_Reflect_implementation_for_Setlike_things.md
release-content/0.15/migration-guides/13045_Support_on_thread_spawn_and_on_thread_destroy_for_TaskPool.md
release-content/0.15/migration-guides/13069_Add_2d_opaque_phase_with_depth_buffer.md
release-content/0.15/migration-guides/13186_Wgpu_020.md
release-content/0.15/migration-guides/13240_Dont_ignore_draw_errors.md
release-content/0.15/migration-guides/13321_bevy_reflect_Nested_TypeInfo_getters.md
release-content/0.15/migration-guides/13419_Allow_mix_of_hdr_and_nonhdr_cameras_to_same_render_target.md
release-content/0.15/migration-guides/13454_Added_visibility_bitmask_as_an_alternative_SSAO_method.md
release-content/0.15/migration-guides/13620_Fix_UI_texture_atlas_with_offset.md
release-content/0.15/migration-guides/13669_Expose_winits_MonitorHandle.md
release-content/0.15/migration-guides/13707_Make_gLTF_node_children_Handle_instead_of_objects.md
release-content/0.15/migration-guides/13712_Add_feature_requirement_info_to_image_loading_docs.md
release-content/0.15/migration-guides/13717_Uncouple_DynamicTextureAtlasBuilder_from_assets.md
release-content/0.15/migration-guides/13727_Add_mappings_to_EntityMapper.md
release-content/0.15/migration-guides/13745_Improve_error_handling_for_AssetServeradd_async.md
release-content/0.15/migration-guides/13759_Adds_back_in_way_to_convert_color_to_u8_array_implemented_.md
release-content/0.15/migration-guides/13760_Add_Display_implementation_to_DebugName.md
release-content/0.15/migration-guides/13784_Rename_and_Extend_Run_Conditions_API.md
release-content/0.15/migration-guides/13818_Created_an_EventMutator_for_when_you_want_to_mutate_an_eve.md
release-content/0.15/migration-guides/13837_Use_a_well_defined_type_for_sides_in_RegularPolygon.md
release-content/0.15/migration-guides/13855_Align_Scenewrite_to_world_with_to_match_DynamicScenewrite_.md
release-content/0.15/migration-guides/13859_Change_SceneInstanceReady_to_trigger_an_observer.md
release-content/0.15/migration-guides/13871_Replaced_implicit_emissive_weight_with_default.md
release-content/0.15/migration-guides/13919_IntoSystemConfigschain_ignore_deferreds_return_type_fix.md
release-content/0.15/migration-guides/13927_Use_u32_for_all_resolutionsubdivision_fields_in_bevy_gizmo.md
release-content/0.15/migration-guides/13930_Use_u32_for_resolutionsubdivision_in_primitive_meshing.md
release-content/0.15/migration-guides/13934_Change_Worldinspect_entity_to_return_an_Iterator_instead_o.md
release-content/0.15/migration-guides/13991_Minimal_Bubbling_Observers.md
release-content/0.15/migration-guides/14001_Handle_CtrlC_in_the_terminal_properly.md
release-content/0.15/migration-guides/14017_Make_default_behavior_for_BackgroundColor_and_BorderColor_.md
release-content/0.15/migration-guides/14034_Track_source_location_in_change_detection.md
release-content/0.15/migration-guides/14048_Added_feature_switch_to_default_Standard_Materials_new_ani.md
release-content/0.15/migration-guides/14050_Support_more_kinds_of_system_params_in_buildable_systems.md
release-content/0.15/migration-guides/14073_Lighting_Should_Only_hold_VecEntity_instead_of_TypeIdVecEn.md
release-content/0.15/migration-guides/14082_AssetReader_read_now_returns_an_opaque_type.md
release-content/0.15/migration-guides/14091_Bump_accesskit_to_016.md
release-content/0.15/migration-guides/14099_Allow_volumetric_fog_to_be_localized_to_specific_optionally.md
release-content/0.15/migration-guides/14178_Remove_unused_type_parameter_in_Paralleldrain.md
release-content/0.15/migration-guides/14194_Replace_AsyncSeek_trait_by_AsyncSeekForward_for_Reader_to_.md
release-content/0.15/migration-guides/14198_Remove_need_for_EventLoopProxy_to_be_NonSend.md
release-content/0.15/migration-guides/14211_Rename_bevy_corenameDebugName_to_bevy_corenameNameOrEntity.md
release-content/0.15/migration-guides/14228_Clean_up_UiSystem_system_sets.md
release-content/0.15/migration-guides/14250_Implement_FromIteratorIntoIterator_for_dynamic_types.md
release-content/0.15/migration-guides/14257_Pack_multiple_vertex_and_index_arrays_together_into_growab.md
release-content/0.15/migration-guides/14267_Add_support_for_skybox_transformation.md
release-content/0.15/migration-guides/14273_Move_Msaa_to_component.md
release-content/0.15/migration-guides/14284_Add_custom_cursors.md
release-content/0.15/migration-guides/14285_Remove_second_generic_from_add_before_add_after.md
release-content/0.15/migration-guides/14290_Add_support_for_environment_map_transformation.md
release-content/0.15/migration-guides/14313_Remove_unused_default_feature_from_bevy_window.md
release-content/0.15/migration-guides/14325_Added_new_method_to_Cone_3D_primitive.md
release-content/0.15/migration-guides/14343_Export_glTF_skins_as_a_Gltf_struct.md
release-content/0.15/migration-guides/14352_Add_FilteredAccessempty_and_simplify_the_implementation_of_.md
release-content/0.15/migration-guides/14354_Update_trigger_observers_to_operate_over_slices_of_data.md
release-content/0.15/migration-guides/14357_Using_Cas_instead_of_CAS_14341.md
release-content/0.15/migration-guides/14382_Disallow_empty_cubic_and_rational_curves.md
release-content/0.15/migration-guides/14384_Only_propagate_transforms_entities_with_GlobalTransforms.md
release-content/0.15/migration-guides/14387_Deprecate_is_playing_animation.md
release-content/0.15/migration-guides/14394_Changed_Meshattributes_functions_to_return_MeshVertexAttri.md
release-content/0.15/migration-guides/14441_Simplify_run_conditions.md
release-content/0.15/migration-guides/14448_Making_bevy_render_an_optional_dependency_for_bevy_gizmos.md
release-content/0.15/migration-guides/14459_Require_mut_self_for_Worldincrement_change_tick.md
release-content/0.15/migration-guides/14485_Refactor_Bounded2dBounded3d_to_use_isometries.md
release-content/0.15/migration-guides/14534_Remove_deprecated_bevy_dynamic_plugin.md
release-content/0.15/migration-guides/14546_Make_AnimationPlayerstart_and_play_work_accordingly_to_doc.md
release-content/0.15/migration-guides/14579_Fix_soudness_issue_with_Conflicts_involving_read_all_and_w.md
release-content/0.15/migration-guides/14609_Explicitly_order_CameraUpdateSystem_before_UiSystemPrepare.md
release-content/0.15/migration-guides/14631_Make_QueryStatetransmuteco_validate_the_world_of_the_Compo.md
release-content/0.15/migration-guides/14650_Improve_the_gizmo_for_Plane3d_reusing_grid.md
release-content/0.15/migration-guides/14656_Switch_rotation__translation_in_grid_gizmos.md
release-content/0.15/migration-guides/14663_Adds_ShaderStorageBuffer_asset.md
release-content/0.15/migration-guides/14676_Use_Isometry_in_bevy_gizmos_wherever_we_can.md
release-content/0.15/migration-guides/14690_Add_query_reborrowing.md
release-content/0.15/migration-guides/14720_Consistency_between_Wireframe2d_and_Wireframe.md
release-content/0.15/migration-guides/14731_Fix_arc_2d_Gizmos.md
release-content/0.15/migration-guides/14764_Add_RenderSetFinalCleanup_for_Worldclear_entities.md
release-content/0.15/migration-guides/14790_Make_QueryFilter_an_unsafe_trait.md
release-content/0.15/migration-guides/14793_Remove_useless_Direction_field.md
release-content/0.15/migration-guides/14833_Rewrite_screenshots.md
release-content/0.15/migration-guides/14838_bevy_reflect_Add_Type_type.md
release-content/0.15/migration-guides/14842_Replace_the_wgpu_trace_feature_with_a_field_in_bevy_render.md
release-content/0.15/migration-guides/14862_Picking_event_ordering.md
release-content/0.15/migration-guides/14881_Allow_ordering_variable_timesteps_around_fixed_timesteps.md
release-content/0.15/migration-guides/14886_Update_Grid_Gizmo_to_use_Color.md
release-content/0.15/migration-guides/14887_Fix_Gizmos_warnings_and_doc_errors_when_a_subset_of_features.md
release-content/0.15/migration-guides/14909_Refactor_AsBindGroup_to_use_a_associated_SystemParam.md
release-content/0.15/migration-guides/14910_Rename_Commandsregister_one_shot_system__register_system.md
release-content/0.15/migration-guides/14916_Make_TrackedRenderPassset_vertex_buffer_aware_of_slice_size.md
release-content/0.15/migration-guides/14926_rename_Drop_to_bevypickingeventsDragDrop_to_unclash_stdops.md
release-content/0.15/migration-guides/14964_Migrate_bevy_transform_to_required_components.md
release-content/0.15/migration-guides/14977_Replace_bevy_utilsCowArc_with_atomicow.md
release-content/0.15/migration-guides/14989_Return_Results_from_Cameras_worldviewport_conversion_metho.md
release-content/0.15/migration-guides/15013_Implement_animation_masks_allowing_fine_control_of_the_tar.md
release-content/0.15/migration-guides/15035_Rename_rendering_components_for_improved_consistency_and_c.md
release-content/0.15/migration-guides/15039_Remove_remnant_EntityHash_and_related_types_from_bevy_util.md
release-content/0.15/migration-guides/15073_Split_OrthographicProjectiondefault_into_2d__3d_Adopted.md
release-content/0.15/migration-guides/15075_Remove_OrthographicProjectionscale_adopted.md
release-content/0.15/migration-guides/15089__EntityRefMut_get_components_immutable_variants_only.md
release-content/0.15/migration-guides/15090_Deprecate_LoadAndSave_Asset_Processor.md
release-content/0.15/migration-guides/15107_bevy_reflect_Refactor_serde_module.md
release-content/0.15/migration-guides/15108_bevy_reflect_Add_DynamicTyped_trait.md
release-content/0.15/migration-guides/15126_Remove_ReceivedCharacter.md
release-content/0.15/migration-guides/15151_Removed_Type_Parameters_from_Observer.md
release-content/0.15/migration-guides/15163_use_precomputed_border_values.md
release-content/0.15/migration-guides/15174_Use_FromReflect_when_extracting_entities_in_dynamic_scenes.md
release-content/0.15/migration-guides/15184_Support_systems_that_take_references_as_input.md
release-content/0.15/migration-guides/15196_Rename_push_children_to_add_children.md
release-content/0.15/migration-guides/15210_explicitly_mention_component_in_methods_on_DynamicSceneBuilder.md
release-content/0.15/migration-guides/15234_Rename_Add_to_Queue_for_methods_with_deferred_semantics.md
release-content/0.15/migration-guides/15237_AssetServer_LoadState_API_consistency.md
release-content/0.15/migration-guides/15239_Fix_floating_point_math.md
release-content/0.15/migration-guides/15240_bevy_reflect_Replace_value_terminology_with_opaque.md
release-content/0.15/migration-guides/15263_change_return_type_of_Worldresource_ref_to_Ref.md
release-content/0.15/migration-guides/15279_Allow_bevy_utils_in_no_std_Contexts.md
release-content/0.15/migration-guides/15282_Allow_animation_clips_to_animate_arbitrary_properties.md
release-content/0.15/migration-guides/15294_Remove_allocation_in_get_short_name.md
release-content/0.15/migration-guides/15320_Retained_Rendering.md
release-content/0.15/migration-guides/15340_move_ShortName_to_bevy_reflect.md
release-content/0.15/migration-guides/15341_Add_UI_GhostNode.md
release-content/0.15/migration-guides/15344_Split_TextureAtlasSources_out_of_TextureAtlasLayout_and_ma.md
release-content/0.15/migration-guides/15368_Add_the_ability_to_control_font_smoothing.md
release-content/0.15/migration-guides/15372_Use_crate_disqualified.md
release-content/0.15/migration-guides/15385_Bubbling_observers_traversal_should_use_query_data.md
release-content/0.15/migration-guides/15402_bevy_reflect_Update_EulerRot_to_match_glam_029.md
release-content/0.15/migration-guides/15406_Make_drain_take_a_mutable_borrow_instead_of_BoxSelf_for_re.md
release-content/0.15/migration-guides/15410_Follow_up_to_cached_run_system.md
release-content/0.15/migration-guides/15422_Change_ReflectMapEntities_to_operate_on_components_before_.md
release-content/0.15/migration-guides/15434_Curvebased_animation.md
release-content/0.15/migration-guides/15435_List_components_for_QueryEntityErrorQueryDoesNotMatch.md
release-content/0.15/migration-guides/15454_Rename_init_component__friends.md
release-content/0.15/migration-guides/15469_Basic_integration_of_cubic_spline_curves_with_the_Curve_AP.md
release-content/0.15/migration-guides/15474_Migrate_visibility_to_required_components.md
release-content/0.15/migration-guides/15482_bevy_reflect_Add_ReflectDeserializerProcessor.md
release-content/0.15/migration-guides/15484_Remove_ReturnUnit_variant.md
release-content/0.15/migration-guides/15489_Migrate_bevy_sprite_to_required_components.md
release-content/0.15/migration-guides/15509_bevy_asset_Improve_NestedLoader_API.md
release-content/0.15/migration-guides/15524_Migrate_meshes_and_materials_to_required_components.md
release-content/0.15/migration-guides/15526_System_param_validation_for_observers_system_registry_and_.md
release-content/0.15/migration-guides/15546_Cleanup_unneeded_lifetimes_in_bevy_asset.md
release-content/0.15/migration-guides/15553_15540_Make_Worldflush_commands_private.md
release-content/0.15/migration-guides/15554_Migrate_lights_to_required_components.md
release-content/0.15/migration-guides/15561_Overflow_clip_margin.md
release-content/0.15/migration-guides/15566_Fix_Mesh_allocator_bug_and_reduce_Mesh_data_copies_by_two.md
release-content/0.15/migration-guides/15568_Migrate_fog_volumes_to_required_components.md
release-content/0.15/migration-guides/15572_Migrate_motion_blur_TAA_SSAO_and_SSR_to_required_component.md
release-content/0.15/migration-guides/15573_Migrate_audio_to_required_components.md
release-content/0.15/migration-guides/15579_Migrate_scenes_to_required_components.md
release-content/0.15/migration-guides/15582_Synchronize_removed_components_with_the_render_world.md
release-content/0.15/migration-guides/15583_Rename_BreakLineOn_to_LineBreak.md
release-content/0.15/migration-guides/15585_move_ANDROID_APP_to_bevy_window.md
release-content/0.15/migration-guides/15586_Featuregate_all_image_formats.md
release-content/0.15/migration-guides/15589_Impose_a_more_sensible_ordering_for_animation_graph_evalua.md
release-content/0.15/migration-guides/15591_Text_rework.md
release-content/0.15/migration-guides/15593_Enable_EntityRefget_by_id_and_friends_to_take_multiple_ids.md
release-content/0.15/migration-guides/15614_Allow_Worldentity_family_of_functions_to_take_multiple_ent.md
release-content/0.15/migration-guides/15616_Rename_observe_to_observe_entity_on_EntityWorldMut.md
release-content/0.15/migration-guides/15628_Serialize_and_deserialize_tuple_struct_with_one_field_as_n.md
release-content/0.15/migration-guides/15631_Implement_additive_blending_for_animation_graphs.md
release-content/0.15/migration-guides/15641_Migrate_cameras_to_required_components.md
release-content/0.15/migration-guides/15649_Inverse_bevy_render_bevy_winit_dependency_and_move_cursor_.md
release-content/0.15/migration-guides/15652_Deprecate_get_or_spawn.md
release-content/0.15/migration-guides/15658_Deprecate_Eventsoldest_id.md
release-content/0.15/migration-guides/15662_Fix_additive_blending_of_quaternions.md
release-content/0.15/migration-guides/15666_Split_out_bevy_mesh_from_bevy_render.md
release-content/0.15/migration-guides/15690_Migrate_bevy_picking.md
release-content/0.15/migration-guides/15735_Use_Dir2Dir3_instead_of_Vec2Vec3_for_Ray2dnewRay3dnew.md
release-content/0.15/migration-guides/15737_Migrate_reflection_probes_to_required_components.md
release-content/0.15/migration-guides/15740_Replace_HandleM_UiMaterial_component_with__UiMaterialHandl.md
release-content/0.15/migration-guides/15742_Replace_HandleAnimationGraph_component_with_a_wrapper.md
release-content/0.15/migration-guides/15754_Rename_AppWorldobserve_to_add_observer_EntityWorldMutobser.md
release-content/0.15/migration-guides/15796_Remove_the_Component_trait_implementation_from_Handle.md
release-content/0.15/migration-guides/15812_Move_ImageLoader_and_CompressedImageSaver_to_bevy_image.md
release-content/0.15/migration-guides/15820_Add_bevy_windowWindow_options_for_MacOS.md
release-content/0.15/migration-guides/15830_Deprecate_SpatialBundle.md
release-content/0.15/migration-guides/15839_bevy_ecs_Specialcase_EntityPLACEHOLDER_formatting.md
release-content/0.15/migration-guides/15857_split_up_TextStyle.md
release-content/0.15/migration-guides/15887_Text_Rework_cleanup.md
release-content/0.15/migration-guides/15890_Remove_incorrect_equality_comparisons_for_asset_load_error.md
release-content/0.15/migration-guides/15898_Migrate_UI_bundles_to_required_components.md
release-content/0.15/migration-guides/15904_Attempt_to_remove_component_from_render_world_if_not_extra.md
release-content/0.15/migration-guides/15962_aligning_public_apis_of_TimeTimer_and_Stopwatch.md
release-content/0.15/migration-guides/15969_Improve_API_for_scaling_orthographic_cameras.md
release-content/0.15/migration-guides/15973_Remove_AVIF_feature.md
release-content/0.15/migration-guides/16037_Use_enus_locale_for_typos.md
release-content/0.15/migration-guides/16069_Reduce_the_clusterable_object_UBO_size_below_16384_for_Web.md
release-content/0.15/migration-guides/16072_Move_TextureAtlas_into_UiImage_and_remove_impl_Component_f.md
release-content/0.15/migration-guides/16090_Adding_alpha_threshold_to_OrderIndependentTransparencySett.md
release-content/0.15/migration-guides/16097_Remove_custom_rounding.md
release-content/0.15/migration-guides/16139_ReflectBundleremove_improvement.md
release-content/0.15/migration-guides/16163_Dont_reexport_bevy_image_from_bevy_render.md
release-content/0.15/migration-guides/16222_Gamepad_improvements.md
release-content/0.15/migration-guides/16233_Use_Name_component_for_gamepad.md
release-content/0.15/migration-guides/16257_Remove_accesskit_reexport_from_bevy_a11y.md
release-content/0.15/migration-guides/16269_Make_ComponentTicks_field_public.md
release-content/0.15/migration-guides/16271_UiImage__ImageNode_UiImageSize__ImageNodeSize.md
release-content/0.15/migration-guides/16301_Expose_Pipeline_Compilation_Zero_Initialize_Workgroup_Memo.md
release-content/0.15/migration-guides/16327_Rename_Rot2angle_between_to_Rot2angle_to.md
release-content/0.15/migration-guides/16375_Only_use_physical_coords_internally_in_bevy_ui.md
release-content/0.15/migration-guides/16405_Bind_only_the_written_parts_of_storage_buffers.md
release-content/0.15/migration-guides/16468_Only_use_the_AABB_center_for_mesh_visibility_range_testing.md
release-content/0.15/migration-guides/16473_Add_flags_to_SpritePlugin_and_UiPlugin_to_allow_disabling_.md
release-content/0.15/migration-guides/16481_cleanup_bevy_renderlibrs.md
release-content/0.15/migration-guides/7207_reflect_implement_the_unique_reflect_rfc.md
release-content/0.15/migration-guides/8997_Optional_UI_rendering.md
release-content/0.15/migration-guides/9889_Simplified_ui_stack_system.md
release-content/0.15/migration-guides/virtual_geometry.md
release-content/0.15/release-notes/10193_Cosmic_text.md
release-content/0.15/release-notes/10392_CPU_Drawing.md
release-content/0.15/release-notes/12095_Add_features_to_switch_NativeActivity_and_GameActivity_usa.md
release-content/0.15/release-notes/12770_Implement_gamepads_as_entities.md
release-content/0.15/release-notes/13014_Dedicated_Reflect_implementation_for_Setlike_things.md
release-content/0.15/release-notes/13454_vbao.md
release-content/0.15/release-notes/13669_Expose_winits_MonitorHandle.md
release-content/0.15/release-notes/13695_Start_a_builtin_postprocessing_stack_and_implement_chromat.md
release-content/0.15/release-notes/13741_Stable_interpolation_and_smooth_following.md
release-content/0.15/release-notes/13818_Created_an_EventMutator_for_when_you_want_to_mutate_an_eve.md
release-content/0.15/release-notes/13912_featgltf_add_name_component_to_gltf_mesh_primitive.md
release-content/0.15/release-notes/13991_Minimal_Bubbling_Observers.md
release-content/0.15/release-notes/14034_Track_source_location_in_change_detection.md
release-content/0.15/release-notes/14044_Accumulated_mouse_inputs.md
release-content/0.15/release-notes/14049_Opportunistically_use_dense_iteration_for__archetypal_iter.md
release-content/0.15/release-notes/14071_Uniform_mesh_sampling.md
release-content/0.15/release-notes/14099_Allow_volumetric_fog_to_be_localized_to_specific_optionally.md
release-content/0.15/release-notes/14106_Cyclic_splines.md
release-content/0.15/release-notes/14212_Component_Lifecycle_Hook__Observer_Trigger_for_replaced_va.md
release-content/0.15/release-notes/14257_Pack_multiple_vertex_and_index_arrays_together_into_growab.md
release-content/0.15/release-notes/14269_Basic_isometry_types.md
release-content/0.15/release-notes/14284_Add_custom_cursors.md
release-content/0.15/release-notes/14630_A_Curve_trait_for_general_interoperation__Part_I.md
release-content/0.15/release-notes/14663_shader_storage_buffer.md
release-content/0.15/release-notes/14791_Required_Components.md
release-content/0.15/release-notes/14817_SystemParamBuilder__Support_dynamic_system_parameters.md
release-content/0.15/release-notes/14833_Rewrite_screenshots.md
release-content/0.15/release-notes/14838_bevy_reflect_add_Type_type.md
release-content/0.15/release-notes/14868_Allow_fog_density_texture_to_be_scrolled_over_time_with_an.md
release-content/0.15/release-notes/14876_Add_Order_Independent_Transparency.md
release-content/0.15/release-notes/14880_Initial_implementation_of_the_Bevy_Remote_Protocol_Adopted.md
release-content/0.15/release-notes/14920_Add_cached_run_system_API.md
release-content/0.15/release-notes/14976_Color_gradient_curve.md
release-content/0.15/release-notes/15013_Implement_animation_masks_allowing_fine_control_of_the_tar.md
release-content/0.15/release-notes/15085_Add_state_scoped_events.md
release-content/0.15/release-notes/15184_Support_systems_that_take_references_as_input.md
release-content/0.15/release-notes/15204_box_shadow.md
release-content/0.15/release-notes/15207_Add_EntityRefExcept_and_EntityMutExcept_world_queries_in_p.md
release-content/0.15/release-notes/15276_Reduce_runtime_panics_through_SystemParam_validation.md
release-content/0.15/release-notes/15281_Add_core_and_alloc_over_std_Lints.md
release-content/0.15/release-notes/15282_Allow_animation_clips_to_animate_arbitrary_properties.md
release-content/0.15/release-notes/15291_UI_Scrolling.md
release-content/0.15/release-notes/15320_Retained_Rendering.md
release-content/0.15/release-notes/15361_Implement_volumetric_fog_support_for_both_point_lights_and.md
release-content/0.15/release-notes/15419_Gpu_readback.md
release-content/0.15/release-notes/15435_List_components_for_QueryEntityErrorQueryDoesNotMatch.md
release-content/0.15/release-notes/15538_Add_Support_for_Triggering_Events_via_AnimationEvents.md
release-content/0.15/release-notes/15614_Allow_Worldentity_family_of_functions_to_take_multiple_ent.md
release-content/0.15/release-notes/15627_Add_more_tools_for_traversing_hierarchies.md
release-content/0.15/release-notes/15631_Implement_additive_blending_for_animation_graphs.md
release-content/0.15/release-notes/15675_Add_most_common_interpolations.md
release-content/0.15/release-notes/15800_Add_mesh_picking_backend_and_MeshRayCast_system_parameter.md
release-content/0.15/release-notes/5772_bevy_reflect_Add_Reflectable_trait.md
release-content/0.15/release-notes/6042_bevy_reflect_Reflect_remote_types.md
release-content/0.15/release-notes/7207_reflect_implement_the_unique_reflect_rfc.md
release-content/0.15/release-notes/function_reflection.md
release-content/0.15/release-notes/reflection_serialization.md
release-content/0.15/release-notes/type_info_improvements.md
release-content/0.15/release-notes/virtual_geometry.md
release-content/0.16/migration-guides/13045_Support_on_thread_spawn_and_on_thread_destroy_for_TaskPool.md
release-content/0.16/migration-guides/14780_Link_iOS_example_with_rustc_and_avoid_C_trampoline.md
release-content/0.16/migration-guides/15487_Remove_the_meta_field_from_LoadedAsset_and_ErasedLoadedAss.md
release-content/0.16/migration-guides/15519_Remove_petgraph_from_bevy_ecs.md
release-content/0.16/migration-guides/15858_Introduce_methods_on_QueryState_to_obtain_a_Query.md
release-content/0.16/migration-guides/16069_Reduce_the_clusterable_object_UBO_size_below_16384_for_Web.md
release-content/0.16/migration-guides/16072_Move_TextureAtlas_into_UiImage_and_remove_impl_Component_f.md
release-content/0.16/migration-guides/16082_Fix_bevy_picking_plugin_suffixes.md
release-content/0.16/migration-guides/16088_Improved_UiImage_and_Sprite_scaling_and_slicing_APIs.md
release-content/0.16/migration-guides/16090_Adding_alpha_threshold_to_OrderIndependentTransparencySett.md
release-content/0.16/migration-guides/16095_Native_unclipped_depth_on_supported_platforms.md
release-content/0.16/migration-guides/16097_Remove_custom_rounding.md
release-content/0.16/migration-guides/16139_ReflectBundleremove_improvement.md
release-content/0.16/migration-guides/16219_Flush_commands_after_every_mutation_in_WorldEntityMut.md
release-content/0.16/migration-guides/16222_Gamepad_improvements.md
release-content/0.16/migration-guides/16233_Use_Name_component_for_gamepad.md
release-content/0.16/migration-guides/16269_Make_ComponentTicks_field_public.md
release-content/0.16/migration-guides/16271_UiImage__ImageNode_UiImageSize__ImageNodeSize.md
release-content/0.16/migration-guides/16301_Expose_Pipeline_Compilation_Zero_Initialize_Workgroup_Memo.md
release-content/0.16/migration-guides/16327_Rename_Rot2angle_between_to_Rot2angle_to.md
release-content/0.16/migration-guides/16331_Rename_PointerDownUp__PointerPressedReleased_in_bevy_picki.md
release-content/0.16/migration-guides/16348_Remove_deprecated_component_reads_and_writes.md
release-content/0.16/migration-guides/16368_Add_a_bindless_mode_to_AsBindGroup.md
release-content/0.16/migration-guides/16372_Add_Immutable_Component_Support.md
release-content/0.16/migration-guides/16375_Only_use_physical_coords_internally_in_bevy_ui.md
release-content/0.16/migration-guides/16388_Add_optional_transparency_passthrough_for_sprite_backend_w.md
release-content/0.16/migration-guides/16402_Use_IntoIterator_instead_of_IntoVec_in_cubic_splines_inter.md
release-content/0.16/migration-guides/16405_Bind_only_the_written_parts_of_storage_buffers.md
release-content/0.16/migration-guides/16459_Remove_the_min_and_max_fields_from_LayoutContext.md
release-content/0.16/migration-guides/16460_Remove_flush_and_reserve_invalid_assuming_no_entities.md
release-content/0.16/migration-guides/16468_Only_use_the_AABB_center_for_mesh_visibility_range_testing.md
release-content/0.16/migration-guides/16473_Add_flags_to_SpritePlugin_and_UiPlugin_to_allow_disabling_.md
release-content/0.16/migration-guides/16481_cleanup_bevy_renderlibrs.md
release-content/0.16/migration-guides/16499_Run_observers_before_hooks_for_on_replace_and_on_remove.md
release-content/0.16/migration-guides/16502_Multiple_box_shadow_support.md
release-content/0.16/migration-guides/16505_Rename_UiBoxShadowSamples_to_BoxShadowSamples.md
release-content/0.16/migration-guides/16516_one_shot_system_cleanup.md
release-content/0.16/migration-guides/16547_implement_EntitySet_and_iter_many_unique_methods.md
release-content/0.16/migration-guides/16567_Rename_ArgListpush_methods_to_with_and_add_new_push_method.md
release-content/0.16/migration-guides/16576_bevy_reflect_Remove_PartialReflectserializable.md
release-content/0.16/migration-guides/16589_Fallible_systems.md
release-content/0.16/migration-guides/16614_add_line_height_to_TextFont.md
release-content/0.16/migration-guides/16641_Fix_the_texture_binding_array_specialized_mesh_pipeline_an.md
release-content/0.16/migration-guides/16642_Turn_apply_deferred_into_a_ZST_System.md
release-content/0.16/migration-guides/16653_Implement_bindless_lightmaps.md
release-content/0.16/migration-guides/16673_Fix_atan2_docs.md
release-content/0.16/migration-guides/16693_Draw_the_UI_debug_overlay_using_the_UI_renderer.md
release-content/0.16/migration-guides/16694_Cache_systems_by_S_instead_of_SSystem.md
release-content/0.16/migration-guides/16702_pencil2_Fix_typos_across_bevy.md
release-content/0.16/migration-guides/16703_Rename_RayCastSettings_to_MeshRayCastSettings.md
release-content/0.16/migration-guides/16716_Rename_triggerentity_to_triggertarget.md
release-content/0.16/migration-guides/16717_Faster_entity_cloning.md
release-content/0.16/migration-guides/16725_BRP_strict_field_in_query.md
release-content/0.16/migration-guides/16727_BorderRect_maintenance.md
release-content/0.16/migration-guides/16757_Make_indirect_drawing_optout_instead_of_optin_enabling_mul.md
release-content/0.16/migration-guides/16761_Introduce_support_for_mixed_lighting_by_allowing_lights_to.md
release-content/0.16/migration-guides/16796_Support_scale_factor_for_image_render_targets.md
release-content/0.16/migration-guides/16810_Add_AssetChanged_query_filter.md
release-content/0.16/migration-guides/16812_Remove_the_type_parameter_from_check_visibility_and_only_i.md
release-content/0.16/migration-guides/16813_Add_ability_to_mute_audio_sinks.md
release-content/0.16/migration-guides/16815_Change_GpuImagesize_from_UVec2_to_Extent3d.md
release-content/0.16/migration-guides/16827_doc_fix_camera_link.md
release-content/0.16/migration-guides/16837_Rename_AudioSinkPlaybacktoggle_to_toggle_playback.md
release-content/0.16/migration-guides/16853_Remove_deprecated_ECS_items.md
release-content/0.16/migration-guides/16863_Replace_bevy_a11yFocus_with_InputFocus.md
release-content/0.16/migration-guides/16864_Expose_text_field_from_winit_in_KeyboardInput.md
release-content/0.16/migration-guides/16872_Rename_focus_in_bevy_picking_to_hover.md
release-content/0.16/migration-guides/16898_Introduce_twolevel_bins_for_multidrawable_meshes.md
release-content/0.16/migration-guides/16910_Fix_EaseFunctionExponential_to_exactly_hit_0_0_and_1_1.md
release-content/0.16/migration-guides/16911_Remove_unused_generic_in_DeferredWorldtrigger.md
release-content/0.16/migration-guides/16912_make_EntityHashMap_and_EntityHashSet_proper_types.md
release-content/0.16/migration-guides/16917_impl_EntityBorrow_for_more_types.md
release-content/0.16/migration-guides/16930_Refactor_noncore_Curve_methods_into_extension_traits.md
release-content/0.16/migration-guides/16938_Make_bevy_reflect_feature_of_bevy_math_nondefault.md
release-content/0.16/migration-guides/16942_Key_render_phases_off_the_main_world_view_entity_not_the_r.md
release-content/0.16/migration-guides/16957_math_Add_SmoothStep_and_SmootherStep_easing_functions.md
release-content/0.16/migration-guides/16968_Make_RawHandleWrapper_fields_private_to_save_users_from_th.md
release-content/0.16/migration-guides/17015_Scale_input_to_account_for_deadzones.md
release-content/0.16/migration-guides/17029_Refactor_hierarchyrelated_commands_to_remove_structs.md
release-content/0.16/migration-guides/17032_Remove_unsound_Clone_impl_for_EntityMutExcept.md
release-content/0.16/migration-guides/17041_ExtractedSprites_slice_buffer.md
release-content/0.16/migration-guides/17047_Remove_the_atlas_scaling_field_from_ExtractedUiItemGylphs.md
release-content/0.16/migration-guides/17051_Convert_to_fallible_system_in_IntoSystemConfigs.md
release-content/0.16/migration-guides/17063_Refactor_and_simplify_custom_projections.md
release-content/0.16/migration-guides/17075_Rename_track_change_detection_flag_to_track_location.md
release-content/0.16/migration-guides/17078_Fix_sprite_performance_regression_since_retained_render_wo.md
release-content/0.16/migration-guides/17115_Optimize_Entitiesentity_does_not_exist_error_details_messa.md
release-content/0.16/migration-guides/17121_Support_texture_atlases_in_CustomCursorImage.md
release-content/0.16/migration-guides/17131_Make_the_get_function_on_InstanceInputUniformBuffer_less_e.md
release-content/0.16/migration-guides/17175_Allow_users_to_easily_use_bevy_sprite_and_bevy_ui_without_.md
release-content/0.16/migration-guides/17211_Use_multi_draw_indirect_count_where_available_in_preparati.md
release-content/0.16/migration-guides/17215_Improved_Command_Errors.md
release-content/0.16/migration-guides/17219_Move_TextureAtlas_and_friends_into_bevy_image.md
release-content/0.16/migration-guides/17225_Make_sprite_picking_optin.md
release-content/0.16/migration-guides/17233_If_there_is_no_movement_DragStart_is_not_triggered.md
release-content/0.16/migration-guides/17235_Rename_DefaultCameraView.md
release-content/0.16/migration-guides/17259_Allow_users_to_customize_history_length_in_FrameTimeDiagno.md
release-content/0.16/migration-guides/17260_Make_bevy_remote_feature_enable_serialize_feature.md
release-content/0.16/migration-guides/17266_Rename_PickingBehavior_to_Pickable.md
release-content/0.16/migration-guides/17348_Unify_picking_backends.md
release-content/0.16/migration-guides/17376_Change_Worldtry_despawn_and_Worldtry_insert_batch_to_return.md
release-content/0.16/migration-guides/17380_Remove_Event_Component_trait_bound_using_a_wrapper_type_wh.md
release-content/0.16/migration-guides/17398_Relationships_nonfragmenting_onetomany.md
release-content/0.16/migration-guides/17403_Rename_TargetCamera_to_UiTargetCamera.md
release-content/0.16/migration-guides/17404_Reworked_Segment_types_into_their_cartesian_forms.md
release-content/0.16/migration-guides/17413_Implement_experimental_GPU_twophase_occlusion_culling_for_.md
release-content/0.16/migration-guides/17424_Flattened_PointerActionPressed_into_Press_and_Release.md
release-content/0.16/migration-guides/17427_Parent__ChildOf.md
release-content/0.16/migration-guides/17453_Include_ReflectFromReflect_in_all_dynamic_data_types.md
release-content/0.16/migration-guides/17469_Move_Resource_trait_to_its_own_file.md
release-content/0.16/migration-guides/17475_Meshmerge_to_return_a_Result.md
release-content/0.16/migration-guides/17499_Support_for_nonbrowser_wasm.md
release-content/0.16/migration-guides/17503_Refactored_ComponentHook_Parameters_into_HookContext.md
release-content/0.16/migration-guides/17518_Make_CustomCursor_variants_CustomCursorImageCustomCursorUr.md
release-content/0.16/migration-guides/17521_Improved_Spawn_APIs_and_Bundle_Effects.md
release-content/0.16/migration-guides/17525_Rework_WindowModeFullscreen_API.md
release-content/0.16/migration-guides/17542_Upgrade_to_wgpu_v24.md
release-content/0.16/migration-guides/17552_Make_the_default_directional_light_shadow_cascade_settings.md
release-content/0.16/migration-guides/17560_Remove_unnecessary_PartialReflect_bound_on_DeserializeWith.md
release-content/0.16/migration-guides/17567_Cold_Specialization.md
release-content/0.16/migration-guides/17597_Fixing_ValArithmeticError_typo_and_unused_variant.md
release-content/0.16/migration-guides/17602_Encapsulate_cfgfeature__track_location_in_a_type.md
release-content/0.16/migration-guides/17605_Support_decibels_in_bevy_audioVolume.md
release-content/0.16/migration-guides/17645_Improve_cubic_segment_bezier_functionality.md
release-content/0.16/migration-guides/17671_Isolate_component_registration.md
release-content/0.16/migration-guides/17679_Move_Item_and_fetch_to_QueryData_from_WorldQuery.md
release-content/0.16/migration-guides/17685_Split_Componentregister_component_hooks_into_individual_me.md
release-content/0.16/migration-guides/17694_Shorten_the_world_lifetime_returned_from_QueryLensquery.md
release-content/0.16/migration-guides/17695_Weak_handle_migration.md
release-content/0.16/migration-guides/17702_Use_target_abi__sim_instead_of_ios_simulator_feature.md
release-content/0.16/migration-guides/17743_Fix_rounding_in_steps_easing_function.md
release-content/0.16/migration-guides/17752_Add_ways_to_configure_EasingFunctionSteps_via_new_StepConf.md
release-content/0.16/migration-guides/17760_Allowed_creating_uninitialized_images_for_use_as_storage_t.md
release-content/0.16/migration-guides/17767_Use_unchecked_shaders_for_better_performance.md
release-content/0.16/migration-guides/17826_Fix_unsoundness_in_QueryItersort_by.md
release-content/0.16/migration-guides/17842_Make_sprite_picking_optin.md
release-content/0.16/migration-guides/17855_Add_EntityDoesNotExistError_replace_cases_of_Entity_as_an_.md
release-content/0.16/migration-guides/17879_Add_uv_transform_to_ColorMaterial.md
release-content/0.16/migration-guides/17900_Add_byte_information_to_PositionedGlyph.md
release-content/0.16/migration-guides/17938_Only_despawn_scene_entities_still_in_the_hierarchy.md
release-content/0.16/migration-guides/17955_Add_no_std_support_to_bevy.md
release-content/0.16/migration-guides/17962_Generic_system_config.md
release-content/0.16/migration-guides/17967_Upgrade_to_Rust_Edition_2024.md
release-content/0.16/migration-guides/17977_Renamed_EventWritersend_methods_to_write.md
release-content/0.16/migration-guides/18028_Use_register_dynamic_for_merging.md
release-content/0.16/migration-guides/18082_Make_Querysingle_and_friends_return_a_Result.md
release-content/0.16/migration-guides/18083_Improved_DeriveEvent.md
release-content/0.16/migration-guides/18147_Deprecate_insert_or_spawn_function_family.md
release-content/0.16/migration-guides/18157_Remove_lifetime_from_QueryEntityError.md
release-content/0.16/migration-guides/18173_Queued_component_registration.md
release-content/0.16/migration-guides/18183_Deprecated_Querymany_and_many_mut.md
release-content/0.16/migration-guides/18265_FilteredResource_returns_a_Result_instead_of_a_simple_Opti.md
release-content/0.16/migration-guides/18284_bevy_reflect_Deprecate_PartialReflectclone_value.md
release-content/0.16/migration-guides/18301_Create_new_NonSendMarker.md
release-content/0.16/migration-guides/18319_add_Entity_default_to_the_entity_set_wrappers.md
release-content/0.16/migration-guides/18322_Move_nongeneric_parts_of_the_PrepassPipeline_to_internal_f.md
release-content/0.16/migration-guides/18323_Add_bevy_anti_aliasing.md
release-content/0.16/migration-guides/18432_Replace_VisitEntities_with_MapEntities.md
release-content/0.16/migration-guides/18439_Newtype_Anchor.md
release-content/0.16/migration-guides/18451_Get_names_of_queued_components.md
release-content/0.16/migration-guides/18454_Make_system_param_validation_rely_on_the_unified_ECS_error.md
release-content/0.16/migration-guides/18504_Define_system_param_validation_on_a_persystem_parameter_basis.md
release-content/0.16/migration-guides/18538_Remove_Imagefrom_buffer_name_argument_only_present_in_debu.md
release-content/0.16/migration-guides/18544_Make_RayMap_map_public.md
release-content/0.16/migration-guides/18555_Improved_require_syntax.md
release-content/0.16/migration-guides/bevy_core_removed.md
release-content/0.16/migration-guides/bevy_utils_decimation.md
release-content/0.16/release-notes/13120_Add_DefaultQueryFilters.md
release-content/0.16/release-notes/14069_Add_support_for_specular_tints_and_maps_per_the_KHR_materi.md
release-content/0.16/release-notes/15074_bevy_reflect_Function_Overloading_Generic__Variadic_Functi.md
release-content/0.16/release-notes/15473_Retained_Gizmos.md
release-content/0.16/release-notes/15611_Add_bevy_input_focus_crate.md
release-content/0.16/release-notes/16132_Entity_cloning.md
release-content/0.16/release-notes/16314_Procedural_atmospheric_scattering.md
release-content/0.16/release-notes/16368_Add_a_bindless_mode_to_AsBindGroup.md
release-content/0.16/release-notes/16372_Add_Immutable_Component_Support.md
release-content/0.16/release-notes/16388_Add_optional_transparency_passthrough_for_sprite_backend_w.md
release-content/0.16/release-notes/16427_Use_multidraw_for_opaque_meshes_when_GPU_culling_is_in_use.md
release-content/0.16/release-notes/16503_Derivative_access_patterns_for_curves.md
release-content/0.16/release-notes/16778_Event_source_location_tracking.md
release-content/0.16/release-notes/16810_Add_AssetChanged_query_filter.md
release-content/0.16/release-notes/17096_Anamorphic_Bloom.md
release-content/0.16/release-notes/17216_Stop_automatically_generating_meta_files_for_assets_while_.md
release-content/0.16/release-notes/17398_Relationships_nonfragmenting_onetomany.md
release-content/0.16/release-notes/17521_Improved_Spawn_APIs_and_Bundle_Effects.md
release-content/0.16/release-notes/17559_Basic_UI_text_shadows.md
release-content/0.16/release-notes/17567_Cold_Specialization.md
release-content/0.16/release-notes/17648_mesh_tags.md
release-content/0.16/release-notes/17758_Trait_tags_on_docsrs.md
release-content/0.16/release-notes/17840_Parallel_Transform_Propagation.md
release-content/0.16/release-notes/17953_Add_support_for_experimental_WESL_shader_source.md
release-content/0.16/release-notes/17955_Add_no_std_support_to_bevy.md
release-content/0.16/release-notes/18555_Improved_require_syntax.md
release-content/0.16/release-notes/decals.md
release-content/0.16/release-notes/gpu_driven_rendering.md
release-content/0.16/release-notes/gpu_tracing.md
release-content/0.16/release-notes/occlusion_culling.md
release-content/0.16/release-notes/unified_error_handling.md
release-content/0.16/release-notes/virtual_geometry_improvements.md


--- PROJECT SOURCE CODE ---




--- BEGIN FILE `content/learn/migration-guides/0.12-to-0.13.md` ---


+++
title = "0.12 to 0.13"
insert_anchor_links = "right"
[extra]
weight = 8
long_title = "Migration Guide: 0.12 to 0.13"
+++

Bevy relies heavily on improvements in the Rust language and compiler.
As a result, the Minimum Supported Rust Version (MSRV) is "the latest stable release" of Rust.
<div class="migration-guide-legacy">

### [Support all types of animation interpolation from gltf](https://github.com/bevyengine/bevy/pull/10755)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Animation</div>
</div>

When manually specifying an animation `VariableCurve`, the interpolation type must be specified:

```rust
// 0.12
VariableCurve {
    keyframe_timestamps: vec![0.0, 1.0, 2.0, 3.0, 4.0],
    keyframes: Keyframes::Rotation(vec![
        Quat::IDENTITY,
        Quat::from_axis_angle(Vec3::Y, PI / 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
        Quat::IDENTITY,
    ]),
},

// 0.13
VariableCurve {
    keyframe_timestamps: vec![0.0, 1.0, 2.0, 3.0, 4.0],
    keyframes: Keyframes::Rotation(vec![
        Quat::IDENTITY,
        Quat::from_axis_angle(Vec3::Y, PI / 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
        Quat::IDENTITY,
    ]),
    interpolation: Interpolation::Linear,
},
```

### [`ReadAssetBytesError::Io`  exposes failing path](https://github.com/bevyengine/bevy/pull/10450)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Assets</div>
</div>

The `ReadAssetBytesError::Io` variant now contains two named fields instead of converting from `std::io::Error`.

- `path`: The requested (failing) path (`PathBuf`)
- `source`: The source `std::io::Error`

### [Ensure consistency between Un/Typed `AssetId` and `Handle`](https://github.com/bevyengine/bevy/pull/10628)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Assets</div>
</div>

If you relied on any of the panicking `From<Untyped...>` implementations, simply call the existing `typed` methods instead. Alternatively, use the new `TryFrom` implementation instead to directly expose possible mistakes.

### [Use `impl Into<A>` for `Assets::add`](https://github.com/bevyengine/bevy/pull/10878)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Assets</div>
</div>

Some `into` calls that worked previously might now be broken because of the new trait bounds. You need to either remove `into` or perform the conversion explicitly with `from`:

```rust
// 0.12
let mesh_handle = meshes.add(shape::Cube { size: 1.0 }.into()),

// 0.13
let mesh_handle = meshes.add(shape::Cube { size: 1.0 }),
let mesh_handle = meshes.add(Mesh::from(shape::Cube { size: 1.0 })),
```

### [GLTF extension support](https://github.com/bevyengine/bevy/pull/11138)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Assets</div>
</div>

This will have issues with “asset migrations”, as there is currently no way for .meta files to be migrated. Attempting to migrate .meta files without the new flag will yield the following error:

```rust
bevy_asset::server: Failed to deserialize meta for asset test_platform.gltf: Failed to deserialize asset meta: SpannedError { code: MissingStructField { field: "include_source", outer: Some("GltfLoaderSettings") }, position: Position { line: 9, col: 9 } }
```

This means users who want to migrate their .meta files will have to add the `include_source: true,` setting to their meta files by hand.

### [Allow TextureAtlasBuilder in AssetLoader](https://github.com/bevyengine/bevy/pull/11548)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Assets</div>
</div>

- For `add_texture` you need to wrap your `AssetId` in `Some`
- `finish` now returns the atlas texture image directly instead of a handle. Provide the atlas texture to `add` on Assets<Texture> to get a Handle<Image>

### [Remove the ability to ignore global volume](https://github.com/bevyengine/bevy/pull/11092)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Audio</div>
</div>

The option to ignore the global volume using `Volume::Absolute` has been removed and [`Volume`] now stores the volume level directly, removing the need for the `VolumeLevel` struct.

`Volume::new_absolute` and `Volume::new_relative` were removed. Use `Volume::new(0.5)`.

[`Volume`]: https://docs.rs/bevy/0.13.0/bevy/audio/struct.Volume.html

### [Optional override for global spatial scale](https://github.com/bevyengine/bevy/pull/10419)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Audio</div>
</div>

`AudioPlugin::spatial_scale` has been renamed to `default_spatial_scale` and the default spatial scale can now be overridden on individual audio sources with `PlaybackSettings::spatial_scale`.

If you were modifying or reading `SpatialScale` at run time, use `DefaultSpatialScale` instead.

```rust
// 0.12
app.add_plugins(DefaultPlugins.set(AudioPlugin {
    spatial_scale: SpatialScale::new(AUDIO_SCALE),
    ..default()
}));

// 0.13
app.add_plugins(DefaultPlugins.set(AudioPlugin {
    default_spatial_scale: SpatialScale::new(AUDIO_SCALE),
    ..default()
}));
```

### [Add support for updating the tracing subscriber in LogPlugin](https://github.com/bevyengine/bevy/pull/10822)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Diagnostics</div>
</div>

`LogPlugin` has a new optional `update_subscriber` field. Use `None` or `..default()` to match previous behavior.

### [Replace `DiagnosticId` by `DiagnosticPath`](https://github.com/bevyengine/bevy/pull/9266)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Diagnostics</div>
</div>

```diff
- const UNIQUE_DIAG_ID: DiagnosticId = DiagnosticId::from_u128(42);
+ const UNIQUE_DIAG_PATH: DiagnosticPath = DiagnosticPath::const_new("foo/bar");

- Diagnostic::new(UNIQUE_DIAG_ID, "example", 10)
+ Diagnostic::new(UNIQUE_DIAG_PATH).with_max_history_length(10)

- diagnostics.add_measurement(UNIQUE_DIAG_ID, || 42);
+ diagnostics.add_measurement(&UNIQUE_DIAG_ID, || 42);
```

### [Use `EntityHashMap` for `EntityMapper`](https://github.com/bevyengine/bevy/pull/10415)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

If you are using the following types, update their listed methods to use the new `EntityHashMap`. `EntityHashMap` has the same methods as the normal `HashMap`, so you just need to replace the name.

__`EntityMapper`__

- `get_map`
- `get_mut_map`
- `new`
- `world_scope`

__`ReflectMapEntities`__

- `map_all_entities`
- `map_entities`
- `write_to_world`

__`InstanceInfo`__

- `entity_map`
  - This is a property, not a method.

### [Update `Event` send methods to return `EventId`](https://github.com/bevyengine/bevy/pull/10551)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

__`send` / `send_default` / `send_batch`__

For the following methods:

- `Events::send`
- `Events::send_default`
- `Events::send_batch`
- `EventWriter::send`
- `EventWriter::send_default`
- `EventWriter::send_batch`
- `World::send_event`
- `World::send_event_default`
- `World::send_event_batch`

Ensure calls to these methods either handle the returned value, or suppress the result with `;`.

```rust
// 0.12
fn send_my_event(mut events: EventWriter<MyEvent>) {
    events.send_default()
}

// 0.13
fn send_my_event(mut events: EventWriter<MyEvent>) {
    events.send_default();
}
```

This will most likely be noticed within `match` statements:

```rust
// 0.12
match is_pressed {
    true => events.send(PlayerAction::Fire),
//                 ^--^ No longer returns ()
    false => {}
}

// 0.13
match is_pressed {
    true => {
        events.send(PlayerAction::Fire);
    },
    false => {}
}
```

### [Optimise `Entity` with repr align & manual `PartialOrd`/`Ord`](https://github.com/bevyengine/bevy/pull/10558)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

Any `unsafe` code relying on field ordering of `Entity` or sufficiently cursed shenanigans should change to reflect the different internal representation and alignment requirements of `Entity`.

### [Split WorldQuery into QueryData and QueryFilter](https://github.com/bevyengine/bevy/pull/9918)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

Check [#9918](https://github.com/bevyengine/bevy/pull/9918) and [#10799](https://github.com/bevyengine/bevy/pull/10779) for more information.

- Rename the following trait type usages:
  - Trait’s `ExtractComponent` type `Query` to `Data`.
  - Trait’s `GetBatchData` type `Query` to `Data`.
  - Trait’s `ExtractInstance` type `Query` to `Data`.
- Rename `ReadOnlyWorldQuery` to `QueryFilter` and `WorldQuery` to `QueryData`
- You'll need to update your related derives

```rust
// 0.12
#[derive(WorldQuery)]
#[world_query(mutable, derive(Debug))]
struct CustomQuery {
    entity: Entity,
    a: &'static mut ComponentA
}

#[derive(WorldQuery)]
struct QueryFilter {
    _c: With<ComponentC>
}

// 0.13
#[derive(QueryData)]
#[query_data(mutable, derive(Debug))]
struct CustomQuery {
    entity: Entity,
    a: &'static mut ComponentA,
}

#[derive(QueryFilter)]
struct QueryFilter {
    _c: With<ComponentC>
}
```

- Replace `Option<With<T>>` with `Has<T>`

```rust
// 0.12
fn my_system(query: Query<(Entity, Option<With<ComponentA>>)>) {
  for (entity, has_a_option) in query.iter(){
    let has_a:bool = has_a_option.is_some();
    //todo!()
  }
}

// 0.13
fn my_system(query: Query<(Entity, Has<ComponentA>)>) {
  for (entity, has_a) in query.iter(){
    //todo!()
  }
}
```

- Fix queries which had filters in the data position or vice versa.

```rust
// 0.12
fn my_system(query: Query<(Entity, With<ComponentA>)>) {
  for (entity, _) in query.iter(){
  //todo!()
  }
}

// 0.13
fn my_system(query: Query<Entity, With<ComponentA>>) {
  for entity in query.iter(){
  //todo!()
  }
}

// 0.12
fn my_system(query: Query<AnyOf<(&ComponentA, With<ComponentB>)>>) {
  for (entity, _) in query.iter(){
  //todo!()
  }
}

// 0.13
fn my_system(query: Query<Option<&ComponentA>, Or<(With<ComponentA>, With<ComponentB>)>>) {
  for entity in query.iter(){
  //todo!()
  }
}

```

### [Reduced `TableRow` `as` Casting](https://github.com/bevyengine/bevy/pull/10811)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

- `TableRow::new` -> `TableRow::from_usize`
- `TableRow::index` -> `TableRow::as_usize`
- `TableId::new` -> `TableId::from_usize`
- `TableId::index` -> `TableId::as_usize`

### [Allow the editing of startup schedules](https://github.com/bevyengine/bevy/pull/10969)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

- Added a new field to `MainScheduleOrder`, `startup_labels`, for editing the startup schedule order.

### [Auto insert sync points](https://github.com/bevyengine/bevy/pull/9822)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

- `apply_deferred` points are added automatically when there is ordering relationship with a system that has deferred parameters like `Commands`. If you want to opt out of this you can switch from `after`, `before`, and `chain` to the corresponding `ignore_deferred` API, `after_ignore_deferred`, `before_ignore_deferred` or `chain_ignore_deferred` for your system/set ordering.
- You can also set `ScheduleBuildSettings::auto_insert_sync_points` to `false` if you want to do it for the whole schedule. Note that in this mode you can still add `apply_deferred` points manually.
- For most manual insertions of `apply_deferred` you should remove them as they cannot be merged with the automatically inserted points and might reduce parallelizability of the system graph.
- If you were manually deriving `SystemParam`, you will need to add `system_meta.set_has_deferred` if you use `SystemParam::apply` and want sync points auto inserted after use of your `SystemParam`.

### [Add insert_state to App.](https://github.com/bevyengine/bevy/pull/11043)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

Renamed `App::add_state` to `init_state`.

### [Rename `ArchetypeEntity::entity` into `ArchetypeEntity::id`](https://github.com/bevyengine/bevy/pull/11118)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

The method `ArchetypeEntity::entity` has been renamed to `ArchetypeEntity::id`

### [Restore support for running `fn` `EntityCommands` on entities that might be despawned](https://github.com/bevyengine/bevy/pull/11107)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

All `Command` types in `bevy_ecs`, such as `Spawn`, `SpawnBatch`, `Insert`, etc., have been made private. Use the equivalent methods on `Commands` or `EntityCommands` instead.

If you were working with `ChildBuilder`, recreate these commands using a closure. For example, you might migrate a Command to insert components like:

```rust
// 0.12
parent.add_command(Insert {
    entity: ent_text,
    bundle: Capitalizable,
});

// 0.13
parent.add_command(move |world: &mut World| {
    world.entity_mut(ent_text).insert(Capitalizable);
});
```

### [Simplify conditions](https://github.com/bevyengine/bevy/pull/11316)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

Some common run conditions that were previously closures and needed to be called are now just systems. Remove the parentheses.

- `resource_exists<T>()` -> `resource_exists<T>`
- `resource_added<T>()` -> `resource_added<T>`
- `resource_changed<T>()` -> `resource_changed<T>`
- `resource_exists_and_changed<T>()` -> `resource_exists_and_changed<T>`
- `state_exists<S: States>()` -> `state_exists<S: States>`
- `state_changed<S: States>()` -> `state_changed<S: States>`
- `any_with_component<T: Component>()` -> `any_with_component<T: Component>`

### [refactor: Simplify lifetimes for `Commands` and related types](https://github.com/bevyengine/bevy/pull/11445)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

The lifetimes for `EntityCommands` have been simplified.

```rust
// 0.12 (Bevy 0.12)
struct MyStruct<'w, 's, 'a> {
     commands: EntityCommands<'w, 's, 'a>,
}

// 0.13 (Bevy 0.13)
struct MyStruct<'a> {
    commands: EntityCommands<'a>,
}
```

The method `EntityCommands::commands` now returns `Commands` rather than `&mut Commands`.

```rust
// 0.12 (Bevy 0.12)
let commands = entity_commands.commands();
commands.spawn(...);

// 0.13 (Bevy 0.13)
let mut commands = entity_commands.commands();
commands.spawn(...);
```

### [Deprecated Various Component Methods from `Query` and `QueryState`](https://github.com/bevyengine/bevy/pull/9920)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

__`QueryState::get_component_unchecked_mut`__

Use `QueryState::get_unchecked_manual` and select for the exact component based on the structure of the exact query as required.

__`Query::(get_)component(_unchecked)(_mut)`__

Use `Query::get` and select for the exact component based on the structure of the exact query as required.

- For mutable access (`_mut`), use `Query::get_mut`
- For unchecked access (`_unchecked`), use `Query::get_unchecked`
- For panic variants (non-`get_`), add `.unwrap()`

For example:

```rust
fn system(query: Query<(&A, &B, &C)>) {
    // 0.12
    let b = query.get_component::<B>(entity).unwrap();

    // Alternative 1 (using tuple destructuring)
    let (_, b, _) = query.get(entity).unwrap();

    // Alternative 2 (using tuple item indexing)
    let b = query.get(entity).unwrap().1;
}
```

### [`System::type_id` Consistency](https://github.com/bevyengine/bevy/pull/11728)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
</div>

If you use `System::type_id()` on function systems (exclusive or not), ensure you are comparing its value to other `System::type_id()` calls, or `IntoSystem::system_type_id()`.

This code wont require any changes, because `IntoSystem`’s are directly compared to each other.

```rust
fn test_system() {}

let type_id = test_system.type_id();

// ...

// No change required
assert_eq!(test_system.type_id(), type_id);
```

Likewise, this code wont, because `System`’s are directly compared.

```rust
fn test_system() {}

let type_id = IntoSystem::into_system(test_system).type_id();

// ...

// No change required
assert_eq!(IntoSystem::into_system(test_system).type_id(), type_id);
```

The below _does_ require a change, since you’re comparing a `System` type to a `IntoSystem` type.

```rust
fn test_system() {}

// 0.12
assert_eq!(test_system.type_id(), IntoSystem::into_system(test_system).type_id());

// 0.13
assert_eq!(test_system.system_type_id(), IntoSystem::into_system(test_system).type_id());
```

### [System Stepping implemented as Resource](https://github.com/bevyengine/bevy/pull/8453)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
    <div class="migration-guide-area-tag">Editor</div>
    <div class="migration-guide-area-tag">App</div>
    <div class="migration-guide-area-tag">Diagnostics</div>
</div>

Add a call to `Schedule::set_label()` for any custom `Schedule`. This is only required if the `Schedule` will be stepped

### [Make the MapEntities trait generic over Mappers, and add a simpler EntityMapper](https://github.com/bevyengine/bevy/pull/11428)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
    <div class="migration-guide-area-tag">Scenes</div>
</div>

- The existing `EntityMapper` (notably used to replicate `Scenes` across different `World`s) has been renamed to `SceneEntityMapper`
- The `MapEntities` trait now works with a generic `EntityMapper` instead of the specific struct `EntityMapper`.
Calls to `fn map_entities(&mut self, entity_mapper: &mut EntityMapper)` need to be updated to
`fn map_entities<M: EntityMapper>(&mut self, entity_mapper: &mut M)`
- The new trait `EntityMapper` has been added to the prelude

### [Async channel v2](https://github.com/bevyengine/bevy/pull/10692)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
    <div class="migration-guide-area-tag">Tasks</div>
</div>

The `PipelinedRendering` plugin is no longer exported on wasm. If you are including it in your wasm builds you should remove it.

```rust
#[cfg(not(target_arch = "wasm32"))]
app.add_plugins(bevy_render::pipelined_rendering::PipelinedRenderingPlugin);
```

### [Add First/Pre/Post/Last schedules to the Fixed timestep](https://github.com/bevyengine/bevy/pull/10977)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
    <div class="migration-guide-area-tag">Time</div>
</div>

Usage of `RunFixedUpdateLoop` should be renamed to `RunFixedMainLoop`.

### [Move `EntityHash` related types into `bevy_ecs`](https://github.com/bevyengine/bevy/pull/11498)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">ECS</div>
    <div class="migration-guide-area-tag">Utils</div>
</div>

- Uses of `bevy::utils::{EntityHash, EntityHasher, EntityHashMap, EntityHashSet}` now have to be imported from `bevy::ecs::entity::hash`.
- Uses of `EntityHashMap` no longer have to specify the first generic parameter. It is now hardcoded to always be `Entity`.

### [Move Circle Gizmos to Their Own File](https://github.com/bevyengine/bevy/pull/10631)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Gizmos</div>
</div>

- Change `gizmos::CircleBuilder` to `gizmos::circles::Circle2dBuilder`
- Change `gizmos::Circle2dBuilder` to `gizmos::circles::Circle2dBuilder`

### [move gizmo arcs to their own file](https://github.com/bevyengine/bevy/pull/10660)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Gizmos</div>
</div>

`gizmos::Arc2dBuilder` -> `gizmos::arcs::Arc2dBuilder`

### [Multiple Configurations for Gizmos](https://github.com/bevyengine/bevy/pull/10342)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Gizmos</div>
</div>

`GizmoConfig` is no longer a resource and has to be accessed through `GizmoConfigStore` resource. The default config group is `DefaultGizmoConfigGroup`, but consider using your own custom config group if applicable.

### [Use Direction3d for gizmos.circle normal](https://github.com/bevyengine/bevy/pull/11422)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Gizmos</div>
</div>

Pass a Direction3d for gizmos.circle normal, eg. `Direction3d::new(vec).unwrap_or(default)` or potentially `Direction3d::new_unchecked(vec)` if you know your vec is definitely normalized.

### [Rename "AddChild" to "PushChild"](https://github.com/bevyengine/bevy/pull/11194)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Hierarchy</div>
</div>

The struct `AddChild` has been renamed to `PushChild`, and the struct `AddChildInPlace` has been renamed to `PushChildInPlace`.

### [Rename `Input` to `ButtonInput`](https://github.com/bevyengine/bevy/pull/10859)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Input</div>
</div>

Users need to rename `Input` to `ButtonInput` in their projects.

### [Add window entity to TouchInput events](https://github.com/bevyengine/bevy/pull/11128)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Input</div>
</div>

Add a `window` field when constructing or destructuring a `TouchInput` struct.

### [Add delta to CursorMoved event](https://github.com/bevyengine/bevy/pull/11710)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Input</div>
</div>

You need to add `delta` to any manually created `CursorMoved` struct.

### [Remove `Default` impl for `CubicCurve`](https://github.com/bevyengine/bevy/pull/11335)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Math</div>
</div>

- Remove `CubicCurve` from any structs that implement `Default`.
- Wrap `CubicCurve` in a new type and provide your own default.

```rust
#[derive(Deref)]
struct MyCubicCurve<P: Point>(pub CubicCurve<P>);

impl Default for MyCubicCurve<Vec2> {
    fn default() -> Self {
        let points = [[
            vec2(-1.0, -20.0),
            vec2(3.0, 2.0),
            vec2(5.0, 3.0),
            vec2(9.0, 8.0),
        ]];

        Self(CubicBezier::new(points).to_curve())
    }
}
```

### [Direction: Rename `from_normalized` to `new_unchecked`](https://github.com/bevyengine/bevy/pull/11425)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Math</div>
</div>

Renamed `Direction2d::from_normalized` and `Direction3d::from_normalized` to `new_unchecked`.

### [Add `Capsule2d` primitive](https://github.com/bevyengine/bevy/pull/11585)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Math</div>
</div>

`Capsule` is now `Capsule3d`. If you were using it for 2d you need to use `Capsule2d`

### [Rename RayTest to RayCast](https://github.com/bevyengine/bevy/pull/11635)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Math</div>
</div>

RayTest2d and RayTest3d have been renamed to RayCast2d and RayCast3d

### [Use `IntersectsVolume` for breakout example collisions](https://github.com/bevyengine/bevy/pull/11500)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Physics</div>
</div>

`sprite::collide_aabb::collide` and `sprite::collide_aabb::Collision` were removed.

```rust
// 0.12
let collision = bevy::sprite::collide_aabb::collide(a_pos, a_size, b_pos, b_size);
if collision.is_some() {
    // ...
}

// 0.13
let collision = Aabb2d::new(a_pos.truncate(), a_size / 2.)
    .intersects(&Aabb2d::new(b_pos.truncate(), b_size / 2.));
if collision {
    // ...
}
```

If you were making use `collide_aabb::Collision`, see the new `collide_with_side` function in the [`breakout` example](https://bevy.org/examples/Games/breakout/).

### [Add `ReflectFromWorld` and replace the `FromWorld` requirement on `ReflectComponent` and `ReflectBundle` with `FromReflect`](https://github.com/bevyengine/bevy/pull/9623)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Reflection</div>
</div>

- Existing uses of `ReflectComponent::from_world` and `ReflectBundle::from_world` will have to be changed to `ReflectFromWorld::from_world`.
- Users of `#[reflect(Component)]` and `#[reflect(Bundle)]` will need to also implement/derive `FromReflect`.
- Users of `#[reflect(Component)]` and `#[reflect(Bundle)]` may now want to also add `FromWorld` to the list of reflected traits in case their `FromReflect` implementation may fail.
- Users of `ReflectComponent` will now need to pass a `&TypeRegistry` to its `insert`, `apply_or_insert` and `copy` methods.

### [Remove TypeUuid](https://github.com/bevyengine/bevy/pull/11497)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Reflection</div>
</div>

Convert any uses of `#[derive(TypeUuid)]` with `#[derive(TypePath]` for more complex uses see the relevant [documentation](https://docs.rs/bevy/latest/bevy/prelude/trait.TypePath.html) for more information.

### [Explicit color conversion methods](https://github.com/bevyengine/bevy/pull/10321)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

`Color::from(Vec4)` is now `Color::rgba_from_array(impl Into<[f32; 4]>)`
`Vec4::from(Color)` is now `Color::rgba_to_vec4(&self)`

```rust
// 0.12
let color_vec4 = Vec4::new(0.5, 0.5, 0.5);
let color_from_vec4 = Color::from(color_vec4);

let color_array = [0.5, 0.5, 0.5];
let color_from_array = Color::from(color_array);

// 0.13
let color_vec4 = Vec4::new(0.5, 0.5, 0.5);
let color_from_vec4 = Color::rgba_from_array(color_vec4);

let color_array = [0.5, 0.5, 0.5];
let color_from_array = Color::rgba_from_array(color_array);
```

### [Add a `depth_bias` to `Material2d`](https://github.com/bevyengine/bevy/pull/10683)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

`PreparedMaterial2d` has a new `depth_bias` field. A value of 0.0 can be used to get the previous behavior.

### [Bind group layout entries](https://github.com/bevyengine/bevy/pull/10224)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

`RenderDevice::create_bind_group_layout()` doesn’t take a `BindGroupLayoutDescriptor` anymore. You need to provide the parameters separately

```rust
// 0.12
let layout = render_device.create_bind_group_layout(&BindGroupLayoutDescriptor {
    label: Some("post_process_bind_group_layout"),
    entries: &[
        BindGroupLayoutEntry {
            // ...
        },
    ],
});

// 0.13
let layout = render_device.create_bind_group_layout(
 "post_process_bind_group_layout",
    &[
        BindGroupLayoutEntry {
            // ...
        },
    ],
);
```

### [Swap material and mesh bind groups](https://github.com/bevyengine/bevy/pull/10485)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

- Custom 2d and 3d mesh/material shaders should now use bind group 2 `@group(2) @binding(x)` for their bound resources, instead of bind group 1.
- Many internal pieces of rendering code have changed so that mesh data is now in bind group 1, and material data is now in bind group 2. Semi-custom rendering setups (that don’t use the Material or Material2d APIs) should adapt to these changes.

### [light renderlayers](https://github.com/bevyengine/bevy/pull/10742)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

Lights no longer affect all `RenderLayers` by default, now like cameras and meshes they default to `RenderLayers::layer(0)`. To recover the previous behaviour and have all lights affect all views, add a `RenderLayers::all()` component to the light entity.

### [Update to wgpu 0.18](https://github.com/bevyengine/bevy/pull/10266)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

- `RenderPassDescriptor` `color_attachments`  (as well as `RenderPassColorAttachment`, and `RenderPassDepthStencilAttachment`) now use `StoreOp::Store` or `StoreOp::Discard` instead of a `boolean` to declare whether or not they should be stored.
- `RenderPassDescriptor` now have `timestamp_writes` and `occlusion_query_set` fields. These can safely be set to `None`.
- `ComputePassDescriptor` now have a `timestamp_writes` field. This can be set to `None` for now.
- See the [wgpu changelog](https://github.com/gfx-rs/wgpu/blob/trunk/CHANGELOG.md#v0180-2023-10-25) for additional details

### [Keep track of when a texture is first cleared](https://github.com/bevyengine/bevy/pull/10325)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

- Remove arguments to `ViewTarget::get_color_attachment()` and `ViewTarget::get_unsampled_color_attachment()`.
- Configure clear color on `Camera` instead of on `Camera3d` and `Camera2d`.
- Moved `ClearColor` and `ClearColorConfig` from `bevy::core_pipeline::clear_color` to `bevy::render::camera`.
- `ViewDepthTexture` must now be created via the `new()` method

### [Approximate indirect specular occlusion](https://github.com/bevyengine/bevy/pull/11152)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

Renamed `PbrInput::occlusion` to `diffuse_occlusion`, and added `specular_occlusion`.

### [Texture Atlas rework](https://github.com/bevyengine/bevy/pull/5103)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

The `TextureAtlas` asset that previously contained both the atlas layout and image handle was renamed to `TextureAtlasLayout` with the image handle portion moved to a separate `Handle<Image>` available from `SpriteSheetBundle::texture` or `AtlasImageBundle::image`.

`TextureAtlasSprite` was removed and replaced by a new component, `TextureAtlas`, which now holds the atlas index. The `Sprite` component can be used for `flip_x`, `flip_y`, `custom_size`, `anchor`, and `color`.

`SpriteSheetBundle` now uses a `Sprite` instead of a `TextureAtlasSprite` component and a `TextureAtlas` component instead of a `Handle<TextureAtlaslayout>`.

`DynamicTextureAtlasBuilder::add_texture` takes an additional `&Handle<Image>` parameter.

`TextureAtlasLayout::from_grid` no longer takes a `Handle<Image>` parameter.

`TextureAtlasBuilder::finish` now returns a `Result<(TextureAtlasLayout, Image), TextureAtlasBuilderError>`.

`UiTextureAtlasImage` was removed. The `AtlasImageBundle` is now identical to `ImageBundle` with an additional `TextureAtlas`.

- Sprites

```diff
fn my_system(
  mut commands: Commands,
-  mut atlases: ResMut<Assets<TextureAtlas>>,
+  mut atlases: ResMut<Assets<TextureAtlasLayout>>,
  asset_server: Res<AssetServer>
) {
    let texture_handle = asset_server.load("my_texture.png");
-   let layout = TextureAtlas::from_grid(texture_handle, Vec2::new(25.0, 25.0), 5, 5, None, None);
+   let layout = TextureAtlasLayout::from_grid(Vec2::new(25.0, 25.0), 5, 5, None, None);
    let layout_handle = atlases.add(layout);
    commands.spawn(SpriteSheetBundle {
-      sprite: TextureAtlasSprite::new(0),
-      texture_atlas: atlas_handle,
       // the new sprite initialization is covered by the `..default()` expression; however, it is added to showcase migration
+      sprite: Sprite::default(),
+      atlas: TextureAtlas {
+         layout: layout_handle,
+         index: 0
+      },
+      texture: texture_handle,
       ..default()
     });
}
```

- UI

```diff
fn my_system(
  mut images: ResMut<Assets<Image>>,
-  mut atlases: ResMut<Assets<TextureAtlas>>,
+  mut atlases: ResMut<Assets<TextureAtlasLayout>>,
  asset_server: Res<AssetServer>
) {
    let texture_handle = asset_server.load("my_texture.png");
-   let layout = TextureAtlas::from_grid(texture_handle, Vec2::new(25.0, 25.0), 5, 5, None, None);
+   let layout = TextureAtlasLayout::from_grid(Vec2::new(25.0, 25.0), 5, 5, None, None);
    let layout_handle = atlases.add(layout);
    commands.spawn(AtlasImageBundle {
-      texture_atlas_image: UiTextureAtlasImage {
-           index: 0,
-           flip_x: false,
-           flip_y: false,
-       },
-      texture_atlas: atlas_handle,
+      texture_atlas: TextureAtlas {
+         layout: layout_handle,
+         index: 0
+      },
+      image: UiImage {
+           texture: texture_handle,
+           flip_x: false,
+           flip_y: false,
+       },
       ..default()
     });
}
```

- Queries (taken from the [sprite sheet example](https://bevy.org/examples/2D%20Rendering/sprite-sheet/))

```diff
fn animate_sprite(
    time: Res<Time>,
    mut query: Query<(
        &AnimationIndices,
        &mut AnimationTimer,
-       &mut TextureAtlasSprite)>,
+       &mut TextureAtlas)>,
) {
-   for (indices, mut timer, mut sprite) in &mut query {
+   for (indices, mut timer, mut atlas) in &mut query {
        timer.tick(time.delta());
        if timer.just_finished() {
-           sprite.index = if sprite.index == indices.last {
+           atlas.index = if atlas.index == indices.last {
                indices.first
            } else {
-               sprite.index + 1
+               atlas.index + 1
            };
        }
    }
}
```

### [Exposure settings (adopted)](https://github.com/bevyengine/bevy/pull/11347)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

- If using a `Skybox` or `EnvironmentMapLight`, use the new `brightness` and `intensity` controls to adjust their strength.
- All 3D scenes will now have different apparent brightnesses due to Bevy implementing proper exposure controls. You will have to adjust the intensity of your lights and/or your camera exposure via the new [`Exposure`] component to compensate.

[`Exposure`]: https://docs.rs/bevy/0.13.0/bevy/render/camera/struct.Exposure.html

### [Make `DynamicUniformBuffer::push` accept an `&T` instead of `T`](https://github.com/bevyengine/bevy/pull/11373)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

Users of `DynamicUniformBuffer::push` now need to pass references to `DynamicUniformBuffer::push` (e.g. existing `uniforms.push(value)` will now become `uniforms.push(&value)`)

### [Customizable camera main texture usage](https://github.com/bevyengine/bevy/pull/11412)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

Add `main_texture_usages: Default::default()` to your camera bundle.

### [optimize  batch_and_prepare_render_phase](https://github.com/bevyengine/bevy/pull/11323)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

The trait `GetBatchData` no longer hold associated type `Data` and `Filter`
`get_batch_data` `query_item` type from `Self::Data` to `Entity` and return `Option<(Self::BufferData, Option<Self::CompareData>)>`
`batch_and_prepare_render_phase`  should not have a query

### [Update to wgpu 0.19 and raw-window-handle 0.6](https://github.com/bevyengine/bevy/pull/11280)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

- `bevy_render::instance_index::get_instance_index()` has been removed as the webgl2 workaround is no longer required as it was fixed upstream in wgpu. The `BASE_INSTANCE_WORKAROUND` shaderdef has also been removed.
- WebGPU now requires the new `webgpu` feature to be enabled. The `webgpu` feature currently overrides the `webgl2` feature so you no longer need to disable all default features and re-add them all when targeting `webgpu`, but binaries built with both the `webgpu` and `webgl2` features will only target the webgpu backend, and will only work on browsers that support WebGPU.
  - Places where you conditionally compiled things for webgl2 need to be updated because of this change, eg:
    - `#[cfg(any(not(feature = "webgl"), not(target_arch = "wasm32")))]` becomes `#[cfg(any(not(feature = "webgl") ,not(target_arch = "wasm32"), feature = "webgpu"))]`
    - `#[cfg(all(feature = "webgl", target_arch = "wasm32"))]` becomes `#[cfg(all(feature = "webgl", target_arch = "wasm32", not(feature = "webgpu")))]`
    - `if cfg!(all(feature = "webgl", target_arch = "wasm32"))` becomes `if cfg!(all(feature = "webgl", target_arch = "wasm32", not(feature = "webgpu")))`

- `create_texture_with_data` now also takes a `TextureDataOrder`. You can probably just set this to `TextureDataOrder::default()`
- `TextureFormat`’s `block_size` has been renamed to `block_copy_size`
- See the `wgpu` changelog for anything I might’ve missed: <https://github.com/gfx-rs/wgpu/blob/trunk/CHANGELOG.md>
- `wgpu` now surfaces errors at instance creation time, which may have you run into this error (we’ve also seen it with nsight instead of EOSOverlay):

```rust
2024-01-27T02:11:58.491767Z ERROR wgpu_hal::vulkan::instance: GENERAL [Loader Message (0x0)]
        loader_get_json: Failed to open JSON file C:\Program Files (x86)\Epic Games\Launcher\Portal\Extras\Overlay\EOSOverlayVkLayer-Win32.json
2024-01-27T02:11:58.492046Z ERROR wgpu_hal::vulkan::instance:   objects: (type: INSTANCE, hndl: 0x1fbe55dc070, name: ?)
2024-01-27T02:11:58.492282Z ERROR wgpu_hal::vulkan::instance: GENERAL [Loader Message (0x0)]
        loader_get_json: Failed to open JSON file C:\Program Files (x86)\Epic Games\Launcher\Portal\Extras\Overlay\EOSOverlayVkLayer-Win64.json
2024-01-27T02:11:58.492525Z ERROR wgpu_hal::vulkan::instance:   objects: (type: INSTANCE, hndl: 0x1fbe55dc070, name: ?)
```

It just means that the program didn’t properly cleanup their registry keys on an update/uninstall, and vulkan uses those keys to load validation layers. The fix is to [backup your registry](https://support.microsoft.com/en-us/topic/how-to-back-up-and-restore-the-registry-in-windows-855140ad-e318-2a13-2829-d428a2ab0692#ID0EBD=Windows_11), then remove the offending keys in `"Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Khronos\Vulkan\ImplicitLayers"`.

### [RenderGraph Labelization](https://github.com/bevyengine/bevy/pull/10644)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

For Nodes and SubGraphs, instead of using hardcoded strings, you now pass labels, which can be derived with structs and enums.

```rs
// 0.12
#[derive(Default)]
struct MyRenderNode;
impl MyRenderNode {
    pub const NAME: &'static str = "my_render_node"
}

render_app
    .add_render_graph_node::<ViewNodeRunner<MyRenderNode>>(
        core_3d::graph::NAME,
        MyRenderNode::NAME,
    )
    .add_render_graph_edges(
        core_3d::graph::NAME,
        &[
            core_3d::graph::node::TONEMAPPING,
            MyRenderNode::NAME,
            core_3d::graph::node::END_MAIN_PASS_POST_PROCESSING,
        ],
    );

// 0.13
use bevy::core_pipeline::core_3d::graph::{Node3d, Core3d};

#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
pub struct MyRenderLabel;

#[derive(Default)]
struct MyRenderNode;

render_app
    .add_render_graph_node::<ViewNodeRunner<MyRenderNode>>(
        Core3d,
        MyRenderLabel,
    )
    .add_render_graph_edges(
        Core3d,
        (
            Node3d::Tonemapping,
            MyRenderLabel,
            Node3d::EndMainPassPostProcessing,
        ),
    );
```

If you still want to use dynamic labels, you can easily create those with tuple structs:

```rs
#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
pub struct MyDynamicLabel(&'static str);
```

#### SubGraphs

- `bevy_core_pipeline::core_2d::graph`: `NAME -> Core2d`
- `bevy_core_pipeline::core_3d::graph`:`NAME -> Core3d`
- `bevy_ui::render`: `draw_ui_graph::NAME -> graph::SubGraphUi`

#### Nodes

- `bevy_core_pipeline::core_2d::graph`:
  - `node::MSAA_WRITEBACK -> Node2d::MsaaWriteback` `node::MAIN_PASS ->Node2d::MainPass` `node::BLOOM -> Node2d::Bloom` `node::TONEMAPPING -> Node2d::Tonemapping` `node::FXAA -> Node2d::Fxaa` `node::UPSCALING -> Node2d::Upscaling` `node::CONTRAST_ADAPTIVE_SHARPENING -> Node2d::ContrastAdaptiveSharpening` `node::END_MAIN_PASS_POST_PROCESSING -> Node2d::EndMainPassPostProcessing`
- `bevy_core_pipeline::core_3d::graph`:
  - `node::MSAA_WRITEBACK -> Node3d::MsaaWriteback` `node::PREPASS -> Node3d::Prepass` `node::DEFERRED_PREPASS -> Node3d::DeferredPrepass` `node::COPY_DEFERRED_LIGHTING_ID -> Node3d::CopyDeferredLightingId` `node::END_PREPASSES -> Node3d::EndPrepasses` `node::START_MAIN_PASS -> Node3d::StartMainPass` `node::MAIN_OPAQUE_PASS -> Node3d::MainOpaquePass` `node::MAIN_TRANSMISSIVE_PASS -> Node3d::MainTransmissivePass` `node::MAIN_TRANSPARENT_PASS -> Node3d::MainTransparentPass` `node::END_MAIN_PASS -> Node3d::EndMainPass` `node::BLOOM -> Node3d::Bloom` `node::TONEMAPPING -> Node3d::Tonemapping` `node::FXAA -> Node3d::Fxaa` `node::UPSCALING -> Node3d::Upscaling` `node::CONTRAST_ADAPTIVE_SHARPENING -> Node3d::ContrastAdaptiveSharpening` `node::END_MAIN_PASS_POST_PROCESSING -> Node3d::EndMainPassPostProcessing`
- `bevy_core_pipeline`: `taa::draw_3d_graph::node::TAA -> Node3d::Taa`
- `bevy_pbr`: `draw_3d_graph::node::SHADOW_PASS -> NodePbr::ShadowPass` `ssao::draw_3d_graph::node::SCREEN_SPACE_AMBIENT_OCCLUSION -> NodePbr::ScreenSpaceAmbientOcclusion` `deferred::DEFERRED_LIGHTING_PASS -> NodePbr::DeferredLightingPass`
- `bevy_render`: `main_graph::node::CAMERA_DRIVER -> graph::CameraDriverLabel`
- `bevy_ui::render`: `draw_ui_graph::node::UI_PASS -> graph::Nodeui::UiPass`

### [Gate diffuse and specular transmission behind shader defs](https://github.com/bevyengine/bevy/pull/11627)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

If you were using `#ifdef STANDARDMATERIAL_NORMAL_MAP` on your shader code, make sure to update the name to `STANDARD_MATERIAL_NORMAL_MAP`; (with an underscore between `STANDARD` and `MATERIAL`)

### [Async pipeline compilation](https://github.com/bevyengine/bevy/pull/10812)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

Match on the new `Creating` variant for exhaustive matches of `CachedPipelineState`

### [Mesh insert indices](https://github.com/bevyengine/bevy/pull/11745)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

- Use `Mesh::insert_indices` or `Mesh::with_inserted_indices` instead of  `Mesh::set_indices` / `Mesh::with_indices`.
- If you have passed `None` to `Mesh::set_indices` or `Mesh::with_indices` you should use `Mesh::remove_indices` or `Mesh::with_removed_indices` instead.

### [wait for render app when main world is dropped](https://github.com/bevyengine/bevy/pull/11737)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

If you were using the pipelined rendering channels, `MainToRenderAppSender` and `RenderToMainAppReceiver`, they have been combined into the single resource `RenderAppChannels`.

### [Deprecate shapes in `bevy_render::mesh::shape`](https://github.com/bevyengine/bevy/pull/11773)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

Bevy has previously used rendering-specific types like `UVSphere` and `Quad` for primitive mesh shapes. These have now been deprecated to use the geometric primitives newly introduced in version 0.13.

- `bevy_render::mesh::Capsule` is deprecated use `bevy_math::primitives::dim3::Capsule3d` instead;
- `bevy_render::mesh::Cylinder` is deprecated use `bevy_math::primitives::dim3::Cylinder` instead;
- `bevy_render::mesh::Icosphere` is deprecated use `bevy_math::primitives::dim3::Sphere` instead;
- `bevy_render::mesh::Cube` is deprecated use `bevy_math::primitives::dim3::Cuboid` instead;
- `bevy_render::mesh::Box` is deprecated use `bevy_math::primitives::dim3::Cuboid` instead;
- `bevy_render::mesh::Quad` is deprecated use `bevy_math::primitives::dim2::Rectangle` instead;
- `bevy_render::mesh::Plane` is deprecated use `bevy_math::primitives::dim2::Plane2d` or `bevy_math::primitives::dim3::Plane3d` instead;
- `bevy_render::mesh::RegularPolygon` is deprecated use `bevy_math::primitives::dim2::RegularPolygon` instead;
- `bevy_render::mesh::Circle` is deprecated use `bevy_math::primitives::dim2::Circle` instead;
- `bevy_render::mesh::Torus` is deprecated use `bevy_math::primitives::dim3::Torus` instead;
- `bevy_render::mesh::UVSphere` is deprecated use `bevy_math::primitives::dim3::Sphere` instead;

Some examples:

```rust
let before = meshes.add(shape::Box::new(5.0, 0.15, 5.0));
let after = meshes.add(Cuboid::new(5.0, 0.15, 5.0));

let before = meshes.add(shape::Quad::default());
let after = meshes.add(Rectangle::default());

let before = meshes.add(shape::Plane::from_size(5.0));
// The surface normal can now also be specified when using `new`
let after = meshes.add(Plane3d::default().mesh().size(5.0, 5.0));

let before = meshes.add(
    Mesh::try_from(shape::Icosphere {
        radius: 0.5,
        subdivisions: 5,
    })
    .unwrap(),
);
let after = meshes.add(Sphere::new(0.5).mesh().ico(5).unwrap());
```

### [Multithreaded render command encoding](https://github.com/bevyengine/bevy/pull/9172)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

`RenderContext::new()` now takes adapter info

Some render graph and Node related types and methods now have additional lifetime constraints.

### [Stop extracting mesh entities to the render world.](https://github.com/bevyengine/bevy/pull/11803)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

  For efficiency reasons, some meshes in the render world may not have corresponding `Entity` IDs anymore. As a result, the `entity` parameter to `RenderCommand::render()` is now wrapped in an `Option`. Custom rendering code may need to be updated to handle the case in which no `Entity` exists for an object that is to be rendered.

### [New Exposure and Lighting Defaults (and calibrate examples)](https://github.com/bevyengine/bevy/pull/11868)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
</div>

The increased `Exposure::ev100` means that all existing 3D lighting will need to be adjusted to match (DirectionalLights, PointLights,  SpotLights, EnvironmentMapLights, etc). Or alternatively, you can adjust the `Exposure::ev100` on your cameras to work nicely with your current lighting values. If you are currently relying on default intensity values, you might need to change the intensity to achieve the same effect. Note that in Bevy 0.12, point/spot lights had a different hard coded ev100 value than directional lights. In Bevy 0.13, they use the same ev100, so if you have both in your scene, the _scale_ between these light types has changed and you will likely need to adjust one or both of them.

Many default lighting values were changed:

- `PointLight`'s default intensity is now `1_000_000.0`
- `SpotLight`'s default intensity is now `1_000_000.0`
- `DirectionalLight`'s default illuminance is now light_consts::lux::AMBIENT_DAYLIGHT (`10_000.`)
- `AmbientLight`'s default brightness is now `80.0`

### [Unload render assets from RAM](https://github.com/bevyengine/bevy/pull/10520)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
    <div class="migration-guide-area-tag">Assets</div>
</div>

Render assets can now be automatically unloaded from the main world after being prepared for rendering in the render world. This is controlled using `RenderAssetUsages` bitflags. To mimic old behavior and keep assets around in the main world, use `RenderAssetUsages::default()`.

- `Mesh` now requires a new `asset_usage` field. Set it to `RenderAssetUsages::default()` to mimic the previous behavior.
- `Image` now requires a new `asset_usage` field. Set it to `RenderAssetUsages::default()` to mimic the previous behavior.
- `MorphTargetImage::new()` now requires a new `asset_usage` parameter. Set it to `RenderAssetUsages::default()` to mimic the previous behavior.
- `DynamicTextureAtlasBuilder::add_texture()` now requires that the `TextureAtlas` you pass has an `Image` with `asset_usage: RenderAssetUsages::default()`. Ensure you construct the image properly for the texture atlas.
- The `RenderAsset` trait has significantly changed, and requires adapting your existing implementations.
  - The trait now requires `Clone`.
  - The `ExtractedAsset` associated type has been removed (the type itself is now extracted).
  - The signature of `prepare_asset()` is slightly different
  - A new `asset_usage()` method is now required (return `RenderAssetUsages::default()` to match the previous behavior).

- Match on the new `NoLongerUsed` variant for exhaustive matches of `AssetEvent`.

### [Split `Ray` into `Ray2d` and `Ray3d` and simplify plane construction](https://github.com/bevyengine/bevy/pull/10856)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
    <div class="migration-guide-area-tag">Math</div>
</div>

`Ray` has been renamed to `Ray3d`.

#### Ray creation

```rust
// 0.12
Ray {
    origin: Vec3::ZERO,
    direction: Vec3::new(0.5, 0.6, 0.2).normalize(),
}

// 0.13
// Option 1:
Ray3d {
    origin: Vec3::ZERO,
    direction: Direction3d::new(Vec3::new(0.5, 0.6, 0.2)).unwrap(),
}

// Option 2:
Ray3d::new(Vec3::ZERO, Vec3::new(0.5, 0.6, 0.2))
```

#### Plane intersections

```rust
// 0.12
let result = ray.intersect_plane(Vec2::X, Vec2::Y);

// 0.13
let result = ray.intersect_plane(Vec2::X, Plane2d::new(Vec2::Y));
```

### [Introduce AspectRatio struct](https://github.com/bevyengine/bevy/pull/10368)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
    <div class="migration-guide-area-tag">Math</div>
</div>

Anywhere where you are currently expecting a f32 when getting aspect ratios, you will now receive a `AspectRatio` struct. this still holds the same value.

### [Include UI node size in the vertex inputs for UiMaterial.](https://github.com/bevyengine/bevy/pull/11722)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
    <div class="migration-guide-area-tag">UI</div>
</div>

This change should be backwards compatible, using the new field is optional.

### [Optional ImageScaleMode](https://github.com/bevyengine/bevy/pull/11780)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Rendering</div>
    <div class="migration-guide-area-tag">UI</div>
</div>

<!-- TODO -->

### [Re-export `futures_lite` in `bevy_tasks`](https://github.com/bevyengine/bevy/pull/10670)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Tasks</div>
</div>

- Remove `futures_lite` from `Cargo.toml`.

```diff
[dependencies]
bevy = "0.12.0"
- futures-lite = "1.4.0"
```

- Replace `futures_lite` imports with `bevy::tasks::futures_lite`.

```diff
- use futures_lite::future::poll_once;
+ use bevy::tasks::futures_lite::future::poll_once;
```

### [Rename `TextAlignment` to `JustifyText`.](https://github.com/bevyengine/bevy/pull/10854)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Text</div>
</div>

- `TextAlignment` has been renamed to `JustifyText`
- `TextBundle::with_text_alignment` has been renamed to `TextBundle::with_text_justify`
- `Text::with_alignment` has been renamed to `Text::with_justify`
- The `text_alignment` field of `TextMeasureInfo` has been renamed to `justification`

### [Rename `Time::<Fixed>::overstep_percentage()` and `Time::<Fixed>::overstep_percentage_f64()`](https://github.com/bevyengine/bevy/pull/10448)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Time</div>
</div>

- `Time::<Fixed>::overstep_percentage()` has been renamed to `Time::<Fixed>::overstep_fraction()`
- `Time::<Fixed>::overstep_percentage_f64()` has been renamed to `Time::<Fixed>::overstep_fraction_f64()`

### [Rename `Timer::{percent,percent_left}` to `Timer::{fraction,fraction_remaining}`](https://github.com/bevyengine/bevy/pull/10442)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Time</div>
</div>

- `Timer::percent()` has been renamed to `Timer::fraction()`
- `Timer::percent_left()` has been renamed to `Timer::fraction_remaining()`

### [return Direction3d from Transform::up and friends](https://github.com/bevyengine/bevy/pull/11604)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Transform</div>
    <div class="migration-guide-area-tag">Math</div>
</div>

Callers of `Transform::up()` and similar functions may have to dereference the returned `Direction3d` to get to the inner `Vec3`.

### [Make clipped areas of UI nodes non-interactive](https://github.com/bevyengine/bevy/pull/10454)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">UI</div>
</div>

The clipped areas of UI nodes are no longer interactive.

`RelativeCursorPosition` is now calculated relative to the whole node’s position and size, not only the visible part. Its `mouse_over` method only returns true when the cursor is over an unclipped part of the node.

`RelativeCursorPosition` no longer implements `Deref` and `DerefMut`.

### [Create serialize feature for bevy_ui](https://github.com/bevyengine/bevy/pull/11188)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">UI</div>
</div>

If you want to use serialize and deserialize with types from bevy_ui, you need to use the feature serialize in your TOML

```toml
[dependencies.bevy]
features = ["serialize"]
```

### [Camera-driven UI](https://github.com/bevyengine/bevy/pull/10559)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">UI</div>
</div>

If the world contains more than one camera, insert `TargetCamera(Entity)` component to each UI root node, where `Entity` is the ID of the camera you want this specific UI tree to be rendered to. Test for any required adjustments of UI positioning and scaling.

```rust
// 0.12
commands.spawn(Camera3dBundle { ... });
commands.spawn(NodeBundle { ... });

// 0.13
let camera = commands.spawn(Camera3dBundle { ... }).id();
commands.spawn((TargetCamera(camera), NodeBundle { ... }));
```

Remove `UiCameraConfig` component from all cameras. If it was used to control UI visibility, insert `Visibility` component on UI root nodes instead.

### [Change `Window` scale factor to f32 (adopted)](https://github.com/bevyengine/bevy/pull/10897)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Windowing</div>
</div>

If manipulating scale_factor, some conversion from f64 to f32 may be necessary.

### [Update winit dependency to 0.29](https://github.com/bevyengine/bevy/pull/10702)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Windowing</div>
    <div class="migration-guide-area-tag">Input</div>
</div>

#### KeyCode changes

Several `KeyCode` variants have been renamed and now represent physical keys on the keyboard, replacing `ScanCode`.

Common examples of the updated variants are as follows:

- `KeyCode::W` -> `KeyCode::KeyW`
- `KeyCode::Up` -> `KeyCode::ArrowUp`
- `KeyCode::Key1` -> `KeyCode::Digit1`

See the relevant [documentation](https://docs.rs/bevy/0.13.0/bevy/input/keyboard/enum.KeyCode.html) for more information.

#### ReceivedCharacter changes

The `char` field of [`ReceivedCharacter`] is now a [`SmolStr`], and _could_ contain multiple characters. See these [winit docs] for details.

A simple workaround if you need a `char` is to call `.chars().last()`.

It's now possible to use [`KeyEvent::logical_key`]'s `Character` variant instead if you need consistent cross-platform behavior and/or a unified event stream with non-character events.

[winit docs]: https://docs.rs/winit/0.29.10/winit/event/struct.KeyEvent.html#structfield.text
[`SmolStr`]: https://docs.rs/smol_str/0.2.1/smol_str/struct.SmolStr.html
[`ReceivedCharacter`]: https://docs.rs/bevy/latest/bevy/prelude/struct.ReceivedCharacter.html
[`KeyEvent::logical_key`]: https://docs.rs/bevy/latest/bevy/input/keyboard/struct.KeyboardInput.html#structfield.logical_key

### [Remove CanvasParentResizePlugin](https://github.com/bevyengine/bevy/pull/11057)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Windowing</div>
</div>

Remove uses of `Window::fit_canvas_to_parent` in favor of CSS properties, for example:

```css
canvas {
  width: 100% !important;
  height: 100% !important;
}
```

### [Cleanup bevy winit](https://github.com/bevyengine/bevy/pull/11489)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Windowing</div>
</div>

`bevy::window::WindowMoved`’s `entity` field has been renamed to `window`. This is to be more consistent with other windowing events.

Consider changing usage:

```diff
-window_moved.entity
+window_moved.window
```

### [Add `name` to `bevy::window::Window`](https://github.com/bevyengine/bevy/pull/7650)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">Windowing</div>
</div>

`Window` has a new [`name`](https://docs.rs/bevy/latest/bevy/prelude/struct.Window.html#structfield.name) field for specifying the "window class name." If you don't need this, set it to `None`.

### [delete methods deprecated in 0.12](https://github.com/bevyengine/bevy/pull/10693)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">No area label</div>
</div>

Many methods that were tagged as deprecated in 0.12 have now been removed. You should consider fixing the deprecation warnings before migrating to 0.13.

### [Renamed Accessibility plugin to AccessKitPlugin in bevy_winit](https://github.com/bevyengine/bevy/pull/10914)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">No area label</div>
</div>

`bevy_winit::AccessibilityPlugin` has been renamed to `AccessKitPlugin`.

### [Use TypeIdMap whenever possible](https://github.com/bevyengine/bevy/pull/11684)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">No area label</div>
</div>

- `TypeIdMap` now lives in `bevy_utils`
- `DrawFunctionsInternal::indices` now uses a `TypeIdMap`.

### [bevy_render: use the non-send marker from bevy_core](https://github.com/bevyengine/bevy/pull/11725)

<div class="migration-guide-area-tags">
    <div class="migration-guide-area-tag">No area label</div>
</div>

If you were using `bevy::render::view::NonSendMarker` or `bevy::render::view::window::NonSendMarker`, use `bevy::core::NonSendMarker` instead

</div>


--- END FILE `content/learn/migration-guides/0.12-to-0.13.md` ---


--- BEGIN FILE `content/learn/migration-guides/0.13-to-0.14.md` ---


+++
title = "0.13 to 0.14"
insert_anchor_links = "right"
[extra]
weight = 9
long_title = "Migration Guide: 0.13 to 0.14"
+++

{{ migration_guides(version="0.14") }}


--- END FILE `content/learn/migration-guides/0.13-to-0.14.md` ---


--- BEGIN FILE `content/learn/migration-guides/0.14-to-0.15.md` ---


+++
title = "0.14 to 0.15"
insert_anchor_links = "right"
[extra]
weight = 10
long_title = "Migration Guide: 0.14 to 0.15"
+++

{{ migration_guides(version="0.15") }}


--- END FILE `content/learn/migration-guides/0.14-to-0.15.md` ---


--- BEGIN FILE `content/learn/migration-guides/0.15-to-0.16.md` ---


+++
title = "0.15 to 0.16"
insert_anchor_links = "right"
[extra]
weight = 11
long_title = "Migration Guide: 0.15 to 0.16"
+++

The most important changes to be aware of this release are:

- Bevy has reworked its error handling to make it easier to handle `Result`s everywhere. As a result, `Query::single` and friends now return results, rather than panicking.
- Bevy's ECS now has built-in one-to-many entity relationships. The existing parent-child hierarchy system has been modified to use these relationships, causing minor breaking changes in entity despawning behavior and how children are added / replaced for a parent entity.
- The `bevy` crate now supports `no_std` platforms. As part of this, many items (like `HashMap`) from `bevy_utils` have been moved into `bevy_platform`. If you are the author of an ecosystem crate, you may want to offer `no_std` support to your users as well: it's generally straightforward unless you're interfacing directly with the underlying operating system.

{{ migration_guides(version="0.16") }}


--- END FILE `content/learn/migration-guides/0.15-to-0.16.md` ---


--- BEGIN FILE `content/news/2024-02-17-bevy-0.13/index.md` ---


+++
title = "Bevy 0.13"
date = 2024-02-17
authors = ["Bevy Contributors"]
[extra]
image = "jarl.webp"
show_image = true
image_subtitle = "Gameplay from Jarl, an in-production fantasy colony builder made with Bevy"
image_subtitle_link = "https://www.jarl-game.com/"

+++

Thanks to **198** contributors, **672** pull requests, community reviewers, and our [**generous sponsors**](/community/donate), we're happy to announce the **Bevy 0.13** release on [crates.io](https://crates.io/crates/bevy)!

For those who don't know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out our [Quick Start Guide](/learn/quick-start) to try it today. It's free and open source forever! You can grab the full [source code](https://github.com/bevyengine/bevy) on GitHub. Check out [Bevy Assets](https://bevy.org/assets) for a collection of community-developed plugins, games, and learning resources.
And to see what the engine has to offer hands-on, check out the entries in the [latest Bevy Jam](https://itch.io/jam/bevy-jam-4/entries), including the winner [That's a LOT of beeeeees](https://andrewb330.itch.io/thats-a-lot-of-beeeeees).

To update an existing Bevy App or Plugin to **Bevy 0.13**, check out our [0.12 to 0.13 Migration Guide](/learn/migration-guides/0-12-to-0-13/).

Since our last release a few months ago we've added a _ton_ of new features, bug fixes, and quality of life tweaks, but here are some of the highlights:

<!-- more -->

* **Lightmaps:** A fast, popular baked global illumination technique for static geometry (baked externally in programs like The Lightmapper).
* **Irradiance Volumes / Voxel Global Illumination:** A baked form of global illumination that samples light at the centers of voxels within a cuboid (baked externally in programs like Blender).
* **Approximate Indirect Specular Occlusion**: Improved lighting realism by reducing specular light leaking via specular occlusion.
* **Reflection Probes**: A baked form of axis aligned environment map that allows for realistic reflections for static geometry (baked externally in programs like Blender)
* **Primitive shapes:** Basic shapes are a core building block of both game engines and video games: we've added a polished, ready-to-use collection of them!
* **System stepping:** Completely pause and advance through your game frame-by-frame or system-by-system to interactively debug game logic, all while rendering continues to update.
* **Dynamic queries:** Refining queries from within systems is extremely expressive, and is the last big puzzle piece for runtime-defined types and third-party modding and scripting integration.
* **Automatically inferred command flush points:** Tired of reasoning about where to put `apply_deferred` and confused about why your commands weren't being applied? Us too! Now, Bevy's scheduler uses ordinary `.before` and `.after` constraints and inspects the system parameters to automatically infer (and deduplicate) synchronization points.
* **Slicing, tiling and nine-patch 2D images:** Ninepatch layout is a popular tool for smoothly scaling stylized tilesets and UIs. Now in Bevy!
* **Camera-Driven UI**: UI entity trees can now be selectively added to _any_ camera, rather than being globally applied to all cameras, enabling things like split screen UIs!
* **Camera Exposure**: Realistic / "real world" control over camera exposure via EV100, f-stops, shutter speed, and ISO sensitivity. Lights have also been adjusted to make their units more realistic.
* **Animation interpolation modes:** Bevy now supports non-linear interpolation modes in exported glTF animations.

## Initial Baked Lighting

Computing lighting in real time is expensive;
but for elements of a scene that never move (like rooms or terrain),
we can get prettier lighting and shadows for cheaper by computing it ahead of time using **global illumination**,
then storing the results in a "baked" form that never changes.
Global illumination is a more realistic (and expensive) approach to lighting that often uses ray tracing.
Unlike Bevy's default rendering, it takes light bouncing off of other objects into account,
producing more realistic effects through the inclusion of indirect light.

### Lightmaps

<div class="release-feature-authors">authors: @pcwalton</div>

![lightmaps](lightmap.jpg)

**Lightmaps** are textures that store pre-computed global illumination results. They have been a mainstay of real-time graphics for decades. **Bevy 0.13** adds initial support for rendering lightmaps computed in other programs, such as [The Lightmapper]. Ultimately we would like to add support for baking lightmaps directly in Bevy, but this first step unlocks lightmap workflows!

Like the [lightmaps example] shows, just load in your baked lightmap image, and then insert a [`Lightmap`] component on the corresponding mesh.

[`Lightmap`]: https://docs.rs/bevy/0.13.0/bevy/pbr/struct.Lightmap.html
[lightmaps example]: https://github.com/bevyengine/bevy/blob/main/examples/3d/lightmaps.rs
[The Lightmapper]: https://github.com/Naxela/The_Lightmapper

### Irradiance Volumes / Voxel Global Illumination

<div class="release-feature-authors">authors: @pcwalton</div>

![irradiance volume](irradiance_volume.jpg)

**Irradiance volumes** (or voxel global illumination) is a technique used for approximating indirect light by first dividing
a scene into cubes (voxels), then sampling the amount of light present at the center of each of those voxels.
This light is then added to objects within that space as they move through it, changing the ambient light level on those objects appropriately.

We've chosen to use the ambient cubes algorithm for this, based on Half Life 2.
This allows us to match Blender's [Eevee renderer], giving users a simple and free path to creating nice-looking irradiance volumes for their own scenes.

Notice how this sphere subtly picks up the colors of the environment as it moves around, thanks to irradiance volumes:

<video controls><source src="irradiance_volume.mp4" type="video/mp4"/></video>

For now, you need to use external tools such as Blender to bake irradiance volumes, but in the future we would like to support baking irradiance volumes directly in Bevy!

[Eevee renderer]: https://docs.blender.org/manual/en/latest/render/eevee/index.html

## Minimal Reflection Probes

<div class="release-feature-authors">authors: @pcwalton</div>

**Environment maps** are 2D textures used to simulate lighting, reflection, and skyboxes in a 3D scene.
**Reflection probes** generalize environment maps to allow for multiple environment maps in the same scene, each of which has its own axis-aligned bounding box.
This is a standard feature of physically-based renderers and was inspired by the [corresponding feature in Blender's Eevee renderer].

In the [reflection probes PR], we've added basic support for these, laying the groundwork for pretty, high-performance reflections in Bevy games.
Like with the baked global illumination work discussed above, these must currently be precomputed externally, then imported into Bevy.
As discussed in the PR, there are quite a few caveats: WebGL2 support is effectively non-existent, sharp and sudden transitions will be observed because there's no blending,
and all cubemaps in the world of a given type (diffuse or specular) must have the same size, format, and mipmap count.

![reflection probes](reflection_probes.jpg)

[reflection probes PR]: https://github.com/bevyengine/bevy/pull/11366
[corresponding feature in Blender's Eevee renderer]: https://docs.blender.org/manual/en/latest/render/eevee/light_probes/reflection_cubemaps.html

## Approximate Indirect Specular Occlusion

<div class="release-feature-authors">authors: @aevyrie</div>

Bevy's current PBR renderer over-brightens the image, especially at grazing angles where the fresnel
effect tends to make surfaces behave like mirrors. This over-brightening happens because the
surfaces must reflect _something_, but without path traced or screen-space reflections, the renderer
has to guess _what_ is being reflected. The best guess it can make is to sample the environment cube
map, even if light would've hit something else before reaching the environment light. This artifact,
where light occlusion is ignored, is called specular light leaking.

Consider a car tire; though the rubber might be shiny, you wouldn't expect it to have bright
specular highlights inside a wheel well, because the car itself is blocking (occluding) the light
that would otherwise cause these reflections. Fully checking for occlusion can be computationally
expensive.

**Bevy 0.13** adds support for **Approximate Indirect Specular Occlusion**, which uses our existing [Screen Space Ambient Occlusion](/news/bevy-0-11/#screen-space-ambient-occlusion) to _approximate_ specular occlusion, which can run efficiently in real time while still producing reasonably high quality results:

{{ compare_slider(
    left_title="Specular Occlusion On",
    left_image="specular_occlusion_on.jpg",
    right_title="Specular Occlusion Off",
    right_image="specular_occlusion_off.jpg"
) }}

<div style="font-size: 1.0rem" class="release-feature-authors">Model Credits: <a href="https://sketchfab.com/3d-models/bmw-r1200gs-motorcycle-6550451b0ae547039585a44286b2f530">BMW R1200GS Motorcycle</a> by Moto3D is licensed under <a href="http://creativecommons.org/licenses/by/4.0/">CC-BY-4.0</a>.
</div>

In the future, this could be further improved with screen space reflections (SSR).
However, conventional wisdom is that you should use specular occlusion alongside SSR, because SSR still suffers from light leaking artifacts.

## Primitive Shapes

<div class="release-feature-authors">authors: @Jondolf, @NiseVoid, @aevyrie</div>

Geometric shapes are used all across game development, from primitive mesh shapes and debug gizmos to physics colliders and raycasting. Despite being so commonly used across several domains, Bevy hasn't really had any general-purpose shape representations.

This is changing in **Bevy 0.13** with the introduction of first-party **primitive shapes**! They are lightweight geometric primitives designed for maximal interoperability and reusability, allowing Bevy and third-party plugins to use the same set of basic shapes and increase cohesion within the ecosystem. See the original [RFC][Primitive RFC] for more details.

The built-in [collection of primitives] is already quite sizeable:

| 2D                                  | 3D                                  |
| ----------------------------------- | ----------------------------------- |
| [`Rectangle`]                       | [`Cuboid`]                          |
| [`Circle`]                          | [`Sphere`]                          |
| [`Ellipse`]                         |                                     |
| [`Triangle2d`]                      |                                     |
| [`Plane2d`]                         | [`Plane3d`]                         |
| [`Line2d`]                          | [`Line3d`]                          |
| [`Segment2d`]                       | [`Segment3d`]                       |
| [`Polyline2d`], [`BoxedPolyline2d`] | [`Polyline3d`], [`BoxedPolyline3d`] |
| [`Polygon`], [`BoxedPolygon`]       |                                     |
| [`RegularPolygon`]                  |                                     |
| [`Capsule2d`]                       | [`Capsule3d`]                       |
|                                     | [`Cylinder`]                        |
|                                     | [`Cone`]                            |
|                                     | [`ConicalFrustum`]                  |
|                                     | [`Torus`]                           |

[More primitives] will be added in future releases.

Some use cases for primitive shapes include meshing, gizmos, bounding volumes, colliders, and ray casting functionality. Several of these have landed in 0.13 already!

[Primitive RFC]: https://github.com/bevyengine/rfcs/blob/main/rfcs/12-primitive-shapes.md
[collection of primitives]: https://docs.rs/bevy/0.13.0/bevy/math/primitives/index.html
[`Rectangle`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Rectangle.html
[`Cuboid`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Cuboid.html
[`Circle`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Circle.html
[`Sphere`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Sphere.html
[`Ellipse`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Ellipse.html
[`Triangle2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Triangle2d.html
[`Plane2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Plane2d.html
[`Plane3d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Plane3d.html
[`Line2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Line2d.html
[`Line3d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Line3d.html
[`Segment2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Segment2d.html
[`Segment3d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Segment3d.html
[`Polyline2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Polyline2d.html
[`Polyline3d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Polyline3d.html
[`BoxedPolyline2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.BoxedPolyline2d.html
[`BoxedPolyline3d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.BoxedPolyline3d.html
[`Polygon`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Polygon.html
[`BoxedPolygon`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.BoxedPolygon.html
[`RegularPolygon`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.RegularPolygon.html
[`Capsule2d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Capsule2d.html
[`Capsule3d`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Capsule3d.html
[`Cylinder`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Cylinder.html
[`Cone`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Cone.html
[`ConicalFrustum`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.ConicalFrustum.html
[`Torus`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Torus.html
[More primitives]: https://github.com/bevyengine/bevy/issues/10572

### Rendering

Primitive shapes can be rendered using both meshes and gizmos. In this section, we'll take a closer look at the new APIs.

Below, you can see a cuboid and a torus rendered using meshes and gizmos. You can check out all primitives that can be rendered in the new [Rendering Primitives] example.

![On the left: A cuboid rendered with gizmos. It consists of 12 white lines. On the right: A cuboid rendered with meshes. It consists of 6 white faces.](cuboids.png)

![On the left: A torus rendered with gizmos. It consists of many small rings, all connected by 4 big rings. On the right: A torus rendered with meshes. A shape that looks like a donut.](tori.png)

[Rendering Primitives]: https://bevy.org/examples/Math/render-primitives

#### Meshing

<div class="release-feature-authors">authors: @Jondolf</div>

Previous versions of Bevy have had types like [`Quad`], [`Box`], and [`UVSphere`] for creating meshes from basic shapes. These have been deprecated in favor of a builder-like API using the new geometric primitives.

Primitives that support meshing implement the [`Meshable`] trait. For some shapes, the [`mesh`][`mesh` method] method returns a [`Mesh`] directly:

```rust
let before = Mesh::from(Quad::new(Vec2::new(2.0, 1.0)));
let after = Rectangle::new(2.0, 1.0).mesh(); // Mesh::from also works
```

For most primitives however, it returns a builder for optional configuration:

```rust
// Create a circle mesh with a specified vertex count
let before = Mesh::from(Circle {
    radius: 1.0,
    vertices: 64,
});
let after = Circle::new(1.0).mesh().resolution(64).build();
```

Below are a few more examples of meshing with the new primitives.

```rust
// Icosphere
let before = meshes.add(
    Mesh::try_from(Icosphere {
        radius: 2.0,
        subdivisions: 8,
    })
    .unwrap()
);
let after = meshes.add(Sphere::new(2.0).mesh().ico(8).unwrap());

// Cuboid
// (notice how Assets::add now also handles mesh conversion automatically)
let before = meshes.add(Mesh::from(shape::Box::new(2.0, 1.0, 1.0)));
let after = meshes.add(Cuboid::new(2.0, 1.0, 1.0));

// Plane
let before = meshes.add(Mesh::from(Plane::from_size(5.0)));
let after = meshes.add(Plane3d::default().mesh().size(5.0, 5.0));
```

With the addition of the primitives, meshing is also supported for more shapes, like [`Ellipse`], [`Triangle2d`], and [`Capsule2d`]. However, note that meshing is not yet implemented for all primitives, such as [`Polygon`] and [`Cone`].

Below you can see some meshes in the [`2d_shapes`] and [`3d_shapes`] examples.

![An example with 2D mesh shapes](2d_shapes.png)

![An example with 3D mesh shapes](3d_shapes.png)

Some default values for mesh shape dimensions have also been changed to be more consistent.

[`Quad`]: https://docs.rs/bevy/0.13.0/bevy/prelude/shape/struct.Quad.html
[`Box`]: https://docs.rs/bevy/0.13.0/bevy/prelude/shape/struct.Box.html
[`UVSphere`]: https://docs.rs/bevy/0.13.0/bevy/prelude/shape/struct.UVSphere.html
[`Meshable`]: https://docs.rs/bevy/0.13.0/bevy/prelude/trait.Meshable.html
[`mesh` method]: https://docs.rs/bevy/0.13.0/bevy/prelude/trait.Meshable.html#tymethod.mesh
[`Mesh`]: https://docs.rs/bevy/0.13.0/bevy/prelude/struct.Mesh.html
[`2d_shapes`]: https://bevy.org/examples/2D%20Rendering/2d-shapes/
[`3d_shapes`]: https://bevy.org/examples/3D%20Rendering/3d-shapes/

#### Gizmos

<div class="release-feature-authors">authors: @RobWalt</div>

Primitives can also be rendered with [`Gizmos`]. There are two new generic methods:

* [`gizmos.primitive_2d(primitive, position, angle, color)`][`primitive_2d`]
* [`gizmos.primitive_3d(primitive, position, rotation, color)`][`primitive_3d`]

Some primitives can have additional configuration options similar to existing [`Gizmos`] drawing methods.
For example, calling [`primitive_3d`] with a [`Sphere`] returns a [`SphereBuilder`], which offers a `segments` method
to control the level of detail of the sphere.

```rust
let sphere = Sphere { radius };
gizmos
    .primitive_3d(sphere, center, rotation, color)
    .segments(segments);
```

[`Gizmos`]: https://docs.rs/bevy/0.13.0/bevy/gizmos/prelude/struct.Gizmos.html
[`primitive_2d`]: https://docs.rs/bevy/0.13.0/bevy/gizmos/prelude/trait.GizmoPrimitive2d.html
[`primitive_3d`]: https://docs.rs/bevy/0.13.0/bevy/gizmos/prelude/trait.GizmoPrimitive2d.html
[`SphereBuilder`]: https://docs.rs/bevy/0.13.0/bevy/gizmos/primitives/dim3/struct.SphereBuilder.html

### Bounding Volumes

<div class="release-feature-authors">authors: @NiseVoid, @Jondolf</div>

In game development, spatial checks have several valuable use cases, such as getting all entities that are in the camera's view frustum or near the player, or finding pairs of physics objects that might be intersecting. To speed up such checks, bounding volumes are used to approximate more complex shapes.

**Bevy 0.13** adds some new publicly available bounding volumes: [`Aabb2d`], [`Aabb3d`], [`BoundingCircle`], and [`BoundingSphere`]. These can be created manually, or generated from primitive shapes.

Each bounding volume implements the [`BoundingVolume`] trait, providing some general functionality and helpers. The [`IntersectsVolume`] trait can be used to test for intersections with these volumes. This trait is implemented for bounding volumes themselves, so you can test for intersections between them. This is supported between all existing bounding volume types, but only those in the same dimension.

Here is an example of how bounding volumes are constructed, and how an intersection test is performed:

```rust
// We create an axis-aligned bounding box that is centered at position
let position = Vec2::new(100., 50.);
let half_size = Vec2::splat(20.);
let aabb = Aabb2d::new(position, half_size);

// We create a bounding circle that is centered at position
let position = Vec2::new(80., 70.);
let radius = 30.;
let bounding_circle = BoundingCircle::new(position, radius);

// We check if the volumes are intersecting
let intersects = bounding_circle.intersects(&aabb);
```

There are also two traits for the generation of bounding volumes: [`Bounded2d`] and [`Bounded3d`]. These are implemented for the new primitive shapes, so you can easily compute bounding volumes for them:

```rust
// We create a primitive, a hexagon in this case
let hexagon = RegularPolygon::new(50., 6);

let translation = Vec2::new(50., 200.);
let rotation = PI / 2.; // Rotation in radians

// Now we can get an Aabb2d or BoundingCircle from this primitive.
// These methods are part of the Bounded2d trait.
let aabb = hexagon.aabb_2d(translation, rotation);
let circle = hexagon.bounding_circle(translation, rotation);
```

[`Aabb2d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.Aabb2d.html
[`Aabb3d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.Aabb3d.html
[`BoundingCircle`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.BoundingCircle.html
[`BoundingSphere`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.BoundingSphere.html
[`BoundingVolume`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/trait.BoundingVolume.html
[`IntersectsVolume`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/trait.IntersectsVolume.html
[`Bounded2d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/trait.Bounded2d.html
[`Bounded3d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/trait.Bounded3d.html

#### Ray Casting and Volume Casting

The bounding volumes also support basic ray casting and volume casting. Ray casting tests if a bounding volume intersects with a given ray, cast from an origin in a direction, until a maximum distance. Volume casts work similarly, but function as if moving a volume along the ray.

This functionality is provided through the new [`RayCast2d`], [`RayCast3d`], [`AabbCast2d`], [`AabbCast3d`], [`BoundingCircleCast`], and [`BoundingSphereCast`] types. They can be used to check for intersections against bounding volumes, and to compute the distance from the origin of the cast to the point of intersection.

Below, you can see ray casting, volume casting, and intersection tests in action:

<video controls><source src="bounding_intersections.mp4" type="video/mp4"/></video>

To make it easier to reason about ray casts in different dimensions, the old [`Ray`] type has also been split into [`Ray2d`] and [`Ray3d`]. The new [`Direction2d`] and [`Direction3d`] types are used to ensure that the ray direction remains normalized, providing a type-level guarantee that the vector is always unit-length. These are already in use in some other APIs as well, such as for some primitives and gizmo methods.

[`RayCast2d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.RayCast2d.html
[`RayCast3d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.RayCast3d.html
[`AabbCast2d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.AabbCast2d.html
[`AabbCast3d`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.AabbCast3d.html
[`BoundingCircleCast`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.BoundingCircleCast.html
[`BoundingSphereCast`]: https://docs.rs/bevy/0.13.0/bevy/math/bounding/struct.BoundingSphereCast.html
[`Ray`]: https://docs.rs/bevy/0.12.1/bevy/math/struct.Ray.html
[`Ray2d`]: https://docs.rs/bevy/0.13.0/bevy/math/struct.Ray2d.html
[`Ray3d`]: https://docs.rs/bevy/0.13.0/bevy/math/struct.Ray3d.html
[`Direction2d`]: https://docs.rs/bevy/0.13.0/bevy/math/primitives/struct.Direction2d.html
[`Direction3d`]: https://docs.rs/bevy/0.13.0/bevy/math/primitives/struct.Direction3d.html

## System Stepping

<div class="release-feature-authors">authors: @dmlary</div>

**Bevy 0.13** adds support for **System Stepping**, which adds debugger-style
execution control for systems.

The [`Stepping`] resource controls which
systems within a schedule execute each frame, and provides step, break, and
continue functionality to enable live debugging.

```rust
let mut stepping = Stepping::new();
```

You add the schedules you want to step through to the [`Stepping`] resource. The systems in these schedules can be thought of as the "stepping frame". Systems in the "stepping frame" won't run unless a relevant step or continue action occurs. Schedules that are not added will run on every update, even while stepping. This enables core functionality like rendering to continue working.

```rust
stepping.add_schedule(Update);
stepping.add_schedule(FixedUpdate);
```

Stepping is disabled by default, even when the resource is inserted. To enable it in apps, feature flags, dev consoles and obscure hotkeys all work great.

```rust
#[cfg(feature = "my_stepping_flag")]
stepping.enable();
```

Finally, you add the [`Stepping`] resource to the ECS [`World`].

```rust
app.insert_resource(stepping);
```

[`World`]: https://docs.rs/bevy/0.13.0/bevy/ecs/world/struct.World.html

### System Step & Continue Frame

The "step frame" action runs the system at the stepping
cursor, and advances the cursor during the next render frame.
This is useful to see individual changes made by
systems, and see the state of the world prior to executing a system

```rust
stepping.step_frame()
```

The "continue frame" action will execute systems starting
from the stepping cursor to the end of the stepping frame during the next frame.
It may stop before the end of the stepping frame if it encounters a system with
a breakpoint. This is useful for advancing quickly through an entire frame,
getting to the start of the next frame, or in combination with breakpoints.

```rust
stepping.continue_frame()
```

This video demonstrates these actions on the breakout
example with a custom `egui` interface.  The stepping cursor can be seen moving through
the systems list as we click the `step` button.  When the `continue` button is
clicked, you can see the game progress one stepping frame for each click.

<video controls><source src="stepping-step-continue.mp4" type="video/mp4"/></video>

### Breakpoints

When a schedule grows to a certain point, it can take a long time to step
through every system in the schedule just to see the effects of a few systems.
In this case, stepping provides system breakpoints.

This video illustrates how a breakpoint on `check_for_collisions()` behaves with "step" and "continue" actions:

<video controls><source src="stepping-breakpoint.mp4" type="video/mp4"/></video>

### Disabling Systems During Stepping

During debugging, it can be helpful to disable systems to narrow down the
source of the problem. `Stepping::never_run()` and `Stepping::never_run_node()`
can be used to disable systems while stepping is enabled.

### Excluding Systems from Stepping

It may be necessary to ensure some systems still run while stepping is enabled.
While best-practice is to have them in a schedule that has not been added to
the `Stepping` resource, it is possible to configure systems to always run
while stepping is enabled. This is primarily useful for event & input handling
systems.

Systems can be configured to always run by calling
`Stepping::always_run()`, or `Stepping::always_run_node()`.
When a system is configured to always run, it will run each rendering frame
even when stepping is enabled.

### Limitations

There are some limitations in this initial implementation of stepping:

* **Systems that reads events likely will not step properly**: Because frames still advance normally while stepping is enabled, events can be cleared before a stepped system can read them. The best approach here is to configure event-based systems to always run, or put them in a schedule not added to `Stepping`. "Continue" with breakpoints may also work in this scenario.
* **Conditional systems may not run as expected when stepping**: Similar to event-based systems, if the run condition is true for only a short time, system may not run when stepped.

### Detailed Examples

* [Text-based stepping example](https://github.com/bevyengine/bevy/blob/main/examples/ecs/system_stepping.rs)
* Non-interactive [bevy UI example stepping plugin](https://github.com/bevyengine/bevy/blob/main/examples/games/stepping.rs) used in the breakout example
* Interactive [egui stepping plugin](https://gist.github.com/dmlary/3fd57ebf1f88bb9afa8a6604737dac97) used in demo videos

[`Stepping`]: https://docs.rs/bevy/0.13.0/bevy/ecs/schedule/stepping/Stepping.html

## Camera Exposure

<div class="release-feature-authors">authors: @superdump (Rob Swain), @JMS55, @cart</div>

In the real world, the brightness of an image captured by a camera is determined by its exposure: the amount of light that the camera's sensor or film incorporates. This is controlled by several mechanics of the camera:

* **Aperture**: Measured in F-Stops, the aperture opens and closes to control how much light is allowed into the camera's sensor or film by physically blocking off lights from specific angles, similar to the pupil of an eye.
* **Shutter Speed**: How long the camera's shutter is open, which is the duration of time that the camera's sensor or film is exposed to light.
* **ISO Sensitivity**: How sensitive the camera's sensor or film is to light. A higher value indicates a higher sensitivity to light.

Each of these plays a role in how much light the final image receives. They can be combined into a final EV number (exposure value), such as the semi-standard EV100 (the exposure value for ISO 100). Higher EV100 numbers mean that more light is required to get the same result. For example, a sunny day scene might require an EV100 of about 15, whereas a dimly lit indoor scene might require an EV100 of about 7.

In **Bevy 0.13**, you can now configure the EV100 on a per-camera basis using the new [`Exposure`] component. You can set it directly using the [`Exposure::ev100`] field, or you can use the new [`PhysicalCameraParameters`] struct to calculate an ev100 using "real world" camera settings like f-stops, shutter speed, and ISO sensitivity.

This is important because Bevy's "physically based" renderer (PBR) is intentionally grounded in reality. Our goal is for people to be able to use real-world units in their lights and materials and have them behave as close to reality as possible.

{{ compare_slider(
    left_title="EV100 9.7",
    left_image="exposure_97.jpg",
    right_title="EV100 15",
    right_image="exposure_15.jpg"
) }}

Note that prior versions of Bevy hard-coded a static EV100 for some of its light types. In **Bevy 0.13** it is configurable _and_ consistent across all light types. We have also bumped the default EV100 to 9.7, which is a [number we chose to best match Blender's default exposure](https://github.com/bevyengine/bevy/issues/11577#issuecomment-1942873507). It also happens to be a nice "middle ground" value that sits somewhere between indoor lighting and overcast outdoor lighting.

You may notice that point lights now require _significantly_ higher intensity values (in lumens). This (sometimes) million-lumen values might feel exorbitant. Just reassure yourself that (1) it actually requires a lot of light to meaningfully register in an overcast outdoor environment and (2) Blender exports lights on these scales (and we are calibrated to be as close as possible to them).

[`PhysicalCameraParameters`]: https://docs.rs/bevy/0.13.0/bevy/render/camera/struct.PhysicalCameraParameters.html
[`Exposure`]: https://docs.rs/bevy/0.13.0/bevy/render/camera/struct.Exposure.html
[`Exposure::ev100`]: https://docs.rs/bevy/0.13.0/bevy/render/camera/struct.Exposure.html#structfield.ev100

## Camera-Driven UI

<div class="release-feature-authors">authors: @bardt, @oceantume</div>

Historically, Bevy's UI elements have been scaled and positioned in the context of the primary window, regardless of the camera settings. This approach made some UI experiences like split-screen multiplayer difficult to implement, and others such as having UI in multiple windows impossible.

**Bevy 0.13** introduces **Camera-Driven UI**. Each camera can now have its own UI root, rendering according to its viewport, scale factor, and a target which can be a secondary window or even a texture.

This change unlocks a variety of new UI experiences, including split-screen multiplayer, UI in multiple windows, displaying non-interactive UI in a 3D world, and more.

![Split-screen with independent UI roots](split-screen.png)

If there is one camera in the world, you don't need to do anything; your UI will be displayed in that camera's viewport.

```rust
commands.spawn(Camera3dBundle {
    // Camera can have custom viewport, target, etc.
});
commands.spawn(NodeBundle {
    // UI will be rendered to the singular camera's viewport
});
```

When more control is desirable, or there are multiple cameras, we introduce the [`TargetCamera`] component. This component can be added to a root UI node to specify which camera it should be rendered to.

```rust
// For split-screen multiplayer, we set up 2 cameras and 2 UI roots
let left_camera = commands.spawn(Camera3dBundle {
    // Viewport is set to left half of the screen
}).id();

commands
    .spawn((
        TargetCamera(left_camera),
        NodeBundle {
            //...
        }
    ));

let right_camera = commands.spawn(Camera3dBundle {
    // Viewport is set to right half of the screen
}).id();

commands
    .spawn((
        TargetCamera(right_camera),
        NodeBundle {
            //...
        })
    );
```

With this change, we also removed the [`UiCameraConfig`] component. If you were using it to hide UI nodes, you can achieve the same outcome by configuring a [`Visibility`] component on the root node.

```rust
commands.spawn(Camera3dBundle::default());
commands.spawn(NodeBundle {
    visibility: Visibility::Hidden, // UI will be hidden
    // ...
});
```

[`TargetCamera`]: https://docs.rs/bevy/0.13.0/bevy/ui/struct.TargetCamera.html
[`Visibility`]: https://docs.rs/bevy/0.13.0/bevy/render/view/enum.Visibility.html
[`UiCameraConfig`]: https://docs.rs/bevy/0.12.1/bevy/ui/camera_config/struct.UiCameraConfig.html

## Texture Slicing and Tiling

<div class="release-feature-authors">authors: @ManevilleF</div>

3D rendering gets a lot of love, but 2D features matter too!
We're pleased to add CPU-based _slicing and tiling_ to both `bevy_sprite` and `bevy_ui` in **Bevy 0.13**!

This behavior is controlled by a new optional component: [`ImageScaleMode`].

[`ImageScaleMode`]: https://docs.rs/bevy/0.13.0/bevy/prelude/enum.ImageScaleMode.html

### 9 slicing

Adding `ImageScaleMode::Sliced` to an entity with a sprite or UI bundle enables [9 slicing](https://en.wikipedia.org/wiki/9-slice_scaling),
keeping the image proportions during resizes, avoiding stretching of the texture.

![Stretched Vs Sliced texture](slice_vs_stretched.png)

This is very useful for UI, allowing your pretty textures to look right even as the size of your element changes.

![Sliced Buttons](ui_slice.png)

<div style="font-size: 1.0rem;" class="release-feature-authors">
Border texture by <a href="https://kenney.nl/assets/fantasy-ui-borders">Kenney</a>
</div>

```rust
commands.spawn((
    SpriteSheetBundle::default(),
    ImageScaleMode::Sliced(TextureSlicer {
        // The image borders are 20 pixels in every direction
        border: BorderRect::square(20.0),
        // we don't stretch the corners more than their actual size (20px)
        max_corner_scale: 1.0,
        ..default()
    }),
));
```

### Tiling

Adding `ImageMode::Tiled { .. }` to your 2D sprite entities enables _texture tiling_: repeating the image until their entire area is filled.
This is commonly used for backgrounds and surfaces.

<video controls><source src="logo_tiling.mp4" type="video/mp4"/></video>

```rust
commands.spawn((
    SpriteSheetBundle::default(),
    ImageScaleMode::Tiled {
        // The image will repeat horizontally
        tile_x: true,
        // The image will repeat vertically
        tile_y: true,
        // The texture will repeat if the drawing rect is larger than the image size
        stretch_value: 1.0,
    },
));
```

## Dynamic Queries

<div class="release-feature-authors">authors: @james-j-obrien, @jakobhellermann, @Suficio</div>

In Bevy ECS, queries use a type-powered DSL. The full type of the query (what component to access, which filter to use) must be specified at compile time.

Sometimes we can't know what data the query wants to access at compile time. Some scenarios just cannot be done with static queries:

* Defining queries in scripting languages like Lua or JavaScript.
* Defining new components from a scripting language and query them.
* Adding a runtime filter to entity inspectors like [`bevy-inspector-egui`].
* Adding a [Quake-style console] to modify or query components from a prompt at runtime.
* Creating an [editor with remote capabilities].

Dynamic queries make these all possible. And these are only the plans we've heard about so far!

The standard way of defining a [`Query`] is by using them as system parameters:

```rust
fn take_damage(mut player_health: Query<(Entity, &mut Health), With<Player>>) {
    // ...
}
```

**This won't change.** And for most (if not all) gameplay use cases, you will
continue to happily use the delightfully simple [`Query`] API.

However, consider this situation: as a game or mod developer I want to list entities
with a specific component through a text prompt. Similar to how the Quake console works.
What would that look like?

```rust
#[derive(Resource)]
struct UserQuery(String);

// user_query is entered as a text prompt by the user when the game is running.
// In a system, it's quickly apparent that we can't use `Query`.
fn list_entities_system(user_query: Res<UserQuery>, query: Query<FIXME, With<FIXME>>) {}

// Even when using the more advanced `World` API, we are stuck.
fn list_entities(user_query: String, world: &mut World) {
    // FIXME: what type goes here?
    let query = world.query::<FIXME>();
}
```

It's impossible to choose a type based on the value of `user_query`!
[`QueryBuilder`] solves this problem.

```rust
fn list_entities(
    user_query: String,
    type_registry: &TypeRegistry,
    world: &mut World,
) -> Option<()> {
    let name = user_query.split(' ').next()?;
    let type_id = type_registry.get_with_short_type_path(name)?.type_id();
    let component_id = world.components().get_id(type_id)?;

    let query = QueryBuilder::<FilteredEntityRef>::new(&mut world)
        .ref_id(component_id)
        .build();

    for entity_ref in query.iter(world) {
        let ptr = entity_ref.get_by_id(component_id);
        // Convert `ptr` into a `&dyn Reflect` and use it.
    }
    Some(())
}
```

It is still an error-prone, complex, and unsafe API, but it makes something that was previously
impossible possible.
We expect third-party crates to provide convenient wrappers around the `QueryBuilder` API,
some of which will undoubtedly make their way upstream.

[`bevy-inspector-egui`]: https://crates.io/crates/bevy-inspector-egui
[Quake-style console]: https://github.com/doonv/bevy_dev_console
[editor with remote capabilities]: https://makeshift-bevy-web-editor.vercel.app/
[`QueryBuilder`]: https://docs.rs/bevy/0.13.0/bevy/ecs/prelude/struct.QueryBuilder.html

## Query Transmutation

<div class="release-feature-authors">authors: @hymm, james-j-obrien</div>

Have you ever wanted to pass a query to a function, but instead of having a
`Query<&Transform>` you have a `Query<(&Transform, &Velocity), With<Enemy>>`?
In **Bevy 0.13** you can, thanks to the new [`QueryLens`] and [`Query::transmute_lens()`] method.

Query transmutes
allow you to change a query into different query types as long as the
components accessed are a subset of the original query. If you do try to access
data that is not in the original query, this method will panic.

```rust
fn reusable_function(lens: &mut QueryLens<&Transform>) {
    let query = lens.query();
    // do something with the query...
}

// We can use the function in a system that takes the exact query.
fn system_1(mut query: Query<&Transform>) {
    reusable_function(&mut query.as_query_lens());
}

// We can also use it with a query that does not match exactly
// by transmuting it.
fn system_2(mut query: Query<(&mut Transform, &Velocity), With<Enemy>>) {
    let mut lens = query.transmute_lens::<&Transform>();
    reusable_function(&mut lens);
}
```

Note that the [`QueryLens`] will still iterate over the same entities as the
original [`Query`] it is derived from. A `QueryLens<&Transform>` taken from
a `Query<(&Transform, &Velocity)>`, will only include the `Transform` of
entities with both `Transform` and `Velocity` components.

Besides removing parameters you can also change them in limited ways to the
different smart pointer types. One of the more useful is to change a
`&mut` to a `&`. See the [documentation](https://docs.rs/bevy/latest/bevy/ecs/system/struct.Query.html#method.transmute_lens)
for more details.

One thing to take into consideration is the transmutation is not free.
It works by creating a new state and copying cached data
inside the original query. It's not an expensive operation, but you should
avoid doing it inside a hot loop.

[`Query::transmute_lens()`]: https://docs.rs/bevy/0.13.0/bevy/ecs/system/struct.Query.html#method.transmute_lens
[`QueryLens`]: https://docs.rs/bevy/0.13.0/bevy/ecs/system/struct.QueryLens.html

## `WorldQuery` Trait Split

<div class="release-feature-authors">authors: @wainwrightmark @taizu-jin</div>

A [`Query`] has two type parameters: one for the data to be fetched, and a second optional one for the filters.

In previous versions of Bevy both parameters simply required [`WorldQuery`]: there was nothing stopping you from using types intended as filters in the data position (or vice versa).

Apart from making the type signature of the [`Query`] items more complicated (see example below) this usually worked fine as most filters had the same behavior in either position.

Unfortunately this was not the case for [`Changed`] and [`Added`] which had different (and undocumented) behavior in the data position and this could lead to bugs in user code.

To allow us to prevent this type of bug at compile time, the [`WorldQuery`] trait has been replaced by two traits: [`QueryData`] and [`QueryFilter`]. The data parameter of a [`Query`] must now be [`QueryData`] and the filter parameter must be [`QueryFilter`].

Most user code should be unaffected or easy to migrate.

```rust
// Probably a subtle bug: `With` filter in the data position - will not compile in 0.13
fn my_system(query: Query<(Entity, With<ComponentA>)>)
{
    // The type signature of the query items is `(Entity, ())`, which is usable but unwieldy
  for (entity, _) in query.iter(){
  }
}

// Idiomatic, compiles in both 0.12 and 0.13
fn my_system(query: Query<Entity, With<ComponentA>>)
{
  for entity in query.iter(){
  }
}
```

[`Query`]: https://docs.rs/bevy/0.13.0/bevy/ecs/system/struct.Query.html
[`WorldQuery`]: https://docs.rs/bevy/0.12.0/bevy/ecs/query/trait.WorldQuery.html
[`Changed`]: https://docs.rs/bevy/0.13.0/bevy/ecs/query/struct.Changed.html
[`Added`]: https://docs.rs/bevy/0.13.0/bevy/ecs/query/struct.Added.html
[`QueryData`]: https://docs.rs/bevy/0.13.0/bevy/ecs/query/trait.QueryData.html
[`QueryFilter`]: https://docs.rs/bevy/0.13.0/bevy/ecs/query/trait.QueryFilter.html

## Automatically Insert `apply_deferred` Systems

<div class="release-feature-authors">authors: @hymm</div>

When writing gameplay code, you might commonly have one system that wants to
immediately see the effects of commands queued in another system.
Before **Bevy 0.13**, you would have to manually insert an `apply_deferred` system between the two,
a special system which causes those commands to be applied when encountered.
Bevy now detects when a system with commands
is ordered relative to other systems and inserts the `apply_deferred` for you.

```rust
// Before 0.13
app.add_systems(
    Update,
    (
        system_with_commands,
        apply_deferred,
        another_system,
    ).chain()
);
```

```rust
// After 0.13
app.add_systems(
    Update,
    (
        system_with_commands,
        another_system,
    ).chain()
);
```

This resolves a common beginner footgun: if two systems are ordered, shouldn't the second always see the results of the first?

Automatically inserted `apply_deferred` systems are optimized by automatically merging them if
possible. In most cases, it is recommended to remove all manually inserted
`apply_deferred` systems, as allowing Bevy to insert and merge these systems as needed will
usually be both faster and involve less boilerplate.

```rust
// This will only add one apply_deferred system.
app.add_systems(
    Update,
    (
        (system_1_with_commands, system_2).chain(),
        (system_3_with_commands, system_4).chain(),
    )
);
```

If this new behavior does not work for you, please consult the migration guide.
There are several new APIs that allow you to opt-out.

## More Flexible One-Shot Systems

<div class="release-feature-authors">authors: @Nathan-Fenner</div>

In **Bevy 0.12**, we introduced [one-shot systems](https://bevy.org/news/bevy-0-12/#one-shot-systems), a handy way to call systems on demand without having to add them to a schedule.
The initial implementation had some limitations in regard to what systems could and could not be used as one-shot systems.
In **Bevy 0.13**, these limitations have been resolved.

One-shot systems now support inputs and outputs.

```rust
fn increment_sys(In(increment_by): In<i32>, mut counter: ResMut<Counter>) -> i32 {
    counter.0 += increment_by;
    counter.0
}

let mut world = World::new();
let id = world.register_system(increment_sys);

world.insert_resource(Counter(1));
let count_one = world.run_system_with_input(id, 5).unwrap(); // increment counter by 5 and return 6
let count_two = world.run_system_with_input(id, 2).unwrap(); // increment counter by 2 and return 8
```

Running a system now returns the system output as `Ok(output)`. Note that output cannot be returned when calling one-shot systems through commands, because of their deferred nature.

Exclusive systems can now be registered as one-shot systems:

```rust
world.register_system(|world: &mut World| { /* do anything */ });
```

Boxed systems can now be registered with `register_boxed_system`.

These improvements round out one-shot systems significantly: they should now work just like any other Bevy system.

## wgpu 0.19 Upgrade and Rendering Performance Improvements

<div class="release-feature-authors">authors: @Elabajaba, @JMS55</div>

In **Bevy 0.13** we upgraded from `wgpu` 0.17 to `wgpu` 0.19, which includes the long awaited `wgpu` [arcanization](https://gfx-rs.github.io/2023/11/24/arcanization.html) that allows us to [compile shaders asynchronously](https://github.com/bevyengine/bevy/pull/10812) to avoid shader compilation stutters and [multithread draw call creation](https://github.com/bevyengine/bevy/pull/9172 ) for better performance in CPU-bound scenes.

Due to changes in wgpu 0.19, we've added a new `webgpu` feature to Bevy that is now required when doing WebAssembly builds targeting WebGPU. Disabling the `webgl2` feature is no longer required when targeting WebGPU, but the new `webgpu` feature currently overrides the `webgl2` feature when enabled. Library authors, please do not enable the `webgpu` feature by default. In the future we plan on allowing you to target both WebGL2 and WebGPU in the same WebAssembly binary, but we aren't quite there yet.

We've swapped the material and mesh bind groups, so that mesh data is now in bind group 1, and material data is in bind group 2. This greatly improved our draw call batching when combined with changing the sorting functions for the opaque passes to sort by pipeline and mesh. Previously we were sorting them by distance from the camera. These batching improvements mean we're doing fewer draw calls, which improves CPU performance, especially in larger scenes. We've also removed the `get_instance_index` function in shaders, as it was only required to work around an upstream bug that has been fixed in wgpu 0.19. For other shader or rendering changes, please see the [migration guide](/learn/migration-guides/0-12-to-0-13/) and [wgpu's changelog](https://github.com/gfx-rs/wgpu/blob/v0.19/CHANGELOG.md).

Many small changes both to Bevy and `wgpu` summed up to make a modest but measurable difference in our performance on realistic 3D scenes!
We ran some quick tests on both **Bevy 0.12** and **Bevy 0.13** on the same machine on four complex scenes: [Bistro], [Sponza], [San Miguel] and [Hidden Alley].

![A high polygon, realistically lit screenshot of a beautiful cafe with a tree in the background.](San_Miguel_13.jpg)

As you can see, these scenes are substantially more detailed than most video game environments, but that screenshot was being rendered in Bevy at better than 60 FPS at 1440p resolution!
Between Bevy 0.12 and Bevy 0.13 we saw frame times decrease by about 5-10% across the scenes tested. Nice work!

![A graph showing the FPS of the different scenes. Bistro went from 90 FPS to 120 FPS, while the other scenes improved slightly. All scenes were 60-120 FPS.](rendering-perf-graph.svg)

[Bistro]: https://github.com/DGriffin91/bevy_bistro_scene
[Sponza]: https://github.com/DGriffin91/bevy_sponza_scene
[San Miguel]: https://github.com/DGriffin91/bevy_san_miguel_scene
[Hidden Alley]: https://blog.polyhaven.com/hidden-alley/

## Unload Rendering Assets from RAM

<div class="release-feature-authors">authors: @JMS55, @mockersf, @brianreavis</div>

Meshes and the textures used to define their materials take up a ton of memory:
in many games, memory usage is the biggest limitation on the resolution and polygon count of the game!
Moreover, transferring that data from system RAM (used by the CPU) to the VRAM (used by the GPU) can be a real performance bottleneck.

**Bevy 0.13** adds the ability to unload this data from system RAM, once it has been successfully transferred to VRAM. To configure this behavior for your asset, set the [`RenderAssetUsages`] field to specify whether to retain the data in the main (CPU) world, the render (GPU) world, or both.

This behavior is currently off by default for most asset types as it [has some caveats] (given that the asset becomes unavailable to logic on the CPU), but we strongly recommend enabling it for your assets whenever possible for significant memory usage wins (and we will likely enable it by default in the future).

Texture atlases and font atlases now only extract data that's actually in use
to VRAM, rather than wasting work sending _all_ possible images or characters to VRAM every frame.
Neat!

[has some caveats]: https://github.com/bevyengine/bevy/pull/11212
[`RenderAssetUsages`]: https://docs.rs/bevy/0.13.0/bevy/render/render_asset/struct.RenderAssetUsages.html

## Better Batching Through Smarter Sorting

<div class="release-feature-authors">authors: @Elabajaba</div>

One of the core techniques used to speed up rendering is to draw many similar objects together at the same time.
In this case, Bevy was already using a technique called "batching", which allows us to combine multiple similar operations,
reducing the number of expensive draw calls (instructions to the GPU) that are being made.

However, our strategy for defining these batches was far from optimal.
Previously, we were sorting by distance to the camera, and _then_ checking if multiple of the same meshes were adjacent to each other in that sorted list.
In realistic scenes, this is unlikely to find many candidates for merging!

In **Bevy 0.13**, we first sort by pipeline (effectively the type of material being used), and then by mesh identity.
This strategy results in better batching, improving overall FPS by double-digit percentages on the [realistic scene tested](https://syntystore.com/products/polygon-fantasy-kingdom)!

![A graph showing batching improvements. Shadows are very expensive, and FPS improved by at least 20% in all cases tested.](better_batching.svg)

## Animation Interpolation Methods

<div class="release-feature-authors">authors: @mockersf</div>

Generally, animations are defined by their **keyframes**: snapshots of the position (and other state) or objects at moments along a timeline.
But what happens between those keyframes? Game engines need to **interpolate** between them, smoothly transitioning from one state to the next.

The simplest interpolation method is linear: the animated object just moves an equal distance towards the next keyframe every unit of time.
But this isn't always the desired effect! Both stop-motion-style and more carefully smoothed animations have their place.

Bevy now supports both step and cubic spline interpolation in animations.
Most of the time, this will just be parsed correctly from the glTF files, but when setting [`VariableCurve`] manually,
there's a new [`Interpolation`] field to set.

[`VariableCurve`]: https://docs.rs/bevy/0.13.0/bevy/animation/struct.VariableCurve.html
[`Interpolation`]: https://docs.rs/bevy/0.13.0/bevy/animation/enum.Interpolation.html

![Demonstrating the different types of interpolation](interpolation_methods.gif)

## `Animatable` Trait

<div class="release-feature-authors">authors: @james7132</div>

When you think of "animation": you're probably imagining moving objects through space.
Translating them back and forth, rotating them, maybe even squashing and stretching them.
But in modern game development, animation is a powerful shared set of tools and concepts for "changing things over time".
Transforms are just the beginning: colors, particle effects, opacity and even boolean values like visibility can all be animated!

In **Bevy 0.13**, we've taken the first step towards [this vision](https://github.com/bevyengine/rfcs/blob/main/rfcs/51-animation-composition.md),
with the [`Animatable`] trait.

```rust
/// An animatable value type.
pub trait Animatable: Reflect + Sized + Send + Sync + 'static {
    /// Interpolates between `a` and `b` with  a interpolation factor of `time`.
    ///
    /// The `time` parameter here may not be clamped to the range `[0.0, 1.0]`.
    fn interpolate(a: &Self, b: &Self, time: f32) -> Self;

    /// Blends one or more values together.
    ///
    /// Implementors should return a default value when no inputs are provided here.
    fn blend(inputs: impl Iterator<Item = BlendInput<Self>>) -> Self;

    /// Post-processes the value using resources in the [`World`].
    /// Most animatable types do not need to implement this.
    fn post_process(&mut self, _world: &World) {}
}
```

This is the first step towards animation blending and an asset-driven animation graph which is essential for shipping large scale 3D games in Bevy.
But for now, this is just a building block. We've implemented this for a few key types (`Transform`, `f32` and `glam`'s `Vec` types) and published the trait.
Slot it into your games and crates, and team up with other contributors to help `bevy_animation` become just as pleasant and featureful as the rest of the engine.

[`Animatable`]: https://docs.rs/bevy/0.13.0/bevy/prelude/trait.Animatable.html

## Extensionless Asset Support

<div class="release-feature-authors">authors: @bushrat011899</div>

In prior versions of Bevy, the default way to choose an [`AssetLoader`] for a particular asset was entirely based on file extensions. The [recent addition of .meta files] allowed for specifying more granular loading behavior, but file extensions were still required. In **Bevy 0.13**, the asset type can now be used to infer the [`AssetLoader`].

```rust
// Uses AudioSettingsAssetLoader
let audio = asset_server.load("data/audio.json");

// Uses GraphicsSettingsAssetLoader
let graphics = asset_server.load("data/graphics.json");
```

This is possible because every [`AssetLoader`] is required to declare what **type** of asset it loads, not just the extensions it supports. Since the [`load`] method on [`AssetServer`] was already generic over the type of asset to return, this information is already available to the [`AssetServer`].

```rust
// The above example with types shown
let audio: Handle<AudioSettings> = asset_server.load::<AudioSettings>("data/audio.json");
let graphics: Handle<GraphicsSettings> = asset_server.load::<GraphicsSettings>("data/graphics.json");
```

Now we can also use it to choose the [`AssetLoader`] itself.

When loading an asset, the loader is chosen by checking (in order):

1. The asset `meta` file
2. The type of `Handle<A>` to return
3. The file extension

```rust
// This will be inferred from context to be a glTF asset, ignoring the file extension
let gltf_handle = asset_server.load("models/cube/cube.gltf");

// This still relies on file extension due to the label
let cube_handle = asset_server.load("models/cube/cube.gltf#Mesh0/Primitive0");
//                                                        ^^^^^^^^^^^^^^^^^
//                                                        | Asset path label
```

### File Extensions Are Now Optional

Since the asset type can be used to infer the loader, neither the file to be loaded nor the [`AssetLoader`] need to have file extensions.

```rust
pub trait AssetLoader: Send + Sync + 'static {
    /* snip */

    /// Returns a list of extensions supported by this [`AssetLoader`], without the preceding dot.
    fn extensions(&self) -> &[&str] {
        // A default implementation is now provided
        &[]
    }
}
```

Previously, an asset loader with no extensions was very cumbersome to use. Now, they can be used just as easily as any other loader. Likewise, if a file is missing its extension, Bevy can now choose the appropriate loader.

```rust
let license = asset_server.load::<Text>("LICENSE");
```

Appropriate file extensions are still recommended for good project management, but this is now a recommendation rather than a hard requirement.

### Multiple Asset Loaders With The Same Asset

Now, a single path can be used by multiple asset handles as long as they are distinct asset types.

```rust
// Load the sound effect for playback
let bang = asset_server.load::<AudioSource>("sound/bang.ogg");

// Load the raw bytes of the same sound effect (e.g, to send over the network)
let bang_blob = asset_server.load::<Blob>("sound/bang.ogg");

// Returns the bang handle since it was already loaded
let bang_again = asset_server.load::<AudioSource>("sound/bang.ogg");
```

Note that the above example uses [turbofish] syntax for clarity. In practice, it's not required, since the type of asset loaded can usually be inferred at the call site.

```rust
#[derive(Resource)]
struct SoundEffects {
    bang: Handle<AudioSource>,
    bang_blob: Handle<Blob>,
}

fn setup(mut effects: ResMut<SoundEffects>, asset_server: Res<AssetServer>) {
    effects.bang = asset_server.load("sound/bang.ogg");
    effects.bang_blob = asset_server.load("sound/bang.ogg");
}
```

The [`custom_asset` example] has been updated to demonstrate these new features.

[recent addition of .meta files]: https://bevy.org/news/bevy-0-12/#asset-meta-files
[`AssetServer`]: https://docs.rs/bevy/0.13.0/bevy/asset/struct.AssetServer.html
[`AssetLoader`]: https://docs.rs/bevy/0.13.0/bevy/asset/trait.AssetLoader.html
[`load`]: https://docs.rs/bevy/0.13.0/bevy/asset/struct.AssetServer.html#method.load
[turbofish]: https://turbo.fish/
[`custom_asset` example]: https://bevy.org/examples/Assets/custom-asset/

## Texture Atlas Rework

<div class="release-feature-authors">authors: @ManevilleF</div>

Texture atlases efficiently combine multiple images into a single larger texture called an atlas.

**Bevy 0.13** significantly reworks them to reduce boilerplate and make them more data-oriented.
Say goodbye to `TextureAtlasSprite` and `UiTextureAtlasImage` components (and their corresponding `Bundle` types). Texture atlasing is now enabled by adding a single _additional_ component to normal sprite and image entities: [`TextureAtlas`].

### Why?

Texture atlases (sometimes called sprite sheets) simply draw a custom _section_ of a given texture. This is _still_ Sprite-like or Image-like behavior, we're just drawing a subset. The new [`TextureAtlas`] component embraces that by storing:

* a `Handle<TextureAtlasLayout>`, an asset mapping an index to a `Rect` section of a texture
* a `usize` index defining which section `Rect` of the layout we want to display

[`TextureAtlas`]: https://docs.rs/bevy/0.13.0/bevy/sprite/struct.TextureAtlas.html

## Light `RenderLayers`

<div class="release-feature-authors">authors: @robftm</div>

[`RenderLayers`] are Bevy's answer to quickly hiding and showing entities en masse by filtering what a Camera can see ... great for things like customizing the first-person view of what a character is holding (or making sure vampires don't show up in your mirrors!).

[`RenderLayers`] [now play nice] with lights, fixing a serious limitation to make sure this awesome feature can shine appropriately!

[`RenderLayers`]: https://docs.rs/bevy/latest/bevy/render/view/struct.RenderLayers.html
[now play nice]: https://github.com/bevyengine/bevy/pull/10742

## Bind Group Layout Entries

<div class="release-feature-authors">authors: @IceSentry</div>

We added a new API, inspired by the bind group entries API from 0.12, to declare bind group layouts. This new API is based on using built-in functions to define bind group layout resources and automatically set the index based on its position.

Here's a short example of how declaring a new layout looks:

```rust
let layout = render_device.create_bind_group_layout(
    "post_process_bind_group_layout",
    &BindGroupLayoutEntries::sequential(
        ShaderStages::FRAGMENT,
        (
            texture_2d_f32(),
            sampler(SamplerBindingType::Filtering),
            uniform_buffer::<PostProcessingSettings>(false),
        ),
    ),
);
```

## Type-Safe Labels for the `RenderGraph`

<div class="release-feature-authors">authors: @DasLixou</div>

Bevy uses Rust's type system extensively when defining labels, letting developers lean on tooling to catch typos and ease refactors.
But this didn't apply to Bevy's render graph. In the render graph, hard-coded—and potentially overlapping—strings were used to define nodes and sub-graphs.

```rust
// Before 0.13
impl MyRenderNode {
    pub const NAME: &'static str = "my_render_node"
}
```

In **Bevy 0.13**, we're using a more robust way to name render nodes and render graphs with the help of the type-safe label pattern already used by `bevy_ecs`.

```rust
// After 0.13
#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
pub struct PrettyFeature;
```

With those, the long paths for const-values become shorter and cleaner:

```rust
// Before 0.13
render_app
    .add_render_graph_node::<ViewNodeRunner<PrettyFeatureNode>>(
        core_3d::graph::NAME,
        PrettyFeatureNode::NAME,
    )
    .add_render_graph_edges(
        core_3d::graph::NAME,
        &[
            core_3d::graph::node::TONEMAPPING,
            PrettyFeatureNode::NAME,
            core_3d::graph::node::END_MAIN_PASS_POST_PROCESSING,
        ],
    );

// After 0.13
use bevy::core_pipeline::core_3d::graph::{Node3d, Core3d};

render_app
    .add_render_graph_node::<ViewNodeRunner<PrettyFeatureNode>>(
        Core3d,
        PrettyFeature,
    )
    .add_render_graph_edges(
        Core3d,
        (
            Node3d::Tonemapping,
            PrettyFeature,
            Node3d::EndMainPassPostProcessing,
        ),
    );
```

When you need dynamic labels for render nodes, those can still be achieved via e.g. tuple structs:

```rust
#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
pub struct MyDynamicLabel(&'static str);
```

This is particularly nice because we don't have to store strings here: we can use integers, custom enums or any other hashable type.

## Winit Upgrade

<div class="release-feature-authors">authors: @Thierry Berger, @mockersf</div>

Through the heroic efforts of our contributors and reviewers, Bevy is [now upgraded] to use `winit 0.29`.
[`winit`] is our windowing library: it abstracts over all the different operating systems and input devices that end users might have,
and provides a uniform API to enable a write-once run-anywhere experience.
While this brings with it the usual litany of valuable [bug fixes and stability improvements],
the critical change revolves around how [`KeyCode`] is handled.

Previously, [`KeyCode`] represented the logical meaning of a key on a keyboard:
pressing the same button on the same keyboard when swapping between QWERTY and AZERTY keyboard layouts would give a different result!
Now,  [`KeyCode`] represents the physical location of the key.
Lovers of WASD games know that this is a much better default for games. For most Bevy developers, you can leave your existing code untouched
and simply benefit from better default keybindings for users on non-QWERTY keyboards or layouts.
If you need information about the logical keys pressed, use the [`ReceivedCharacter`] event.

[now upgraded]: https://github.com/bevyengine/bevy/pull/10702
[`winit`]: https://docs.rs/winit/latest/winit/
[bug fixes and stability improvements]: https://github.com/rust-windowing/winit/blob/master/CHANGELOG.md#0292
[`KeyCode`]: https://docs.rs/bevy/latest/bevy/input/keyboard/enum.KeyCode.html
[`ReceivedCharacter`]: https://docs.rs/bevy/latest/bevy/prelude/struct.ReceivedCharacter.html

## Multiple Gizmo Configurations

<div class="release-feature-authors">authors: @jeliag</div>

Gizmos let you quickly draw shapes using
an immediate mode API. Here is how you use them:

```rust
// Bevy 0.12.1
fn set_gizmo_width(mut config: ResMut<GizmoConfig>) {
    // set the line width of every gizmos with this global configuration resource.
    config.line_width = 5.0;
}

fn draw_circles(mut gizmos: Gizmos) {
    // Draw two circles with a 5 pixels outline
    gizmos.circle_2d(vec2(100., 0.), 120., Color::NAVY);
    gizmos.circle_2d(vec2(-100., 0.), 120., Color::ORANGE);
}
```

Add a [`Gizmos`] system param and simply call a few methods. Cool!

Gizmos are also great for crate authors, they can use the same API.
For example, the [`oxidized_navigation`] navmesh library uses gizmos for its debug overlay.
Neat!

However, there is only one global configuration. Therefore,
a dependency could very well affect the game's gizmos.
It could even make them completely unusable.

Not so great. How to solve this? Gizmo groups.

Now, [`Gizmos`] comes with an optional parameter.
By default, it uses a global configuration:

```rust
fn draw_circles(mut default_gizmos: Gizmos) {
    default_gizmos.circle_2d(vec2(100., 0.), 120., Color::NAVY);
}
```

But with a [`GizmoConfigGroup`] parameter, `Gizmos` can choose a distinct configuration:

```rust
fn draw_circles(
    mut default_gizmos: Gizmos,
    // this uses the distinct NavigationGroup config
    mut navigation_gizmos: Gizmos<NavigationGroup>,
) {
    // Two circles with different outline width
    default_gizmos.circle_2d(vec2(100., 0.), 120., Color::NAVY);
    navigation_gizmos.circle_2d(vec2(-100., 0.), 120., Color::ORANGE);
}
```

Create your own gizmo config group by deriving `GizmoConfigGroup`,
and registering it to the `App`:

```rust
#[derive(Default, Reflect, GizmoConfigGroup)]
pub struct NavigationGroup;

impl Plugin for NavigationPlugin {
    fn build(&mut self, app: &mut App) {
        app
            .init_gizmo_group::<NavigationGroup>()
            // ... rest of plugin initialization.
    }
}
```

And this is how you set the configuration of gizmo groups to different values:

```rust
// Bevy 0.13.0
set_gizmo_width(mut config_store: ResMut<GizmoConfigStore>) {
    let config = config_store.config_mut::<DefaultGizmoConfigGroup>().0;
    config.line_width = 20.0;

    let navigation_config = config_store.config_mut::<NavigationGroup>().0;
    navigation_config.line_width = 10.0;
}
```

Now, the navigation gizmos have a fully separate configuration and don't conflict
with the game's gizmos.

Not only that, but the game dev can integrate and toggle the navigation gizmos with their
own debug tools however they wish. Be it a hotkey, a debug overlay UI button, or
an RPC call. The world is your oyster.

[`oxidized_navigation`]: https://crates.io/crates/oxidized_navigation
[`GizmoConfigGroup`]: https://docs.rs/bevy/0.13.0/bevy/gizmos/config/trait.GizmoConfigGroup.html

## glTF Extensions

<div class="release-feature-authors">authors: @CorneliusCornbread</div>

**[glTF]** is a popular standardized open file format, used to store and share 3D models and scenes between different programs.
The trouble with standards though is that you eventually want to _customize_ it, just a little, to better meet your needs.
Khronos Group, in their wisdom, foresaw this and defined a standardized way to customize the format called **[extensions]**.

Extensions can be readily exported from other tools (like Blender), and contain [all sorts] of other useful information: from bleeding edge physically-based material information like anisotropy to performance hints like how to instance meshes.

Because Bevy parses loaded glTF's into our own entity-based hierarchy of objects, getting access to this information when you want to do new rendering things can be hard!
With [the changes by CorneliusCornbread] you can configure the loader to store a raw copy of the glTF file itself with your loaded asset, allowing you to parse and reprocess this information however you please.

[glTF]: https://www.khronos.org/gltf/
[extensions]: https://kcoley.github.io/glTF/extensions/
[all sorts]: https://github.com/KhronosGroup/glTF/blob/main/extensions/README.md
[the changes by CorneliusCornbread]: https://github.com/bevyengine/bevy/pull/11138

## Asset Transformers

<div class="release-feature-authors">authors: @thepackett, @RyanSpaker</div>

Asset processing, at its core, involves implementing the `Process` trait, which takes some byte data representing an asset, transforms it, and then returns the processed byte data. However, implementing the `Process` trait by hand is somewhat involved, and so a generic `LoadAndSave<L: AssetLoader, S: AssetSaver>` `Process` implementation was written to make asset processing more ergonomic.

Using the `LoadAndSave` `Process` implementation, the previous Asset processing pipeline had four stages:

1. An `AssetReader` reads some asset source (filesystem, http, etc) and gets the byte data of an asset.
2. An `AssetLoader` reads the byte data and converts it to a Bevy `Asset`.
3. An `AssetSaver` takes a Bevy `Asset`, processes it, and then converts it back into byte data.
4. An `AssetWriter` then writes the asset byte data back to the asset source.

`AssetSaver`s were responsible for both transforming an asset and converting it into byte data. However, this posed a bit of an issue for code reusability. Every time you wanted to transform some asset, such as an image, you would need to rewrite the portion that converts the asset to byte data. To solve this, `AssetSaver`s are now solely responsible for converting an asset into byte data, and `AssetTransformer`s which are responsible for transforming an asset were introduced. A new `LoadTransformAndSave<L: AssetLoader, T: AssetTransformer, S: AssetSaver>` `Process` implementation was added to utilize the new `AssetTransformer`s.

The new asset processing pipeline, using the `LoadTransformAndSave` `Process` implementation, has five stages:

1. An `AssetReader` reads some asset source (filesystem, http, etc) and gets the byte data of an asset.
2. An `AssetLoader` reads the byte data and converts it to a Bevy `Asset`.
3. An `AssetTransformer` takes an asset and transforms it in some way.
4. An `AssetSaver` takes a Bevy `Asset` and converts it back into byte data.
5. An `AssetWriter` then writes the asset byte data back to the asset source.

In addition to having better code reusability, this change encourages writing `AssetSaver`s for various common asset types, which could be used to add runtime asset saving functionality to the `AssetServer`.

The previous `LoadAndSave` `Process` implementation still exists, as there are some cases where an asset transformation step is unnecessary, such as when saving assets into a compressed format.

See the [Asset Processing Example](<https://github.com/bevyengine/bevy/blob/main/examples/asset/processing/asset_processing.rs>) for a more detailed look into how to use `LoadTransformAndSave` to process a custom asset.

## Entity Optimizations

<div class="release-feature-authors">authors: @Bluefinger, @notverymoe, @scottmcm, @james7132, @NathanSWard</div>

`Entity` (Bevy's 64-bit unique identifier for entities) received several changes this cycle, laying some more groundwork for relations alongside _related_, and nice to have, performance optimizations. The work here involved a lot of deep-diving into compiler codegen/assembly output, with running lots of benchmarks and testing to ensure all changes didn't cause breakages or major problems. Although the work here was dealing with mostly _safe_ code, there were lots of underlying assumptions being changed that could have impacted code elsewhere. This was the most "micro-optimization" oriented set of changes in Bevy 0.13.

* [#9797]: created a unified identifier type, paving the path for us to use the same fast, complex code in both our `Entity` type and the much-awaited relations
* [#9907]: allowed us to store `Option<Entity>` in the same number of bits as `Entity`, by changing the layout of our Entity type to reserve exactly one `u64` value for the `None` variant
* [#10519]: swapped us to a manually crafted `PartialEq` and `Hash` implementation for `Entity` to improve speed and save instructions in our hot loops
* [#10558]: combined the approach of [#9907] and [#10519] to optimize `Entity`'s layout further, and optimized our `PartialOrd` and `Ord` implementations!
* [#10648]: further optimized our entity hashing, changing how we multiply in the hash to save one precious assembly instruction in the optimized compiler output

Full credit is also due to the authors who pursued similar work in [#2372] and [#3788]: while their work was not ultimately merged, it was an incredibly valuable
inspiration and source of prior art to base these more recent changes on.

![Benchmark results of optimization work](entity_hash_optimsation_benches.png)

The above results show from where we started (`optimised_eq` being the first PR that introduced the benchmarks) to where we are now with all the optimizations in place (`optimised_entity`).
There are improvements across the board, with clear performance benefits that should impact multiple areas of the codebase, not just when hashing entities.

There are a ton of crunchy, well-explained details in the linked PRs, including some fascinating assembly output analysis.
If that interests you, open some new tabs in the background!

[#9797]: https://github.com/bevyengine/bevy/pull/9797
[#9907]: https://github.com/bevyengine/bevy/pull/9907
[#10519]: https://github.com/bevyengine/bevy/pull/10519
[#10558]: https://github.com/bevyengine/bevy/pull/10558
[#10648]: https://github.com/bevyengine/bevy/pull/10648
[#2372]: https://github.com/bevyengine/bevy/pull/2372
[#3788]: https://github.com/bevyengine/bevy/pull/3788

## Porting `Query::for_each` to `QueryIter::fold` override

<div class="release-feature-authors">authors: @james7132</div>

Currently to get the full performance out of iterating over queries, `Query::for_each` must be used to take advantage of auto-vectorization and internal iteration optimizations that the compiler can apply. However, this isn't idiomatic rust and is not an iterator method so you can't use it on an iterator chain. However, it is possible to get the same benefits for some iterator methods, for which [#6773](https://github.com/bevyengine/bevy/pull/6773/) by @james7132 sought to achieve. By providing an override to `QueryIter::fold`, it was possible to port the iteration strategies of `Query::for_each` so that `Query::iter` and co could achieve the same gains. Not _every_ iterator method currently benefits from this, as they require overriding `QueryIter::try_fold`, but that is currently still a nightly-only optimisation. This same approach is within the Rust standard library.

This deduplicated code in a few areas, such as no longer requiring both `Query::for_each` and `Query::for_each_mut`, as one just needs to call `Query::iter` or `Query::iter_mut` instead. So code like:

```rust
fn some_system(mut q_transform: Query<&mut Transform, With<Npc>>) {
    q_transform.for_each_mut(|transform| {
        // Do something...
    });
}
```

Becomes:

```rust
fn some_system(mut q_transform: Query<&mut Transform, With<Npc>>) {
    q_transform.iter_mut().for_each(|transform| {
        // Do something...
    });
}
```

The assembly output was compared as well between what was on main branch versus the PR, with no tangible differences being seen between the old `Query::for_each` and the new `QueryIter::for_each()` output, validating the approach and ensuring the internal iteration optimizations were being applied.

As a plus, the same internal iteration optimizations in `Query::par_for_each` now reuse code from `for_each`, deduplicating code there as well and enabling users to make use of `par_iter().for_each()`. As a whole, this means there's no longer any need for `Query::for_each`, `Query::for_each_mut`, `Query::_par_for_each`, `Query::par_for_each_mut` so these methods have been deprecated for 0.13 and will be removed in 0.14.

## Reducing `TableRow` `as` Casting

<div class="release-feature-authors">authors: @bushrat011899</div>

Not all improvements in our ECS internals were focused on performance. Some small changes were made to improve type safety and tidy up some of the codebase to have less `as` casting being done on various call sites for `TableRow`. The problem with `as` casting is that in some cases, the cast will fail by truncating the value silently, which could then cause havoc by accessing the wrong row and so forth. [#10811](https://github.com/bevyengine/bevy/pull/10811) by @bushrat011899 was put forward to clean up the API around `TableRow`, providing convenience methods backed by `assert`s to ensure the casting operations could never fail, or if they did, they'd panic correctly.

Naturally, _adding_ asserts in potentially hot codepaths were cause for some concern, necessitating considerable benchmarking efforts to confirm there were regressions and to what level. With careful placing of the new `assert`s, the detected regression for these cases was in the region of 0.1%, well within noise.
But the benefit was a less error-prone API and more robust code.
With a complex unsafe codebase like `bevy_ecs`, every little bit helps.

## Events Live Longer

Events are a useful tool for passing data into systems and between systems.

Internally, Bevy events are double-buffered, so a given event will be silently dropped once the buffers have swapped twice.
The `Events<T>` resource is set up this way so events are dropped after a predictable amount of time, preventing their queues from growing forever and causing a memory leak.

Before 0.12.1, event queues were swapped every update (i.e. every frame).
That was an issue for games with logic in `FixedUpdate` since it meant events would normally disappear before systems in the next `FixedUpdate` could read them.

Bevy 0.12.1 changed the swap cadence to "every update that runs `FixedUpdate` one or more times" (only if the `TimePlugin` is installed).
This change did resolve the original problem, but it then caused problems in the other direction.
Users were surprised to learn some of their systems with `run_if` conditions would iterate much older events than expected.
(In hindsight, we should have considered it a breaking change and postponed it until this release.)
The change also introduced a bug (fixed in this release) where only one type of event was being dropped.

One proposed future solution to this lingering but unintended coupling between `Update` and `FixedUpdate` is to use event timestamps to change the default range of events visible by `EventReader<T>`.
That way systems in `Update` would skip any events older than a frame while systems in `FixedUpdate` could still see them.

For now, the `<=0.12.0` behavior can be recovered by simply removing the `EventUpdateSignal` resource.

```rust
fn main() {
    let mut app = App::new()
        .add_plugins(DefaultPlugins);
    
    /* ... */

    // If this resource is absent, events are dropped the same way as <=0.12.0.
    app.world.remove_resource::<EventUpdateSignal>();
    
    /* ... */

    app.run();
}
```

## <a name="what-s-next"></a>What's Next?

We have plenty of work in progress! Some of this will likely land in **Bevy 0.14**.

Check out the [**Bevy 0.14 Milestone**](https://github.com/bevyengine/bevy/milestone/20) for an up-to-date list of current work that contributors are focusing on for **Bevy 0.14**.

### More Editor Experimentation

Led by the brilliant JMS55, we've opened up a free-form [playground] to define and answer [key questions] about the design of the `bevy_editor`: not through discussion, but through concrete prototyping.
Should we use an in-process editor (less robust to game crashes) or an external one (more complex)?
Should we ship an editor binary (great for non-programmers) or embed it in the game itself (very hackable)?
Let's find out by doing!

There are some incredible mockups, functional prototypes and third-party editor-adjacent projects out there. Some highlights:

<div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr; gap: 1rem; align-items: end; justify-items: center; margin: 2rem; font-size: 0.8rem; text-align: center">
  <div style="grid-column: span 2">
    <a href="editor_mockup.png"><img src="editor_mockup.png" alt="A mockup of the UI for a graphical Bevy editor" style="border-radius: 0; box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.5)"></a>
    (1) bevy_editor_mockup
  </div>
  <div style="grid-column: span 2">
    <a href="locomotion_graph.png"><img src="locomotion_graph.png" alt="A node-based animation graph editor built with `bevy_egui`" style="border-radius: 0; box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.5)"></a>
    (2) bevy_animation_graph
  </div>
  <div style="grid-column: span 2">
    <a href="space_editor.png"><img src="space_editor.png" alt="A screenshot from `space_editor`, showcasing a functional scene editor with gizmos" style="border-radius: 0; box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.5)"></a>
    (3) space_editor
  </div>
  <div style="grid-column: 2 / span 2">
    <a href="bevy_components.jpg"><img src="bevy_components.jpg" alt="A screenshot from Blender, with Blender UI modifying Bevy component values" style="border-radius: 0; box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.5)"></a>
    (4) bevy_components
  </div>
  <div style="grid-column: span 2">
    <a href="makeshift_web.jpg"><img src="makeshift_web.jpg" alt="A recording of a web-based editor resulting in changes to Bevy entities in real time" style="border-radius: 0; box-shadow: 0 0.5rem 0.5rem rgba(0, 0, 0, 0.5)"></a>
    (5) bevy_remote
  </div>
</div>

1. A Bevy-branded editor UI mockup by `@!!&Amy` on Discord, imagining what the UX for an ECS-based editor [could look like]
2. [`bevy_animation_graph`]: a fully-functional asset-driven animation graph crate with its own node-based editor for Bevy
3. [`space_editor`]: a polished Bevy-native third-party scene editor that you can use today!
4. [`Blender_bevy_components_workflow`]: an impressively functional ecosystem of tools that lets you use Blender as a seamless level and scene editor for your games today.
5. `@coreh`'s experiment on a [reflection-powered remote protocol], coupled with an interactive web-based editor, allows devs to inspect and control their Bevy games from other processes, languages and even devices! [Try it out live]!

It's really exciting to see this progress, and we're keen to channel that energy and experience into official first-party efforts.

[playground]: https://github.com/bevyengine/bevy_editor_prototypes
[could look like]: https://amytimed.github.io/bevy_editor_mockup/editor/
[key questions]: https://github.com/bevyengine/bevy_editor_prototypes/discussions/1
[`bevy_animation_graph`]: https://crates.io/crates/bevy_animation_graph
[`space_editor`]: https://github.com/rewin123/space_editor
[`Blender_bevy_components_workflow`]: https://github.com/kaosat-dev/Blender_bevy_components_workflow
[reflection-powered remote protocol]: https://github.com/coreh/bevy/pull/1
[Try it out live]: https://makeshift-bevy-web-editor.vercel.app/

### `bevy_dev_tools`

The secret to smooth game development is great tooling.
It's time to give Bevy developers the tools they need to inspect, debug and profile their games as part of the first-party experience.
From FPS meters to system stepping to a first-party equivalent of the fantastic [`bevy-inspector-egui`]: giving these a home in Bevy itself helps us polish them, points new users in the right direction, and allows us to use them in the `bevy_editor` itself.

### A New Scene Format

[Scenes] are Bevy's general-purpose answer to serializing ECS data to disk: tracking entities, components, and resources for both saving games and loading premade levels.
However, the existing .ron-based scene format is hard to hand-author, overly verbose, and brittle; changes to your code (or that of your dependencies!) rapidly invalidate saved scenes.
Cart has been cooking up a [revised scene format] with tight IDE and code integration that tackles these problems and makes authoring content (including UI!) in Bevy a joy. Whether you're writing code, writing scene files, or generating it from a GUI.

[Scenes]: https://github.com/bevyengine/bevy/tree/latest/examples/scene
[revised scene format]: https://github.com/bevyengine/bevy/discussions/9538

### `bevy_ui` Improvements

`bevy_ui` has its fair share of problems and limitations, [both mundane and architectural];
however, there are tangible things we can and are doing to improve this:
an improved scene format offers an end to the boilerplate when defining layouts, [rounded] [corners] just need a little love from reviewers, and the powerful and beloved object picking from [`bevy_mod_picking`] is slated to be upstreamed for both UI and gameplay alike.
A spectacular array of [third-party UI solutions] exists today, and learning from those and committing to a core architecture for UI logic and reactivity is a top priority.

[both mundane and architectural]: https://www.leafwing-studios.com/blog/ecs-gui-framework/
[rounded]: https://github.com/bevyengine/bevy/pull/8973
[corners]: https://github.com/bevyengine/bevy/pull/11813
[third-party UI solutions]: https://bevy.org/assets/#ui

### Meshlet Rendering

Split meshes into clusters of triangles called meshlets, which bring many efficiency gains. During the 0.13 development cycle, we made a [lot of progress on this feature](https://github.com/bevyengine/bevy/pull/10164). We implemented a GPU-driven meshlet renderer that can scale to much more triangle-dense scenes, with a much lower CPU load. Memory usage, however, is very high, and we haven't implemented LODs or compression yet. Instead of releasing it half-baked, we're going to continue to iterate, and are very excited to (hopefully) bring you this feature in a future release.

![The Stanford dragon mesh rendered as meshlet clusters](meshlet_preview.png)

### The Steady March Towards Relations

[Entity-entity relations], the ability to track and manage connections between entities directly in the ECS, has been one of the most requested ECS features for years now.
Following the [trail blazed by `flecs`], the mad scientists over in `#ecs-dev` are steadily [reshaping our internals], [experimenting with external implementations], and shipping the general purpose building blocks (like dynamic queries or [lifecycle hooks]) needed to build a fast, robust and ergonomic solution.

[Entity-entity relations]: https://github.com/bevyengine/bevy/issues/3742
[trail blazed by `flecs`]: https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c
[reshaping our internals]: https://github.com/orgs/bevyengine/projects/15
[experimenting with external implementations]: https://crates.io/crates/aery
[lifecycle hooks]: https://github.com/bevyengine/bevy/pull/10756

## Support Bevy

Sponsorships help make our work on Bevy sustainable. If you believe in Bevy's mission, consider [sponsoring us](/community/donate) ... every bit helps!

<a class="button button--pink header__cta" href="/community/donate">Donate <img class="button__icon" src="/assets/heart.svg" alt="heart icon"></a>

## Contributors

Bevy is made by a [large group of people](/community/people/). A huge thanks to the 198 contributors that made this release (and associated docs) possible! In random order:

* @ickk
* @orph3usLyre
* @tygyh
* @nicopap
* @NiseVoid
* @pcwalton
* @homersimpsons
* @Henriquelay
* @Vrixyz
* @GuillaumeGomez
* @porkbrain
* @Leinnan
* @IceSentry
* @superdump
* @solis-lumine-vorago
* @garychia
* @tbillington
* @Nilirad
* @JMS55
* @kirusfg
* @KirmesBude
* @maueroats
* @mamekoro
* @NiklasEi
* @SIGSTACKFAULT
* @Olle-Lukowski
* @bushrat011899
* @cbournhonesque-sc
* @daxpedda
* @Testare
* @johnbchron
* @BlackPhlox
* @MrGVSV
* @Kanabenki
* @SpecificProtagonist
* @rosefromthedead
* @thepackett
* @wgxer
* @mintlu8
* @AngelOnFira
* @ArthurBrussee
* @viridia
* @GabeeeM
* @Elabajaba
* @brianreavis
* @dmlary
* @akimakinai
* @VitalyAnkh
* @komadori
* @extrawurst
* @NoahShomette
* @valentinegb
* @coreh
* @kristoff3r
* @wackbyte
* @BD103
* @stepancheg
* @bogdiw
* @doup
* @janhohenheim
* @ekropotin
* @thmsgntz
* @alice-i-cecile
* @tychedelia
* @soqb
* @taizu-jin
* @kidrigger
* @fuchsnj
* @TimJentzsch
* @MinerSebas
* @RomainMazB
* @cBournhonesque
* @tripokey
* @cart
* @pablo-lua
* @cuppar
* @TheTacBanana
* @AxiomaticSemantics
* @rparrett
* @richardhozak
* @afonsolage
* @conways-glider
* @ItsDoot
* @MarkusTheOrt
* @DavJCosby
* @thebluefish
* @DGriffin91
* @Shatur
* @MiniaczQ
* @killercup
* @Ixentus
* @hecksmosis
* @nvdaz
* @james-j-obrien
* @seabassjh
* @lee-orr
* @Waridley
* @wainwrightmark
* @robtfm
* @asuratos
* @Ato2207
* @DasLixou
* @SludgePhD
* @torsteingrindvik
* @jakobhellermann
* @fantasyRqg
* @johanhelsing
* @re0312
* @ickshonpe
* @BorisBoutillier
* @lkolbly
* @Friz64
* @rodolphito
* @TheBlckbird
* @HeyZoos
* @nxsaken
* @UkoeHB
* @GitGhillie
* @ibotha
* @ManevilleF
* @andristarr
* @josfeenstra
* @maniwani
* @Trashtalk217
* @benfrankel
* @notverymoe
* @simbleau
* @aevyrie
* @Dig-Doug
* @IQuick143
* @shanecelis
* @mnmaita
* @Braymatter
* @LeshaInc
* @esensar
* @Adamkob12
* @Kees-van-Beilen
* @davidasberg
* @andriyDev
* @hankjordan
* @Jondolf
* @SET001
* @hxYuki
* @matiqo15
* @capt-glorypants
* @hymm
* @HugoPeters1024
* @RyanSpaker
* @bardt
* @tguichaoua
* @SkiFire13
* @st0rmbtw
* @Davier
* @mockersf
* @antoniacobaeus
* @ameknite
* @Pixelstormer
* @bonsairobo
* @matthew-gries
* @NthTensor
* @tjamaan
* @Architector4
* @JoJoJet
* @TrialDragon
* @Gadzev
* @eltociear
* @scottmcm
* @james7132
* @CorneliusCornbread
* @Aztro-dev
* @doonv
* @Malax
* @atornity
* @Bluefinger
* @kayhhh
* @irate-devil
* @AlexOkafor
* @kettle11
* @davidepaci
* @NathanSWard
* @nfagerlund
* @anarelion
* @laundmo
* @nelsontkq
* @jeliag
* @13ros27
* @Nathan-Fenner
* @softmoth
* @xNapha
* @asafigan
* @nothendev
* @SuperSamus
* @devnev
* @RobWalt
* @ThePuzzledDev
* @rafalh
* @dubrowgn
* @Aceeri

## Full Changelog

The changes mentioned above are only the most appealing, highest impact changes that we've made this cycle.
Innumerable bug fixes, documentation changes and API usability tweaks made it in too.
For a complete list of changes, check out the PRs listed below.

### A-Rendering + A-Windowing

* [Allow prepare_windows to run off main thread.][11660]
* [Allow prepare_windows to run off main thread on all platforms][11672]
* [don't run `create_surfaces` system if not needed][11720]
* [fix create_surfaces system ordering][11747]

### A-Animation + A-Reflection

* [Add type registrations for animation types][11889]

### A-Assets

* [Don't `.unwrap()` in `AssetPath::try_parse`][10452]
* [feat: `Debug` implemented for `AssetMode`][10494]
* [Remove rogue : from embedded_asset! docs][10516]
* [use `tree` syntax to explain bevy_rock file structure][10523]
* [Make AssetLoader/Saver Error type bounds compatible with anyhow::Error][10493]
* [Fix untyped labeled asset loading][10514]
* [Add `load_untyped` to LoadContext][10526]
* [fix example custom_asset_reader on wasm][10574]
* [`ReadAssetBytesError::Io`  exposes failing path][10450]
* [Added Method to Allow Pipelined Asset Loading][10565]
* [Add missing asset load error logs for load_folder and load_untyped][10578]
* [Fix wasm builds with file_watcher enabled][10589]
* [Do not panic when failing to create assets folder (#10613)][10614]
* [Use handles for queued scenes in SceneSpawner][10619]
* [Fix file_watcher feature hanging indefinitely][10585]
* [derive asset for enums][10410]
* [Ensure consistency between Un/Typed `AssetId` and `Handle`][10628]
* [Fix Asset Loading Bug][10698]
* [remove double-hashing of typeid for handle][10699]
* [AssetMetaMode][10623]
* [Fix GLTF scene dependencies and make full scene renders predictable][10745]
* [Print precise and correct watch warnings (and only when necessary)][10787]
* [Allow removing and reloading assets with live handles][10785]
* [Add GltfLoaderSettings][10804]
* [Refactor `process_handle_drop_internal()` in bevy_asset][10920]
* [fix base64 padding when loading a gltf file][11053]
* [assets should be kept on CPU by default][11212]
* [Don't auto create assets folder][11218]
* [Use `impl Into<A>` for `Assets::add`][10878]
* [Add `reserve_handle` to `Assets`.][10939]
* [Better error message on incorrect asset label][11254]
* [GLTF extension support][11138]
* [Fix embedded watcher to work with external crates][11370]
* [Added AssetLoadFailedEvent, UntypedAssetLoadFailedEvent][11369]
* [auto create imported asset folder if needed][11284]
* [Fix minor typo][11491]
* [Include asset path in get_meta_path panic message][11504]
* [Fix documentation for `AssetReader::is_directory` function][11538]
* [AssetSaver and AssetTransformer split][11260]
* [AssetPath source parse fix][11543]
* [Allow TextureAtlasBuilder in AssetLoader][11548]
* [Add a getter for asset watching status on `AssetServer`][11578]
* [Make SavedAsset::get_labeled accept &str as label][11612]
* [Added Support for Extension-less Assets][10153]
* [Fix embedded asset path manipulation][10383]
* [Fix AssetTransformer breaking LabeledAssets][11626]
* [Put asset_events behind a run condition][11800]
* [Use Asset Path Extension for `AssetLoader` Disambiguation][11644]

### A-Core + A-App

* [Add Accessibility plugin to default plugins docs][11512]

### A-Accessibility

* [Add html tags required for accessibility][10989]
* [missed negation during accessibility refactor][11206]

### A-Transform

* [Add `Transform::is_finite`][10592]

### A-ECS + A-Hierarchy

* [Add a doc note about despawn footgun][10889]

### A-Text

* [Rename `TextAlignment` to `JustifyText`.][10854]
* [Subtract 1 from text positions to account for glyph texture padding.][11662]

### A-Assets + A-UI

* [UI and unloaded assets: don't filter out nodes with an unloaded image][11205]

### A-Utils + A-Time

* [Make SystemTime available in both native and wasm][10980]

### A-Rendering + A-Assets

* [Fix shader import hot reloading on windows][10502]
* [Unload render assets from RAM][10520]
* [mipmap levels can be 0 and they should be interpreted as 1][11767]

### A-Physics

* [refactor collide code (Adopted)][11106]
* [Use `IntersectsVolume` for breakout example collisions][11500]

### A-ECS + A-Editor + A-App + A-Diagnostics

* [System Stepping implemented as Resource][8453]

### A-Reflection + A-Scenes

* [Implement and register Reflect (value) for CameraRenderGraph and CameraMainTextureUsages][11878]

### A-Audio + A-Windowing

* [Winit update: fix suspend on Android][11403]

### A-Build-System + A-Meta

* [Standardize toml format with taplo][10594]

### A-ECS + A-Time

* [Wait until `FixedUpdate` can see events before dropping them][10077]
* [Add First/Pre/Post/Last schedules to the Fixed timestep][10977]
* [Add run conditions for executing a system after a delay][11095]
* [Add paused run condition][11313]

### A-Meta

* [Add "update screenshots" to release checklist][10369]
* [Remove references to specific projects from the readme][10836]
* [Fix broken link between files][10962]
* [[doc] Fix typo in CONTRIBUTING.md][10971]
* [Remove unused namespace declarations][10965]
* [Add docs link to root `Cargo.toml`][10998]
* [Migrate third party plugins guidelines to the book][11242]
* [Run markdownlint][11386]
* [Improve `config_fast_builds.toml`][11529]
* [Use `-Z threads=0` option in `config_fast_builds.toml`][11541]
* [CONTRIBUTING.md: Mention splitting complex PRs][11703]

### A-Time

* [docs: use `read` instead of deprecated `iter`][10376]
* [Rename `Time::<Fixed>::overstep_percentage()` and `Time::<Fixed>::overstep_percentage_f64()`][10448]
* [Rename `Timer::{percent,percent_left}` to `Timer::{fraction,fraction_remaining}`][10442]
* [Document how to configure FixedUpdate][10564]
* [Add discard_overstep function to `Time<Fixed>`][10453]

### A-Assets + A-Reflection

* [Register `AssetPath` as type for reflection][11483]

### A-Diagnostics + A-Utils

* [move once from bevy_log to bevy_utils, to allow for it's use in bevy_ecs][11419]

### A-Windowing + A-App

* [Revert `App::run()` behavior/Remove `winit` specific code from `bevy_app`][10389]

### A-ECS + A-Scenes

* [Make the MapEntities trait generic over Mappers, and add a simpler EntityMapper][11428]

### A-Hierarchy

* [bevy_hierarchy: add some docs][10598]
* [Make bevy_app and reflect opt-out for bevy_hierarchy.][10721]
* [Add `bevy_hierarchy` Crate and plugin documentation][10951]
* [Rename "AddChild" to "PushChild"][11194]
* [Inline trivial methods in bevy_hierarchy][11332]

### A-ECS + A-App

* [Add custom schedule example][11527]

### A-Transform + A-Math

* [return Direction3d from Transform::up and friends][11604]

### A-UI + A-Text

* [Improved Text Rendering][10537]
* [Feature-gate all references to `bevy_text` in `bevy_ui`][11391]

### A-Input

* [Make ButtonSettings.is_pressed/released public][10534]
* [Rename `Input` to `ButtonInput`][10859]
* [Add method to check if all inputs are pressed][11010]
* [Add window entity to TouchInput events][11128]
* [Extend `Touches` with clear and reset methods][10930]
* [Add logical key data to KeyboardInput][11400]
* [Derive Ord for GamepadButtonType.][11791]
* [Add delta to CursorMoved event][11710]

### A-Rendering + A-Diagnostics

* [Use `warn_once` where relevant instead of manually implementing a single warn check][11693]

### A-Rendering

* [Fix bevy_pbr shader function name][10423]
* [Implement Clone for VisibilityBundle and SpatialBundle][10394]
* [Reexport `wgpu::Maintain`][10461]
* [Use a consistent scale factor and resolution in stress tests][10474]
* [Ignore inactive cameras][10543]
* [Add shader_material_2d example][10542]
* [More inactive camera checks][10555]
* [Fix post processing example to only run effect on camera with settings component][10560]
* [Make sure added image assets are checked in camera_system][10556]
* [Ensure ExtendedMaterial works with reflection (to enable bevy_egui_inspector integration)][10548]
* [Explicit color conversion methods][10321]
* [Re-export wgpu BufferAsyncError][10611]
* [Improve shader_material example][10547]
* [Non uniform transmission samples][10674]
* [Explain how `AmbientLight` is inserted and configured][10712]
* [Add wgpu_pass method to TrackedRenderPass][10722]
* [Add a `depth_bias` to `Material2d`][10683]
* [Use as_image_copy where possible][10733]
* [impl `From<Color>` for ClearColorConfig][10734]
* [Ensure instance_index push constant is always used in prepass.wgsl][10706]
* [Bind group layout entries][10224]
* [prepass vertex shader always outputs world position][10657]
* [Swap material and mesh bind groups][10485]
* [try_insert Aabbs][10801]
* [Fix prepass binding issues causing crashes when not all prepass bindings are used][10788]
* [Fix binding group in custom_material_2d.wgsl][10841]
* [Normalize only nonzero normals for mikktspace normal maps][10905]
* [light renderlayers][10742]
* [Explain how RegularPolygon mesh is generated][10927]
* [Fix Mesh2d normals on webgl][10967]
* [Update to wgpu 0.18][10266]
* [Fix typo in docs for `ViewVisibility`][10979]
* [Add docs to bevy_sprite a little][10947]
* [Fix BindingType import warning][10818]
* [Update texture_atlas example with different padding and sampling][10073]
* [Update AABB when Sprite component changes in calculate_bounds_2d()][11016]
* [OrthographicProjection.scaling_mode is not just for resize][11024]
* [Derive `Debug` for `BloomCompositeMode`][11041]
* [Document None conditions on compute_aabb][11051]
* [Replace calculation with function call][11077]
* [Register Camera types.][11069]
* [Add example for pixel-perfect grid snapping in 2D][8112]
* [Misc cleanup][11134]
* [Keep track of when a texture is first cleared][10325]
* [Fix Mesh::ATTRIBUTE_UV_0 documentation][11110]
* [Do not load prepass normals for transmissive materials][11140]
* [Export tonemapping_pipeline_key (2d), alpha_mode_pipeline_key][11166]
* [Simplify examples/3d/orthographic][11045]
* [Implement lightmaps.][10231]
* [Bump the vertex attribute index for prepass joints.][11191]
* [Fix: Gizmos crash due to the persistence policy being set to `Unload`. Change it to `Keep`][11192]
* [Usability methods for RenderTargets and image handles][10736]
* [Explain Camera physical size is in pixel][11189]
* [update Outdated comment][11243]
* [Revert "Implement minimal reflection probes. (#10057)"][11307]
* [Explain OrthographicProjection.scale][11023]
* [`Mul<f32>` for ScalingMode][11030]
* [Rustdoc examples for OrthographicProjection][11031]
* [Option to enable deterministic rendering][11248]
* [Fix ssao only sampling mip 0][11292]
* [Revert "Implement minimal reflection probes. (#10057)"][11307]
* [Sprite slicing and tiling][10588]
* [Approximate indirect specular occlusion][11152]
* [Texture Atlas rework][5103]
* [Exposure settings (adopted)][11347]
* [Remove Vec from GpuArrayBuffer][11368]
* [Make `DynamicUniformBuffer::push` accept an `&T` instead of `T`][11373]
* [Restore brightness in the remaining three examples after exposure PR][11389]
* [Customizable camera main texture usage][11412]
* [Cleanup deterministic example][11416]
* [Implement minimal reflection probes (fixed macOS, iOS, and Android).][11366]
* [optimize  batch_and_prepare_render_phase][11323]
* [add `storage_texture` option to as_bind_group macro][9943]
* [Revert rendering-related associated type name changes][11027]
* [Meshlet prep][11442]
* [Reuse sampler when creating cached bind groups][10610]
* [Add Animated Material example][11524]
* [Update to wgpu 0.19 and raw-window-handle 0.6][11280]
* [Fix bug where Sprite::rect was ignored][11480]
* [Added documentation explaining the difference between lumens and luxes][11551]
* [Fix infinite asset preparation due to undrained AssetEvent events][11383]
* [Workaround for ICE in the DXC shader compiler in debug builds with an `EnvironmentMapLight`][11487]
* [Refactor tonemapping example's image viewer update into two systems][11519]
* [Add `Mesh` transformation][11454]
* [Fix specular envmap in deferred][11534]
* [Add `Meshable` trait and implement meshing for 2D primitives][11431]
* [Optimize extract_clusters and prepare_clusters systems][10633]
* [RenderAssetPersistencePolicy → RenderAssetUsages][11399]
* [RenderGraph Labelization][10644]
* [Gate diffuse and specular transmission behind shader defs][11627]
* [Add helpers for translate, rotate, and scale operations - Mesh][11675]
* [CameraProjection::compute_frustum][11139]
* [Added formats to `MeshVertexAttribute` constant's docstrings][11705]
* [Async pipeline compilation][10812]
* [sort by pipeline then mesh for non transparent passes for massively better batching][11671]
* [Added remove_indices to Mesh][11733]
* [Implement irradiance volumes.][10268]
* [Mesh insert indices][11745]
* [Don't try to create a uniform buffer for light probes if there are no views.][11751]
* [Properly check for result when getting pipeline in Msaa][11758]
* [wait for render app when main world is dropped][11737]
* [Deprecate shapes in `bevy_render::mesh::shape`][11773]
* [Cache the QueryState used to drop swapchain TextureViews][11781]
* [Multithreaded render command encoding][9172]
* [Fix `Quad` deprecation message mentioning a type that doesn't exist][11798]
* [Stop extracting mesh entities to the render world.][11803]
* [Stop copying the light probe array to the stack in the shader.][11805]
* [Add `Mesh::merge`][11456]
* [Call a TextureAtlasLayout a layout and not an atlas][11783]
* [fix shadow batching][11645]
* [Change light defaults & fix light examples][11581]
* [New Exposure and Lighting Defaults (and calibrate examples)][11868]
* [Change MeshUniform::new() to be public.][11880]
* [Rename Core Render Graph Labels][11882]
* [Support optional clear color in ColorAttachment.][11884]
* [irradiance: use textureSampleLevel for WebGPU support][11893]
* [Add configuration for async pipeline creation on RenderPlugin][11847]
* [Derive Reflect for Exposure][11907]
* [Add `MeshPipelineKey::LIGHTMAPPED` as applicable during the shadow map pass.][11910]
* [Irradiance volume example tweaks][11911]
* [Disable irradiance volumes on WebGL and WebGPU.][11909]
* [Remove `naga_oil` dependency from `bevy_pbr`][11914]

### A-Scenes

* [Re-export `ron` in `bevy_scene`][10529]
* [Fix load scene example to use proper serialization format for rotation field][10638]
* [Mention DynamicSceneBuilder in doc comment][10780]
* [Mention DynamicSceneBuilder in scene example][10441]
* [Implement Std traits for `SceneInstanceReady`][11003]
* [Change SceneSpawner::spawn_dynamic_sync to return InstanceID][11239]
* [Fix scene example][11289]
* [Send `SceneInstanceReady` only once per scene][11002]

### A-Utils

* [bevy_utils: Export `generate_composite_uuid` utility function][10496]
* [Save an instruction in `EntityHasher`][10648]
* [Add SystemTime to bevy_utils][11054]
* [Re-export smallvec crate from bevy_utils][11006]
* [Enable cloning EntityHashMap and PreHashMap][11178]
* [impl `Borrow` and `AsRef` for `CowArc`][11616]
* [Hash stability guarantees][11690]
* [Deprecating hashbrown reexports][11721]
* [Update ahash to 0.8.7][11785]

### A-UI

* [ui material: fix right border width][10421]
* [Add PartialEq to Anchor][10424]
* [UI Material: each material should have its own buffer][10422]
* [UI Materials: ignore entities with a `BackgroundColor` component][10434]
* [Fix panic when using image in UiMaterial][10591]
* [Make clipped areas of UI nodes non-interactive][10454]
* [Fix typo in resolve_outlines_system][10730]
* [Clip outlines by the node's own clipping rect, not the parent's.][10922]
* [Give UI nodes with `Display::None` an empty clipping rect][10942]
* [Create serialize feature for bevy_ui][11188]
* [Made the remaining types from bevy_ui to reflect the Default trait if…][11199]
* [Camera-driven UI][10559]
* [fix occasional crash moving ui root nodes][11371]
* [Fix panic on Text UI without Cameras][11405]
* [Allow user to choose default ui camera][11436]
* [Rustdoc links in bevy_ui][11555]
* [Avoid unconditionally unwrapping the Result - UI Stack System][11575]

### A-Assets + A-Diagnostics

* [Fix asset loader registration warning][11870]

### A-Audio + A-Reflection

* [Reflect and register audio-related types][10484]

### A-Audio

* [Add `VolumeLevel::ZERO`][10608]
* [Deduplicate systems in bevy_audio][10906]
* [Non-Intrusive refactor of `play_queued_audio_system()`][10910]
* [docs: AnimationPlayer::play doesn't have transition_duration arg][10970]
* [Remove the ability to ignore global volume][11092]
* [Optional override for global spatial scale][10419]

### A-Tasks

* [Make FakeTask public on singlethreaded context][10517]
* [Re-export `futures_lite` in `bevy_tasks`][10670]
* [bump bevy_tasks futures-lite to 2.0.1][10675]
* [Fix wrong transmuted type in `TaskPool::scope_with_executor_inner`][11455]
* [Use `std::thread::sleep` instead of spin-waiting in the async_compute example][11856]

### A-ECS

* [Use `EntityHashMap` for `EntityMapper`][10415]
* [Allow registering boxed systems][10378]
* [Remove unnecessary if statement in scheduler][10446]
* [Optimize `Entity::eq`][10519]
* [Add 'World::run_system_with_input' function + allow `World::run_system` to get system output][10380]
* [Update `Event` send methods to return `EventId`][10551]
* [Some docs for IntoSystemSet][10563]
* [Link to `In` in `pipe` documentation][10596]
* [Optimise `Entity` with repr align & manual `PartialOrd`/`Ord`][10558]
* [Allow #[derive(Bundle)] on tuple structs (take 3)][10561]
* [Add an `Entry` api to `EntityWorldMut`.][10650]
* [Make impl block for RemovedSystem generic][10651]
* [Append commands][10400]
* [Rustdoc example for Ref][10682]
* [Link to `Main` schedule docs from other schedules][10691]
* [Warn that Added/Changed filters do not see deferred changes][10681]
* [Fix non-functional nondeterministic_system_order example][10719]
* [Copy over docs for `Condition` trait from PR #10718][10748]
* [Implement `Drop` for `CommandQueue`][10746]
* [Split WorldQuery into WorldQueryData and WorldQueryFilter][9918]
* [Make IntoSystemConfigs::into_configs public API (visible in docs)][10624]
* [Override QueryIter::fold to port Query::for_each perf gains to select Iterator combinators][6773]
* [Deprecate QueryState::for_each_unchecked][10815]
* [Clarifying Commands' purpose][10837]
* [Make ComponentId typed in Components][10770]
* [Reduced `TableRow` `as` Casting][10811]
* [Add `EntityCommands.retain` and `EntityWorldMut.retain`][10873]
* [Remove unnecessary ResMut in examples][10879]
* [Add a couple assertions for system types][10893]
* [Remove reference to default schedule][10918]
* [Improve `EntityWorldMut.remove`, `retain` and `despawn` docs by linking to more detail][10943]
* [Reorder fields in SystemSchedule][10764]
* [Rename `WorldQueryData` & `WorldQueryFilter` to `QueryData` & `QueryFilter`][10779]
* [Fix soundness of `UnsafeWorldCell` usage example][10941]
* [Actually check alignment in BlobVec test aligned_zst][10885]
* [Rename `Q` type parameter to `D` when referring to `WorldQueryData`][10782]
* [Allow the editing of startup schedules][10969]
* [Auto insert sync points][9822]
* [Simplify lifetimes in `QueryState` methods][10937]
* [Add is_resource_changed_by_id + is_resource_added_by_id][11012]
* [Rename some lifetimes (ResMut etc) for clarity][11021]
* [Add non-existent entity behavior to Has doc][11025]
* [Fix typo in docs for Has][11028]
* [Add insert_state to App.][11043]
* [Explain Changed, Added are not archetype filters][11049]
* [Add missing colon in `States` documentation][11064]
* [Explain EventWriter limits concurrency][11063]
* [Better doc for SystemName][11084]
* [impl ExclusiveSystemParam for WorldId][11164]
* [impl ExclusiveSystemParam for PhantomData][11153]
* [Remove little warn on bevy_ecs][11149]
* [Rename `ArchetypeEntity::entity` into `ArchetypeEntity::id`][11118]
* [Fixed Typo in the description of EntityMut][11103]
* [Implement Deref and DerefMut for In][11104]
* [impl ExclusiveSystemParam for SystemName][11163]
* [Print a warning for un-applied commands being dropped from a CommandQueue][11146]
* [Implement TypePath for EntityHash][11195]
* [Fix integer overflow in BlobVec::push for ZST][10799]
* [Fix integer overflow in BlobVec::reserve_exact][11234]
* [StateTransitionEvent][11089]
* [Restore support for running `fn` `EntityCommands` on entities that might be despawned][11107]
* [Remove apply_deferred example][11142]
* [Minimize small allocations by dropping the tick Vecs from Resources][11226]
* [Change Entity::generation from u32 to NonZeroU32 for niche optimization][9907]
* [fix B0003 example and update logs][11162]
* [Unified identifier for entities & relations][9797]
* [Simplify conditions][11316]
* [Add example using `State` in docs][11319]
* [Skip rehashing TypeIds][11268]
* [Make `TypeId::hash` more robust in case of upstream rustc changes][11334]
* [Fix doc of [`Schedules`] to mention exclusion of current schedule.][11360]
* [Dynamic queries and builder API][9774]
* [Remove duplicate `#[automatically_derived]` in ECS macro][11388]
* [Get Change Tick methods for Resources][11404]
* [Optional state][11417]
* [Double the capacity when BlobVec is full][11167]
* [document which lifetime is needed for systemparam derive][11321]
* [refactor: Simplify lifetimes for `Commands` and related types][11445]
* [Implement `Debug` for `CommandQueue`][11444]
* [Fix typo in comment][11486]
* [Rename Schedule::name to Schedule::label][11531]
* [Exclusive systems can now be used for one-shot systems][11560]
* [added ability to get `Res<T>` from `World` with `World::get_resource_ref`][11561]
* [bevy_ecs: Add doc example for par_iter_mut (#11311)][11499]
* [Add an example demonstrating how to send and receive events in the same system][11574]
* [Add a doctest example for EntityMapper][11583]
* [Rephrase comment about `Local<T>` for clarity. (Adopted)][11129]
* [Use batch spawn in benchmarks][11611]
* [Fix bug where events are not being dropped][11528]
* [Make Archetypes.archetype_component_count private][10774]
* [Deprecated Various Component Methods from `Query` and `QueryState`][9920]
* [`System::type_id` Consistency][11728]
* [Typo in [`ScheduleLabel`] derive macro][11764]
* [Mention Resource where missing from component/resource related type docs][11769]
* [Expose query accesses][11700]
* [Add a method for detecting changes within a certain scope][11687]
* [Fix double indirection when applying command queues][11822]
* [Immediately poll the executor once before spawning it as a task][11801]
* [Fix small docs misformat in `BundleInfo::new`][11855]
* [`FilteredEntityRef` conversions][11838]

### A-Rendering + A-Animation

* [TextureAtlasBuilder now respects insertion order][11474]
* [normalize joint weights][10539]

### A-ECS + A-Meta

* [resolve all internal ambiguities][10411]

### A-Rendering + A-UI

* [Provide GlobalsUniform in UiMaterial shaders][10739]
* [Include UI node size in the vertex inputs for UiMaterial.][11722]
* [UI Texture 9 slice][11600]
* [Optional ImageScaleMode][11780]

### A-Math

* [Define a basic set of Primitives][10466]
* [Add and impl Primitives][10580]
* [Add winding order for `Triangle2d`][10620]
* [Use minor and major radii for `Torus` primitive shape][10643]
* [Remove `From` implementations from the direction types][10857]
* [Impl `TryFrom` vector for directions and add `InvalidDirectionError`][10884]
* [Add `Direction2d::from_xy` and `Direction3d::from_xyz`][10882]
* [Implement `Neg` for `Direction2d` and `Direction3d`][11179]
* [Add constants for `Direction2d` and `Direction3d`][11180]
* [Add `approx` feature to `bevy_math`][11176]
* [Add `libm` feature to `bevy_math`][11238]
* [Add `new_and_length` method to `Direction2d` and `Direction3d`][11172]
* [Update `glam`, `encase` and `hexasphere`][11082]
* [Implement bounding volume types][10946]
* [Remove `Default` impl for `CubicCurve`][11335]
* [Implement bounding volumes for primitive shapes][11336]
* [Improve `Rectangle` and `Cuboid` consistency][11434]
* [Change `Ellipse` representation and improve helpers][11435]
* [Add `Aabb2d::new` and `Aabb3d::new` constructors][11433]
* [Add geometric primitives to `bevy_math::prelude`][11432]
* [Direction: Rename `from_normalized` to `new_unchecked`][11425]
* [Implement bounding volume intersections][11439]
* [Add `new` constructors for `Circle` and `Sphere`][11526]
* [Derive PartialEq, Serialize, Deserialize and Reflect on primitives][11514]
* [Document RegularPolygon][11017]
* [Add RayTest2d and RayTest3d][11310]
* [Add more constructors and math helpers for primitive shapes][10632]
* [Add `Capsule2d` primitive][11585]
* [Add volume cast intersection tests][11586]
* [Add Clone to intersection test types][11640]
* [Implement `approx` traits for direction types][11650]
* [Support rotating `Direction3d` by `Quat`][11649]
* [Rename RayTest to RayCast][11635]
* [Add example for bounding volumes and intersection tests][11666]
* [Dedicated primitive example][11697]
* [Un-hardcode positions and colors in `2d_shapes` example][11867]

### A-Build-System

* [check for all-features with cargo-deny][10544]
* [Bump actions/github-script from 6 to 7][10653]
* [Add doc_markdown clippy linting config to cargo workspace][10640]
* [Enable `clippy::undocumented_unsafe_blocks` warning across the workspace][10646]
* [Remove trailing whitespace][10723]
* [Move remaining clippy lint definitions to Cargo.toml][10672]
* [Add `clippy::manual_let_else` at warn level to lints][10684]
* [Remove unused import][10963]
* [Rename functions and variables to follow code style][10961]
* [Remove unused variable][10966]
* [add libxkbcommon-x11-0 to the default linux dependencies][11060]
* [fix patches for example showcase after winit update][11058]
* [finish cleaning up dependency bans job][11059]
* [Bump actions/upload-artifact from 2 to 4][11014]
* [Publish dev-docs with GitHub Pages artifacts (2nd attempt)][10892]
* [example showcase patches: use default instead of game mode for desktop][11250]
* [Bump toml_edit in build-template-pages tool][11342]
* [Miri is failing on latest nightly: pin nightly to last known working version][11421]
* [Bump dev-docs pages actions][11418]
* [Unpin nightly for miri][11462]
* [documentation in CI: remove lock file][11507]
* [Bump actions/cache from 3 to 4][11469]
* [simplify animated_material example][11576]
* [example showcase: fix window resized patch][11596]
* [run examples on macOS to validate PRs][11630]
* [Inverse `missing_docs` logic][11676]
* [Bump peter-evans/create-pull-request from 5 to 6][11712]

### A-Gizmos

* [Fix float precision issue in the gizmo shader][10408]
* [Gizmo Arrows][10550]
* [Move Circle Gizmos to Their Own File][10631]
* [move gizmo arcs to their own file][10660]
* [Warn when bevy_sprite and bevy_pbr are not enabled with bevy_gizmos][11296]
* [Multiple Configurations for Gizmos][10342]
* [Fix gizmos app new panic][11420]
* [Use Direction3d for gizmos.circle normal][11422]
* [Implement Arc3D for Gizmos][11540]
* [Insert Gizmos config instead of Init][11580]
* [Drawing Primitives with Gizmos][11072]
* [fix(primitives): fix polygon gizmo rendering bug][11699]
* [Fix global wireframe behavior not being applied on new meshes][11792]
* [Overwrite gizmo group in `insert_gizmo_group`][11860]

### A-Rendering + A-Math

* [Split `Ray` into `Ray2d` and `Ray3d` and simplify plane construction][10856]
* [Introduce AspectRatio struct][10368]
* [Implement meshing for `Capsule2d`][11639]
* [Implement `Meshable` for some 3D primitives][11688]

### A-Core

* [Derive `Debug` for `Framecount`][11573]
* [Don't unconditionally enable bevy_render or bevy_assets if multi-threaded feature is enabled][11726]

### A-Windowing

* [Some explanations for Window component][10714]
* [don't run update before window creation in winit][10741]
* [add new event `WindowOccluded` from winit][10735]
* [Add comment about scale factor in `WindowMode`][10872]
* [Refactor function `update_accessibility_nodes`][10911]
* [Change `Window` scale factor to f32 (adopted)][10897]
* [Reexport winit::platform::android::activity::* in bevy_winit][11011]
* [Update winit dependency to 0.29][10702]
* [Remove CanvasParentResizePlugin][11057]
* [Use `WindowBuilder::with_append()` to append canvas][11065]
* [Fix perf degradation on web builds][11227]
* [mobile and webgpu: trigger redraw request when needed and improve window creation][11245]
* [Remove unnecessary unsafe impls for WinitWindows on Wasm][11270]
* [Fix Reactive and ReactiveLowPower update modes][11325]
* [Change `WinitPlugin` defaults to limit game update rate when window is not visible (for real this time)][11305]
* [Cleanup bevy winit][11489]
* [Add `name` to `bevy::window::Window`][7650]
* [Avoid unwraps in winit fullscreen handling code][11735]

### A-UI + A-Transform + A-Text

* [UI text rotation and scaling fix][11326]

### A-Animation

* [Fix animations resetting after repeat count][10540]
* [Add Debug, PartialEq and Eq derives to bevy_animation.][10562]
* [support all types of animation interpolation from gltf][10755]
* [Clean up code to find the current keyframe][11306]
* [Skip alloc when updating animation path cache][11330]
* [Replace the `cubic_spline_interpolation` macro with a generic function][11605]
* [Animatable trait for interpolation and blending][4482]

### A-ECS + A-Pointers

* [Replace pointer castings (`as`) by their API equivalent][11818]

### A-ECS + A-Utils

* [Add helper macro's for logging only once][10808]
* [Move `EntityHash` related types into `bevy_ecs`][11498]

### A-Reflection

* [Fix issue with `Option` serialization][10705]
* [fix `insert_reflect` panic caused by `clone_value`][10627]
* [Remove pointless trait implementation exports in `bevy_reflect`][10771]
* [Fix nested generics in Reflect derive][10791]
* [Fix debug printing for dynamic types][10740]
* [reflect: maximally relax `TypePath` bounds][11037]
* [Use `static_assertions` to check for trait impls][11407]
* [Add `ReflectFromWorld` and replace the `FromWorld` requirement on `ReflectComponent` and `ReflectBundle` with `FromReflect`][9623]
* [Fix reflected serialization/deserialization on `Name` component][11447]
* [Add Reflection for Wrapping/Saturating types][11397]
* [Remove TypeUuid][11497]
* [Fix warnings in bevy_reflect][11556]
* [bevy_reflect: Type parameter bounds][9046]
* [bevy_reflect: Split `#[reflect(where)]`][11597]
* [reflection: replace `impl_reflect_struct` with `impl_reflect`][11437]
* [Add the ability to manually create ParsedPaths (+ cleanup)][11029]
* [bevy_reflect: Reflect `&'static str`][11686]
* [Improve DynamicStruct::insert][11068]
* [Missing registrations][11736]
* [Add `ReflectKind`][11664]
* [doc(bevy_reflect): add note about trait bounds on `impl_type_path`][11810]
* [bevy_reflect_derive: Clean up attribute logic][11777]

### A-ECS + A-Tasks

* [Async channel v2][10692]

### A-Pointers

* [Remove a ptr-to-int cast in `CommandQueue::apply`][10475]
* [Fix memory leak in dynamic ECS example][11461]
* [bevy_ptr: fix `unsafe_op_in_unsafe_fn` lint][11610]

### A-ECS + A-Reflection

* [Adding derive Reflect for tick structs][11641]

### A-Reflection + A-Gizmos

* [`#[derive(Reflect)]` on `GizmoConfig`][10483]
* [Register `WireframeColor`][10486]

### No area label

* [Fix intra-doc link warnings][10445]
* [Fix minor issues with custom_asset example][10337]
* [Prepend `root_path` to meta path in HttpWasmAssetReader][10527]
* [support required features in wasm examples showcase][10577]
* [examples showcase: use patches instead of sed for wasm hacks][10601]
* [Add [lints] table, fix  adding `#![allow(clippy::type_complexity)]` everywhere][10011]
* [Bumps async crates requirements to latest major version][10370]
* [delete methods deprecated in 0.12][10693]
* [Ran `cargo fmt` on `benches` crate][10758]
* [Remove unnecessary path prefixes][10749]
* [Fix typos in safety comment][10827]
* [Substitute `get(0)` with `first()`][10847]
* [Remove identity `map` calls][10848]
* [Renamed Accessibility plugin to AccessKitPlugin in bevy_winit][10914]
* [Reorder impl to be the same as the trait][11076]
* [Replace deprecated elements][10999]
* [Remove unnecessary parentheses][10990]
* [Replace deprecated elements][10999]
* [Simplify equality assertions][10988]
* [Add Solus package requirements to linux_dependencies.md][10996]
* [Update base64 requirement from 0.13.0 to 0.21.5][10336]
* [Update sysinfo version to 0.30.0][11071]
* [Remove unnecessary parens][11075]
* [Reorder impl to be the same as the trait][11076]
* [Fix ci xvfb][11143]
* [Replace or document ignored doctests][11040]
* [Add static assertions to bevy_utils for compile-time checks][11182]
* [Fix missed explicit conversions in examples][11261]
* [Remove unused event-listener dependency][11269]
* [Fixed typo in generate_custom_mesh.rs example][11293]
* [Extract examples `CameraController` into a module][11338]
* [Use EntityHashMap whenever possible][11353]
* [Fix link to plugin guidelines][11379]
* [[doc] Fix typo and formatting in CONTRIBUTING.md][11381]
* [add a required feature for shader_material_glsl][11440]
* [Update ruzstd requirement from 0.4.0 to 0.5.0][11467]
* [Tweak gamepad viewer example style][11484]
* [Add `.toml` extension to `.cargo/config_fast_builds`][11506]
* [Add README to benches][11508]
* [Fix panic in examples using argh on the web][11513]
* [Fix cyclic dep][11523]
* [Enable the `unsafe_op_in_unsafe_fn` lint][11591]
* [Update erased-serde requirement from 0.3 to 0.4][11599]
* [Fix example send_and_receive_events][11615]
* [Update cursor.rs][11617]
* [Use the `Continuous` update mode in stress tests when unfocused][11652]
* [Don't auto insert on the extract schedule][11669]
* [Update tracing-tracy requirement from 0.10.4 to 0.11.0 and tracy-client requirement from 0.16.4 to 0.17.0][11678]
* [Use TypeIdMap whenever possible][11684]
* [Fix a few typos in error docs][11709]
* [bevy_render: use the non-send marker from bevy_core][11725]
* [Ignore screenshots generated by `screenshot` example][11797]
* [Docs reflect that `RemovalDetection` also yields despawned entities][11795]
* [bevy_dynamic_plugin: fix `unsafe_op_in_unsafe_fn` lint][11622]
* [Replace `crossbeam::scope` reference with `thread::scope` in docs][11832]
* [Use question mark operator when possible][11865]
* [Fix a few Clippy lints][11866]
* [WebGPU: fix web-sys version][11894]
* [Remove map_flatten from linting rules][11913]
* [Fix duplicate `encase_derive_impl` dependency][11915]

### A-App

* [add regression test for #10385/#10389][10609]
* [Fix typos plugin.rs][11193]
* [Expressively define plugins using functions][11080]
* [Mark `DynamicPluginLoadError` internal error types as source][11618]

### A-Diagnostics

* [Fix Line for tracy version][10663]
* [Some doc to bevy_diagnostic][11020]
* [Print to stderr from panic handler in LogPlugin][11170]
* [Add ability to panic to logs example][11171]
* [Make sure tracy deps conform to compatibility table][11331]
* [Describe purpose of bevy_diagnostic][11327]
* [Add support for updating the tracing subscriber in LogPlugin][10822]
* [Replace `DiagnosticId` by `DiagnosticPath`][9266]
* [fix link to tracy][11521]
* [Fix sysinfo CPU brand output][11850]

### A-Rendering + A-ECS

* [Explain where rendering is][11018]

### A-Assets + A-Math

* [Use glam for computing gLTF node transform][11361]

[4482]: https://github.com/bevyengine/bevy/pull/4482
[5103]: https://github.com/bevyengine/bevy/pull/5103
[6773]: https://github.com/bevyengine/bevy/pull/6773
[7650]: https://github.com/bevyengine/bevy/pull/7650
[8112]: https://github.com/bevyengine/bevy/pull/8112
[8453]: https://github.com/bevyengine/bevy/pull/8453
[9046]: https://github.com/bevyengine/bevy/pull/9046
[9172]: https://github.com/bevyengine/bevy/pull/9172
[9266]: https://github.com/bevyengine/bevy/pull/9266
[9623]: https://github.com/bevyengine/bevy/pull/9623
[9774]: https://github.com/bevyengine/bevy/pull/9774
[9797]: https://github.com/bevyengine/bevy/pull/9797
[9822]: https://github.com/bevyengine/bevy/pull/9822
[9907]: https://github.com/bevyengine/bevy/pull/9907
[9918]: https://github.com/bevyengine/bevy/pull/9918
[9920]: https://github.com/bevyengine/bevy/pull/9920
[9943]: https://github.com/bevyengine/bevy/pull/9943
[10011]: https://github.com/bevyengine/bevy/pull/10011
[10073]: https://github.com/bevyengine/bevy/pull/10073
[10077]: https://github.com/bevyengine/bevy/pull/10077
[10153]: https://github.com/bevyengine/bevy/pull/10153
[10224]: https://github.com/bevyengine/bevy/pull/10224
[10231]: https://github.com/bevyengine/bevy/pull/10231
[10266]: https://github.com/bevyengine/bevy/pull/10266
[10268]: https://github.com/bevyengine/bevy/pull/10268
[10321]: https://github.com/bevyengine/bevy/pull/10321
[10325]: https://github.com/bevyengine/bevy/pull/10325
[10336]: https://github.com/bevyengine/bevy/pull/10336
[10337]: https://github.com/bevyengine/bevy/pull/10337
[10342]: https://github.com/bevyengine/bevy/pull/10342
[10368]: https://github.com/bevyengine/bevy/pull/10368
[10369]: https://github.com/bevyengine/bevy/pull/10369
[10370]: https://github.com/bevyengine/bevy/pull/10370
[10376]: https://github.com/bevyengine/bevy/pull/10376
[10378]: https://github.com/bevyengine/bevy/pull/10378
[10380]: https://github.com/bevyengine/bevy/pull/10380
[10383]: https://github.com/bevyengine/bevy/pull/10383
[10389]: https://github.com/bevyengine/bevy/pull/10389
[10394]: https://github.com/bevyengine/bevy/pull/10394
[10400]: https://github.com/bevyengine/bevy/pull/10400
[10408]: https://github.com/bevyengine/bevy/pull/10408
[10410]: https://github.com/bevyengine/bevy/pull/10410
[10411]: https://github.com/bevyengine/bevy/pull/10411
[10415]: https://github.com/bevyengine/bevy/pull/10415
[10419]: https://github.com/bevyengine/bevy/pull/10419
[10421]: https://github.com/bevyengine/bevy/pull/10421
[10422]: https://github.com/bevyengine/bevy/pull/10422
[10423]: https://github.com/bevyengine/bevy/pull/10423
[10424]: https://github.com/bevyengine/bevy/pull/10424
[10434]: https://github.com/bevyengine/bevy/pull/10434
[10441]: https://github.com/bevyengine/bevy/pull/10441
[10442]: https://github.com/bevyengine/bevy/pull/10442
[10445]: https://github.com/bevyengine/bevy/pull/10445
[10446]: https://github.com/bevyengine/bevy/pull/10446
[10448]: https://github.com/bevyengine/bevy/pull/10448
[10450]: https://github.com/bevyengine/bevy/pull/10450
[10452]: https://github.com/bevyengine/bevy/pull/10452
[10453]: https://github.com/bevyengine/bevy/pull/10453
[10454]: https://github.com/bevyengine/bevy/pull/10454
[10461]: https://github.com/bevyengine/bevy/pull/10461
[10466]: https://github.com/bevyengine/bevy/pull/10466
[10474]: https://github.com/bevyengine/bevy/pull/10474
[10475]: https://github.com/bevyengine/bevy/pull/10475
[10483]: https://github.com/bevyengine/bevy/pull/10483
[10484]: https://github.com/bevyengine/bevy/pull/10484
[10485]: https://github.com/bevyengine/bevy/pull/10485
[10486]: https://github.com/bevyengine/bevy/pull/10486
[10493]: https://github.com/bevyengine/bevy/pull/10493
[10494]: https://github.com/bevyengine/bevy/pull/10494
[10496]: https://github.com/bevyengine/bevy/pull/10496
[10502]: https://github.com/bevyengine/bevy/pull/10502
[10514]: https://github.com/bevyengine/bevy/pull/10514
[10516]: https://github.com/bevyengine/bevy/pull/10516
[10517]: https://github.com/bevyengine/bevy/pull/10517
[10519]: https://github.com/bevyengine/bevy/pull/10519
[10520]: https://github.com/bevyengine/bevy/pull/10520
[10523]: https://github.com/bevyengine/bevy/pull/10523
[10526]: https://github.com/bevyengine/bevy/pull/10526
[10527]: https://github.com/bevyengine/bevy/pull/10527
[10529]: https://github.com/bevyengine/bevy/pull/10529
[10534]: https://github.com/bevyengine/bevy/pull/10534
[10537]: https://github.com/bevyengine/bevy/pull/10537
[10539]: https://github.com/bevyengine/bevy/pull/10539
[10540]: https://github.com/bevyengine/bevy/pull/10540
[10542]: https://github.com/bevyengine/bevy/pull/10542
[10543]: https://github.com/bevyengine/bevy/pull/10543
[10544]: https://github.com/bevyengine/bevy/pull/10544
[10547]: https://github.com/bevyengine/bevy/pull/10547
[10548]: https://github.com/bevyengine/bevy/pull/10548
[10550]: https://github.com/bevyengine/bevy/pull/10550
[10551]: https://github.com/bevyengine/bevy/pull/10551
[10555]: https://github.com/bevyengine/bevy/pull/10555
[10556]: https://github.com/bevyengine/bevy/pull/10556
[10558]: https://github.com/bevyengine/bevy/pull/10558
[10559]: https://github.com/bevyengine/bevy/pull/10559
[10560]: https://github.com/bevyengine/bevy/pull/10560
[10561]: https://github.com/bevyengine/bevy/pull/10561
[10562]: https://github.com/bevyengine/bevy/pull/10562
[10563]: https://github.com/bevyengine/bevy/pull/10563
[10564]: https://github.com/bevyengine/bevy/pull/10564
[10565]: https://github.com/bevyengine/bevy/pull/10565
[10574]: https://github.com/bevyengine/bevy/pull/10574
[10577]: https://github.com/bevyengine/bevy/pull/10577
[10578]: https://github.com/bevyengine/bevy/pull/10578
[10580]: https://github.com/bevyengine/bevy/pull/10580
[10585]: https://github.com/bevyengine/bevy/pull/10585
[10588]: https://github.com/bevyengine/bevy/pull/10588
[10589]: https://github.com/bevyengine/bevy/pull/10589
[10591]: https://github.com/bevyengine/bevy/pull/10591
[10592]: https://github.com/bevyengine/bevy/pull/10592
[10594]: https://github.com/bevyengine/bevy/pull/10594
[10596]: https://github.com/bevyengine/bevy/pull/10596
[10598]: https://github.com/bevyengine/bevy/pull/10598
[10601]: https://github.com/bevyengine/bevy/pull/10601
[10608]: https://github.com/bevyengine/bevy/pull/10608
[10609]: https://github.com/bevyengine/bevy/pull/10609
[10610]: https://github.com/bevyengine/bevy/pull/10610
[10611]: https://github.com/bevyengine/bevy/pull/10611
[10614]: https://github.com/bevyengine/bevy/pull/10614
[10619]: https://github.com/bevyengine/bevy/pull/10619
[10620]: https://github.com/bevyengine/bevy/pull/10620
[10623]: https://github.com/bevyengine/bevy/pull/10623
[10624]: https://github.com/bevyengine/bevy/pull/10624
[10627]: https://github.com/bevyengine/bevy/pull/10627
[10628]: https://github.com/bevyengine/bevy/pull/10628
[10631]: https://github.com/bevyengine/bevy/pull/10631
[10632]: https://github.com/bevyengine/bevy/pull/10632
[10633]: https://github.com/bevyengine/bevy/pull/10633
[10638]: https://github.com/bevyengine/bevy/pull/10638
[10640]: https://github.com/bevyengine/bevy/pull/10640
[10643]: https://github.com/bevyengine/bevy/pull/10643
[10644]: https://github.com/bevyengine/bevy/pull/10644
[10646]: https://github.com/bevyengine/bevy/pull/10646
[10648]: https://github.com/bevyengine/bevy/pull/10648
[10650]: https://github.com/bevyengine/bevy/pull/10650
[10651]: https://github.com/bevyengine/bevy/pull/10651
[10653]: https://github.com/bevyengine/bevy/pull/10653
[10657]: https://github.com/bevyengine/bevy/pull/10657
[10660]: https://github.com/bevyengine/bevy/pull/10660
[10663]: https://github.com/bevyengine/bevy/pull/10663
[10670]: https://github.com/bevyengine/bevy/pull/10670
[10672]: https://github.com/bevyengine/bevy/pull/10672
[10674]: https://github.com/bevyengine/bevy/pull/10674
[10675]: https://github.com/bevyengine/bevy/pull/10675
[10681]: https://github.com/bevyengine/bevy/pull/10681
[10682]: https://github.com/bevyengine/bevy/pull/10682
[10683]: https://github.com/bevyengine/bevy/pull/10683
[10684]: https://github.com/bevyengine/bevy/pull/10684
[10691]: https://github.com/bevyengine/bevy/pull/10691
[10692]: https://github.com/bevyengine/bevy/pull/10692
[10693]: https://github.com/bevyengine/bevy/pull/10693
[10698]: https://github.com/bevyengine/bevy/pull/10698
[10699]: https://github.com/bevyengine/bevy/pull/10699
[10702]: https://github.com/bevyengine/bevy/pull/10702
[10705]: https://github.com/bevyengine/bevy/pull/10705
[10706]: https://github.com/bevyengine/bevy/pull/10706
[10712]: https://github.com/bevyengine/bevy/pull/10712
[10714]: https://github.com/bevyengine/bevy/pull/10714
[10719]: https://github.com/bevyengine/bevy/pull/10719
[10721]: https://github.com/bevyengine/bevy/pull/10721
[10722]: https://github.com/bevyengine/bevy/pull/10722
[10723]: https://github.com/bevyengine/bevy/pull/10723
[10730]: https://github.com/bevyengine/bevy/pull/10730
[10733]: https://github.com/bevyengine/bevy/pull/10733
[10734]: https://github.com/bevyengine/bevy/pull/10734
[10735]: https://github.com/bevyengine/bevy/pull/10735
[10736]: https://github.com/bevyengine/bevy/pull/10736
[10739]: https://github.com/bevyengine/bevy/pull/10739
[10740]: https://github.com/bevyengine/bevy/pull/10740
[10741]: https://github.com/bevyengine/bevy/pull/10741
[10742]: https://github.com/bevyengine/bevy/pull/10742
[10745]: https://github.com/bevyengine/bevy/pull/10745
[10746]: https://github.com/bevyengine/bevy/pull/10746
[10748]: https://github.com/bevyengine/bevy/pull/10748
[10749]: https://github.com/bevyengine/bevy/pull/10749
[10755]: https://github.com/bevyengine/bevy/pull/10755
[10758]: https://github.com/bevyengine/bevy/pull/10758
[10764]: https://github.com/bevyengine/bevy/pull/10764
[10770]: https://github.com/bevyengine/bevy/pull/10770
[10771]: https://github.com/bevyengine/bevy/pull/10771
[10774]: https://github.com/bevyengine/bevy/pull/10774
[10779]: https://github.com/bevyengine/bevy/pull/10779
[10780]: https://github.com/bevyengine/bevy/pull/10780
[10782]: https://github.com/bevyengine/bevy/pull/10782
[10785]: https://github.com/bevyengine/bevy/pull/10785
[10787]: https://github.com/bevyengine/bevy/pull/10787
[10788]: https://github.com/bevyengine/bevy/pull/10788
[10791]: https://github.com/bevyengine/bevy/pull/10791
[10799]: https://github.com/bevyengine/bevy/pull/10799
[10801]: https://github.com/bevyengine/bevy/pull/10801
[10804]: https://github.com/bevyengine/bevy/pull/10804
[10808]: https://github.com/bevyengine/bevy/pull/10808
[10811]: https://github.com/bevyengine/bevy/pull/10811
[10812]: https://github.com/bevyengine/bevy/pull/10812
[10815]: https://github.com/bevyengine/bevy/pull/10815
[10818]: https://github.com/bevyengine/bevy/pull/10818
[10822]: https://github.com/bevyengine/bevy/pull/10822
[10827]: https://github.com/bevyengine/bevy/pull/10827
[10836]: https://github.com/bevyengine/bevy/pull/10836
[10837]: https://github.com/bevyengine/bevy/pull/10837
[10841]: https://github.com/bevyengine/bevy/pull/10841
[10847]: https://github.com/bevyengine/bevy/pull/10847
[10848]: https://github.com/bevyengine/bevy/pull/10848
[10854]: https://github.com/bevyengine/bevy/pull/10854
[10856]: https://github.com/bevyengine/bevy/pull/10856
[10857]: https://github.com/bevyengine/bevy/pull/10857
[10859]: https://github.com/bevyengine/bevy/pull/10859
[10872]: https://github.com/bevyengine/bevy/pull/10872
[10873]: https://github.com/bevyengine/bevy/pull/10873
[10878]: https://github.com/bevyengine/bevy/pull/10878
[10879]: https://github.com/bevyengine/bevy/pull/10879
[10882]: https://github.com/bevyengine/bevy/pull/10882
[10884]: https://github.com/bevyengine/bevy/pull/10884
[10885]: https://github.com/bevyengine/bevy/pull/10885
[10889]: https://github.com/bevyengine/bevy/pull/10889
[10892]: https://github.com/bevyengine/bevy/pull/10892
[10893]: https://github.com/bevyengine/bevy/pull/10893
[10897]: https://github.com/bevyengine/bevy/pull/10897
[10905]: https://github.com/bevyengine/bevy/pull/10905
[10906]: https://github.com/bevyengine/bevy/pull/10906
[10910]: https://github.com/bevyengine/bevy/pull/10910
[10911]: https://github.com/bevyengine/bevy/pull/10911
[10914]: https://github.com/bevyengine/bevy/pull/10914
[10918]: https://github.com/bevyengine/bevy/pull/10918
[10920]: https://github.com/bevyengine/bevy/pull/10920
[10922]: https://github.com/bevyengine/bevy/pull/10922
[10927]: https://github.com/bevyengine/bevy/pull/10927
[10930]: https://github.com/bevyengine/bevy/pull/10930
[10937]: https://github.com/bevyengine/bevy/pull/10937
[10939]: https://github.com/bevyengine/bevy/pull/10939
[10941]: https://github.com/bevyengine/bevy/pull/10941
[10942]: https://github.com/bevyengine/bevy/pull/10942
[10943]: https://github.com/bevyengine/bevy/pull/10943
[10946]: https://github.com/bevyengine/bevy/pull/10946
[10947]: https://github.com/bevyengine/bevy/pull/10947
[10951]: https://github.com/bevyengine/bevy/pull/10951
[10961]: https://github.com/bevyengine/bevy/pull/10961
[10962]: https://github.com/bevyengine/bevy/pull/10962
[10963]: https://github.com/bevyengine/bevy/pull/10963
[10965]: https://github.com/bevyengine/bevy/pull/10965
[10966]: https://github.com/bevyengine/bevy/pull/10966
[10967]: https://github.com/bevyengine/bevy/pull/10967
[10969]: https://github.com/bevyengine/bevy/pull/10969
[10970]: https://github.com/bevyengine/bevy/pull/10970
[10971]: https://github.com/bevyengine/bevy/pull/10971
[10977]: https://github.com/bevyengine/bevy/pull/10977
[10979]: https://github.com/bevyengine/bevy/pull/10979
[10980]: https://github.com/bevyengine/bevy/pull/10980
[10988]: https://github.com/bevyengine/bevy/pull/10988
[10989]: https://github.com/bevyengine/bevy/pull/10989
[10990]: https://github.com/bevyengine/bevy/pull/10990
[10996]: https://github.com/bevyengine/bevy/pull/10996
[10998]: https://github.com/bevyengine/bevy/pull/10998
[10999]: https://github.com/bevyengine/bevy/pull/10999
[11002]: https://github.com/bevyengine/bevy/pull/11002
[11003]: https://github.com/bevyengine/bevy/pull/11003
[11006]: https://github.com/bevyengine/bevy/pull/11006
[11010]: https://github.com/bevyengine/bevy/pull/11010
[11011]: https://github.com/bevyengine/bevy/pull/11011
[11012]: https://github.com/bevyengine/bevy/pull/11012
[11014]: https://github.com/bevyengine/bevy/pull/11014
[11016]: https://github.com/bevyengine/bevy/pull/11016
[11017]: https://github.com/bevyengine/bevy/pull/11017
[11018]: https://github.com/bevyengine/bevy/pull/11018
[11020]: https://github.com/bevyengine/bevy/pull/11020
[11021]: https://github.com/bevyengine/bevy/pull/11021
[11023]: https://github.com/bevyengine/bevy/pull/11023
[11024]: https://github.com/bevyengine/bevy/pull/11024
[11025]: https://github.com/bevyengine/bevy/pull/11025
[11027]: https://github.com/bevyengine/bevy/pull/11027
[11028]: https://github.com/bevyengine/bevy/pull/11028
[11029]: https://github.com/bevyengine/bevy/pull/11029
[11030]: https://github.com/bevyengine/bevy/pull/11030
[11031]: https://github.com/bevyengine/bevy/pull/11031
[11037]: https://github.com/bevyengine/bevy/pull/11037
[11040]: https://github.com/bevyengine/bevy/pull/11040
[11041]: https://github.com/bevyengine/bevy/pull/11041
[11043]: https://github.com/bevyengine/bevy/pull/11043
[11045]: https://github.com/bevyengine/bevy/pull/11045
[11049]: https://github.com/bevyengine/bevy/pull/11049
[11051]: https://github.com/bevyengine/bevy/pull/11051
[11053]: https://github.com/bevyengine/bevy/pull/11053
[11054]: https://github.com/bevyengine/bevy/pull/11054
[11057]: https://github.com/bevyengine/bevy/pull/11057
[11058]: https://github.com/bevyengine/bevy/pull/11058
[11059]: https://github.com/bevyengine/bevy/pull/11059
[11060]: https://github.com/bevyengine/bevy/pull/11060
[11063]: https://github.com/bevyengine/bevy/pull/11063
[11064]: https://github.com/bevyengine/bevy/pull/11064
[11065]: https://github.com/bevyengine/bevy/pull/11065
[11068]: https://github.com/bevyengine/bevy/pull/11068
[11069]: https://github.com/bevyengine/bevy/pull/11069
[11071]: https://github.com/bevyengine/bevy/pull/11071
[11072]: https://github.com/bevyengine/bevy/pull/11072
[11075]: https://github.com/bevyengine/bevy/pull/11075
[11076]: https://github.com/bevyengine/bevy/pull/11076
[11077]: https://github.com/bevyengine/bevy/pull/11077
[11080]: https://github.com/bevyengine/bevy/pull/11080
[11082]: https://github.com/bevyengine/bevy/pull/11082
[11084]: https://github.com/bevyengine/bevy/pull/11084
[11089]: https://github.com/bevyengine/bevy/pull/11089
[11092]: https://github.com/bevyengine/bevy/pull/11092
[11095]: https://github.com/bevyengine/bevy/pull/11095
[11103]: https://github.com/bevyengine/bevy/pull/11103
[11104]: https://github.com/bevyengine/bevy/pull/11104
[11106]: https://github.com/bevyengine/bevy/pull/11106
[11107]: https://github.com/bevyengine/bevy/pull/11107
[11110]: https://github.com/bevyengine/bevy/pull/11110
[11118]: https://github.com/bevyengine/bevy/pull/11118
[11128]: https://github.com/bevyengine/bevy/pull/11128
[11129]: https://github.com/bevyengine/bevy/pull/11129
[11134]: https://github.com/bevyengine/bevy/pull/11134
[11138]: https://github.com/bevyengine/bevy/pull/11138
[11139]: https://github.com/bevyengine/bevy/pull/11139
[11140]: https://github.com/bevyengine/bevy/pull/11140
[11142]: https://github.com/bevyengine/bevy/pull/11142
[11143]: https://github.com/bevyengine/bevy/pull/11143
[11146]: https://github.com/bevyengine/bevy/pull/11146
[11149]: https://github.com/bevyengine/bevy/pull/11149
[11152]: https://github.com/bevyengine/bevy/pull/11152
[11153]: https://github.com/bevyengine/bevy/pull/11153
[11162]: https://github.com/bevyengine/bevy/pull/11162
[11163]: https://github.com/bevyengine/bevy/pull/11163
[11164]: https://github.com/bevyengine/bevy/pull/11164
[11166]: https://github.com/bevyengine/bevy/pull/11166
[11167]: https://github.com/bevyengine/bevy/pull/11167
[11170]: https://github.com/bevyengine/bevy/pull/11170
[11171]: https://github.com/bevyengine/bevy/pull/11171
[11172]: https://github.com/bevyengine/bevy/pull/11172
[11176]: https://github.com/bevyengine/bevy/pull/11176
[11178]: https://github.com/bevyengine/bevy/pull/11178
[11179]: https://github.com/bevyengine/bevy/pull/11179
[11180]: https://github.com/bevyengine/bevy/pull/11180
[11182]: https://github.com/bevyengine/bevy/pull/11182
[11188]: https://github.com/bevyengine/bevy/pull/11188
[11189]: https://github.com/bevyengine/bevy/pull/11189
[11191]: https://github.com/bevyengine/bevy/pull/11191
[11192]: https://github.com/bevyengine/bevy/pull/11192
[11193]: https://github.com/bevyengine/bevy/pull/11193
[11194]: https://github.com/bevyengine/bevy/pull/11194
[11195]: https://github.com/bevyengine/bevy/pull/11195
[11199]: https://github.com/bevyengine/bevy/pull/11199
[11205]: https://github.com/bevyengine/bevy/pull/11205
[11206]: https://github.com/bevyengine/bevy/pull/11206
[11212]: https://github.com/bevyengine/bevy/pull/11212
[11218]: https://github.com/bevyengine/bevy/pull/11218
[11226]: https://github.com/bevyengine/bevy/pull/11226
[11227]: https://github.com/bevyengine/bevy/pull/11227
[11234]: https://github.com/bevyengine/bevy/pull/11234
[11238]: https://github.com/bevyengine/bevy/pull/11238
[11239]: https://github.com/bevyengine/bevy/pull/11239
[11242]: https://github.com/bevyengine/bevy/pull/11242
[11243]: https://github.com/bevyengine/bevy/pull/11243
[11245]: https://github.com/bevyengine/bevy/pull/11245
[11248]: https://github.com/bevyengine/bevy/pull/11248
[11250]: https://github.com/bevyengine/bevy/pull/11250
[11254]: https://github.com/bevyengine/bevy/pull/11254
[11260]: https://github.com/bevyengine/bevy/pull/11260
[11261]: https://github.com/bevyengine/bevy/pull/11261
[11268]: https://github.com/bevyengine/bevy/pull/11268
[11269]: https://github.com/bevyengine/bevy/pull/11269
[11270]: https://github.com/bevyengine/bevy/pull/11270
[11280]: https://github.com/bevyengine/bevy/pull/11280
[11284]: https://github.com/bevyengine/bevy/pull/11284
[11289]: https://github.com/bevyengine/bevy/pull/11289
[11292]: https://github.com/bevyengine/bevy/pull/11292
[11293]: https://github.com/bevyengine/bevy/pull/11293
[11296]: https://github.com/bevyengine/bevy/pull/11296
[11305]: https://github.com/bevyengine/bevy/pull/11305
[11306]: https://github.com/bevyengine/bevy/pull/11306
[11307]: https://github.com/bevyengine/bevy/pull/11307
[11310]: https://github.com/bevyengine/bevy/pull/11310
[11313]: https://github.com/bevyengine/bevy/pull/11313
[11316]: https://github.com/bevyengine/bevy/pull/11316
[11319]: https://github.com/bevyengine/bevy/pull/11319
[11321]: https://github.com/bevyengine/bevy/pull/11321
[11323]: https://github.com/bevyengine/bevy/pull/11323
[11325]: https://github.com/bevyengine/bevy/pull/11325
[11326]: https://github.com/bevyengine/bevy/pull/11326
[11327]: https://github.com/bevyengine/bevy/pull/11327
[11330]: https://github.com/bevyengine/bevy/pull/11330
[11331]: https://github.com/bevyengine/bevy/pull/11331
[11332]: https://github.com/bevyengine/bevy/pull/11332
[11334]: https://github.com/bevyengine/bevy/pull/11334
[11335]: https://github.com/bevyengine/bevy/pull/11335
[11336]: https://github.com/bevyengine/bevy/pull/11336
[11338]: https://github.com/bevyengine/bevy/pull/11338
[11342]: https://github.com/bevyengine/bevy/pull/11342
[11347]: https://github.com/bevyengine/bevy/pull/11347
[11353]: https://github.com/bevyengine/bevy/pull/11353
[11360]: https://github.com/bevyengine/bevy/pull/11360
[11361]: https://github.com/bevyengine/bevy/pull/11361
[11366]: https://github.com/bevyengine/bevy/pull/11366
[11368]: https://github.com/bevyengine/bevy/pull/11368
[11369]: https://github.com/bevyengine/bevy/pull/11369
[11370]: https://github.com/bevyengine/bevy/pull/11370
[11371]: https://github.com/bevyengine/bevy/pull/11371
[11373]: https://github.com/bevyengine/bevy/pull/11373
[11379]: https://github.com/bevyengine/bevy/pull/11379
[11381]: https://github.com/bevyengine/bevy/pull/11381
[11383]: https://github.com/bevyengine/bevy/pull/11383
[11386]: https://github.com/bevyengine/bevy/pull/11386
[11388]: https://github.com/bevyengine/bevy/pull/11388
[11389]: https://github.com/bevyengine/bevy/pull/11389
[11391]: https://github.com/bevyengine/bevy/pull/11391
[11397]: https://github.com/bevyengine/bevy/pull/11397
[11399]: https://github.com/bevyengine/bevy/pull/11399
[11400]: https://github.com/bevyengine/bevy/pull/11400
[11403]: https://github.com/bevyengine/bevy/pull/11403
[11404]: https://github.com/bevyengine/bevy/pull/11404
[11405]: https://github.com/bevyengine/bevy/pull/11405
[11407]: https://github.com/bevyengine/bevy/pull/11407
[11412]: https://github.com/bevyengine/bevy/pull/11412
[11416]: https://github.com/bevyengine/bevy/pull/11416
[11417]: https://github.com/bevyengine/bevy/pull/11417
[11418]: https://github.com/bevyengine/bevy/pull/11418
[11419]: https://github.com/bevyengine/bevy/pull/11419
[11420]: https://github.com/bevyengine/bevy/pull/11420
[11421]: https://github.com/bevyengine/bevy/pull/11421
[11422]: https://github.com/bevyengine/bevy/pull/11422
[11425]: https://github.com/bevyengine/bevy/pull/11425
[11428]: https://github.com/bevyengine/bevy/pull/11428
[11431]: https://github.com/bevyengine/bevy/pull/11431
[11432]: https://github.com/bevyengine/bevy/pull/11432
[11433]: https://github.com/bevyengine/bevy/pull/11433
[11434]: https://github.com/bevyengine/bevy/pull/11434
[11435]: https://github.com/bevyengine/bevy/pull/11435
[11436]: https://github.com/bevyengine/bevy/pull/11436
[11437]: https://github.com/bevyengine/bevy/pull/11437
[11439]: https://github.com/bevyengine/bevy/pull/11439
[11440]: https://github.com/bevyengine/bevy/pull/11440
[11442]: https://github.com/bevyengine/bevy/pull/11442
[11444]: https://github.com/bevyengine/bevy/pull/11444
[11445]: https://github.com/bevyengine/bevy/pull/11445
[11447]: https://github.com/bevyengine/bevy/pull/11447
[11454]: https://github.com/bevyengine/bevy/pull/11454
[11455]: https://github.com/bevyengine/bevy/pull/11455
[11456]: https://github.com/bevyengine/bevy/pull/11456
[11461]: https://github.com/bevyengine/bevy/pull/11461
[11462]: https://github.com/bevyengine/bevy/pull/11462
[11467]: https://github.com/bevyengine/bevy/pull/11467
[11469]: https://github.com/bevyengine/bevy/pull/11469
[11474]: https://github.com/bevyengine/bevy/pull/11474
[11480]: https://github.com/bevyengine/bevy/pull/11480
[11483]: https://github.com/bevyengine/bevy/pull/11483
[11484]: https://github.com/bevyengine/bevy/pull/11484
[11486]: https://github.com/bevyengine/bevy/pull/11486
[11487]: https://github.com/bevyengine/bevy/pull/11487
[11489]: https://github.com/bevyengine/bevy/pull/11489
[11491]: https://github.com/bevyengine/bevy/pull/11491
[11497]: https://github.com/bevyengine/bevy/pull/11497
[11498]: https://github.com/bevyengine/bevy/pull/11498
[11499]: https://github.com/bevyengine/bevy/pull/11499
[11500]: https://github.com/bevyengine/bevy/pull/11500
[11504]: https://github.com/bevyengine/bevy/pull/11504
[11506]: https://github.com/bevyengine/bevy/pull/11506
[11507]: https://github.com/bevyengine/bevy/pull/11507
[11508]: https://github.com/bevyengine/bevy/pull/11508
[11512]: https://github.com/bevyengine/bevy/pull/11512
[11513]: https://github.com/bevyengine/bevy/pull/11513
[11514]: https://github.com/bevyengine/bevy/pull/11514
[11519]: https://github.com/bevyengine/bevy/pull/11519
[11521]: https://github.com/bevyengine/bevy/pull/11521
[11523]: https://github.com/bevyengine/bevy/pull/11523
[11524]: https://github.com/bevyengine/bevy/pull/11524
[11526]: https://github.com/bevyengine/bevy/pull/11526
[11527]: https://github.com/bevyengine/bevy/pull/11527
[11528]: https://github.com/bevyengine/bevy/pull/11528
[11529]: https://github.com/bevyengine/bevy/pull/11529
[11531]: https://github.com/bevyengine/bevy/pull/11531
[11534]: https://github.com/bevyengine/bevy/pull/11534
[11538]: https://github.com/bevyengine/bevy/pull/11538
[11540]: https://github.com/bevyengine/bevy/pull/11540
[11541]: https://github.com/bevyengine/bevy/pull/11541
[11543]: https://github.com/bevyengine/bevy/pull/11543
[11548]: https://github.com/bevyengine/bevy/pull/11548
[11551]: https://github.com/bevyengine/bevy/pull/11551
[11555]: https://github.com/bevyengine/bevy/pull/11555
[11556]: https://github.com/bevyengine/bevy/pull/11556
[11560]: https://github.com/bevyengine/bevy/pull/11560
[11561]: https://github.com/bevyengine/bevy/pull/11561
[11573]: https://github.com/bevyengine/bevy/pull/11573
[11574]: https://github.com/bevyengine/bevy/pull/11574
[11575]: https://github.com/bevyengine/bevy/pull/11575
[11576]: https://github.com/bevyengine/bevy/pull/11576
[11578]: https://github.com/bevyengine/bevy/pull/11578
[11580]: https://github.com/bevyengine/bevy/pull/11580
[11581]: https://github.com/bevyengine/bevy/pull/11581
[11583]: https://github.com/bevyengine/bevy/pull/11583
[11585]: https://github.com/bevyengine/bevy/pull/11585
[11586]: https://github.com/bevyengine/bevy/pull/11586
[11591]: https://github.com/bevyengine/bevy/pull/11591
[11596]: https://github.com/bevyengine/bevy/pull/11596
[11597]: https://github.com/bevyengine/bevy/pull/11597
[11599]: https://github.com/bevyengine/bevy/pull/11599
[11600]: https://github.com/bevyengine/bevy/pull/11600
[11604]: https://github.com/bevyengine/bevy/pull/11604
[11605]: https://github.com/bevyengine/bevy/pull/11605
[11610]: https://github.com/bevyengine/bevy/pull/11610
[11611]: https://github.com/bevyengine/bevy/pull/11611
[11612]: https://github.com/bevyengine/bevy/pull/11612
[11615]: https://github.com/bevyengine/bevy/pull/11615
[11616]: https://github.com/bevyengine/bevy/pull/11616
[11617]: https://github.com/bevyengine/bevy/pull/11617
[11618]: https://github.com/bevyengine/bevy/pull/11618
[11622]: https://github.com/bevyengine/bevy/pull/11622
[11626]: https://github.com/bevyengine/bevy/pull/11626
[11627]: https://github.com/bevyengine/bevy/pull/11627
[11630]: https://github.com/bevyengine/bevy/pull/11630
[11635]: https://github.com/bevyengine/bevy/pull/11635
[11639]: https://github.com/bevyengine/bevy/pull/11639
[11640]: https://github.com/bevyengine/bevy/pull/11640
[11641]: https://github.com/bevyengine/bevy/pull/11641
[11644]: https://github.com/bevyengine/bevy/pull/11644
[11645]: https://github.com/bevyengine/bevy/pull/11645
[11649]: https://github.com/bevyengine/bevy/pull/11649
[11650]: https://github.com/bevyengine/bevy/pull/11650
[11652]: https://github.com/bevyengine/bevy/pull/11652
[11660]: https://github.com/bevyengine/bevy/pull/11660
[11662]: https://github.com/bevyengine/bevy/pull/11662
[11664]: https://github.com/bevyengine/bevy/pull/11664
[11666]: https://github.com/bevyengine/bevy/pull/11666
[11669]: https://github.com/bevyengine/bevy/pull/11669
[11671]: https://github.com/bevyengine/bevy/pull/11671
[11672]: https://github.com/bevyengine/bevy/pull/11672
[11675]: https://github.com/bevyengine/bevy/pull/11675
[11676]: https://github.com/bevyengine/bevy/pull/11676
[11678]: https://github.com/bevyengine/bevy/pull/11678
[11684]: https://github.com/bevyengine/bevy/pull/11684
[11686]: https://github.com/bevyengine/bevy/pull/11686
[11687]: https://github.com/bevyengine/bevy/pull/11687
[11688]: https://github.com/bevyengine/bevy/pull/11688
[11690]: https://github.com/bevyengine/bevy/pull/11690
[11693]: https://github.com/bevyengine/bevy/pull/11693
[11697]: https://github.com/bevyengine/bevy/pull/11697
[11699]: https://github.com/bevyengine/bevy/pull/11699
[11700]: https://github.com/bevyengine/bevy/pull/11700
[11703]: https://github.com/bevyengine/bevy/pull/11703
[11705]: https://github.com/bevyengine/bevy/pull/11705
[11709]: https://github.com/bevyengine/bevy/pull/11709
[11710]: https://github.com/bevyengine/bevy/pull/11710
[11712]: https://github.com/bevyengine/bevy/pull/11712
[11720]: https://github.com/bevyengine/bevy/pull/11720
[11721]: https://github.com/bevyengine/bevy/pull/11721
[11722]: https://github.com/bevyengine/bevy/pull/11722
[11725]: https://github.com/bevyengine/bevy/pull/11725
[11726]: https://github.com/bevyengine/bevy/pull/11726
[11728]: https://github.com/bevyengine/bevy/pull/11728
[11733]: https://github.com/bevyengine/bevy/pull/11733
[11735]: https://github.com/bevyengine/bevy/pull/11735
[11736]: https://github.com/bevyengine/bevy/pull/11736
[11737]: https://github.com/bevyengine/bevy/pull/11737
[11745]: https://github.com/bevyengine/bevy/pull/11745
[11747]: https://github.com/bevyengine/bevy/pull/11747
[11751]: https://github.com/bevyengine/bevy/pull/11751
[11758]: https://github.com/bevyengine/bevy/pull/11758
[11764]: https://github.com/bevyengine/bevy/pull/11764
[11767]: https://github.com/bevyengine/bevy/pull/11767
[11769]: https://github.com/bevyengine/bevy/pull/11769
[11773]: https://github.com/bevyengine/bevy/pull/11773
[11777]: https://github.com/bevyengine/bevy/pull/11777
[11780]: https://github.com/bevyengine/bevy/pull/11780
[11781]: https://github.com/bevyengine/bevy/pull/11781
[11783]: https://github.com/bevyengine/bevy/pull/11783
[11785]: https://github.com/bevyengine/bevy/pull/11785
[11791]: https://github.com/bevyengine/bevy/pull/11791
[11792]: https://github.com/bevyengine/bevy/pull/11792
[11795]: https://github.com/bevyengine/bevy/pull/11795
[11797]: https://github.com/bevyengine/bevy/pull/11797
[11798]: https://github.com/bevyengine/bevy/pull/11798
[11800]: https://github.com/bevyengine/bevy/pull/11800
[11801]: https://github.com/bevyengine/bevy/pull/11801
[11803]: https://github.com/bevyengine/bevy/pull/11803
[11805]: https://github.com/bevyengine/bevy/pull/11805
[11810]: https://github.com/bevyengine/bevy/pull/11810
[11818]: https://github.com/bevyengine/bevy/pull/11818
[11822]: https://github.com/bevyengine/bevy/pull/11822
[11832]: https://github.com/bevyengine/bevy/pull/11832
[11838]: https://github.com/bevyengine/bevy/pull/11838
[11847]: https://github.com/bevyengine/bevy/pull/11847
[11850]: https://github.com/bevyengine/bevy/pull/11850
[11855]: https://github.com/bevyengine/bevy/pull/11855
[11856]: https://github.com/bevyengine/bevy/pull/11856
[11860]: https://github.com/bevyengine/bevy/pull/11860
[11865]: https://github.com/bevyengine/bevy/pull/11865
[11866]: https://github.com/bevyengine/bevy/pull/11866
[11867]: https://github.com/bevyengine/bevy/pull/11867
[11868]: https://github.com/bevyengine/bevy/pull/11868
[11870]: https://github.com/bevyengine/bevy/pull/11870
[11878]: https://github.com/bevyengine/bevy/pull/11878
[11880]: https://github.com/bevyengine/bevy/pull/11880
[11882]: https://github.com/bevyengine/bevy/pull/11882
[11884]: https://github.com/bevyengine/bevy/pull/11884
[11889]: https://github.com/bevyengine/bevy/pull/11889
[11893]: https://github.com/bevyengine/bevy/pull/11893
[11894]: https://github.com/bevyengine/bevy/pull/11894
[11907]: https://github.com/bevyengine/bevy/pull/11907
[11909]: https://github.com/bevyengine/bevy/pull/11909
[11910]: https://github.com/bevyengine/bevy/pull/11910
[11911]: https://github.com/bevyengine/bevy/pull/11911
[11913]: https://github.com/bevyengine/bevy/pull/11913
[11914]: https://github.com/bevyengine/bevy/pull/11914
[11915]: https://github.com/bevyengine/bevy/pull/11915


--- END FILE `content/news/2024-02-17-bevy-0.13/index.md` ---


--- BEGIN FILE `content/news/2024-07-04-bevy-0.14/index.md` ---


+++
title = "Bevy 0.14"
date = 2024-07-04
[extra]
image = "cover.jpg"
show_image = true
image_subtitle = "A forested scene illustrating Bevy's new volumetric fog, depth of field, and screen-space reflections"
image_subtitle_link = "https://github.com/IceSentry/bevy_forest_scene"
+++

Thanks to **256** contributors, **993** pull requests, community reviewers, and our [**generous donors**](/donate), we're happy to announce the **Bevy 0.14** release on [crates.io](https://crates.io/crates/bevy)!

For those who don't know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out our [Quick Start Guide](/learn/quick-start) to try it today. It's free and open source forever! You can grab the full [source code](https://github.com/bevyengine/bevy) on GitHub. Check out [Bevy Assets](https://bevy.org/assets) for a collection of community-developed plugins, games, and learning resources.

To update an existing Bevy App or Plugin to **Bevy 0.14**, check out our [0.13 to 0.14 Migration Guide](/learn/migration-guides/0-13-to-0-14/).

Since our last release a few months ago we've added a _ton_ of new features, bug fixes, and quality of life tweaks, but here are some of the highlights:

- **Virtual Geometry**: Preprocess meshes into "meshlets", enabling efficient rendering of huge amounts of geometry
- **Sharp Screen Space Reflections**: Approximate real time raymarched screen space reflections
- **Depth of Field**: Cause objects at specific depths to go "out of focus", mimicking the behavior of physical lenses
- **Per-Object Motion Blur**: Blur objects moving fast relative to the camera
- **Volumetric Fog / Lighting**: Simulates fog in 3d space, enabling lights to produce beautiful "god rays"
- **Filmic Color Grading**: Fine tune tonemapping in your game with a complete set of filmic color grading tools
- **PBR Anisotropy**: Improve rendering of surfaces whose roughness varies along the tangent and bitangent directions of a mesh, such as brushed metal and hair
- **Auto Exposure**: Configure cameras to dynamically adjust their exposure based on what they are looking at
- **PCF for Point Lights**: Smooth out point light shadows, improving their quality
- **Animation blending:** Our new low-level animation graph adds support for animation blending, and sets the stage for first- and third-party graphical, asset-driven animation tools.
- **ECS Hooks and Observers:** Automatically (and immediately) respond to arbitrary events, such as component addition and removal
- **Better colors:** type-safe colors make it clear which color space you're operating in, and offer an awesome array of useful methods.
- **Computed states and substates:** Modeling complex app state is a breeze with these type-safe extensions to our `States` abstraction.
- **Rounded corners:** Rounding off one of `bevy_ui`'s roughest edges, you can now procedurally set the corner radius on your UI elements.

For the first time, Bevy 0.14 was prepared using a **release candidate** process to help ensure that you can upgrade right away with peace of mind.
We've worked closely with both plugin authors and ordinary users to catch critical bugs, round the rough corners off our new features, and refine the migration guide.
As we prepared fixes, we've [shipped new release candidates on crates.io](https://crates.io/crates/bevy/versions?sort=date), letting core ecosystem crates update and listening closely for show-stopping problems.
Thank you so much to [everyone who helped out](https://discord.com/channels/691052431525675048/1239930965267054623): these efforts are a vital step towards making Bevy something that teams large and small can trust to work reliably.

<!-- more -->

{{ release_notes(version="0.14") }}

## What's Next?

The features above may be great, but what else does Bevy have in flight?
Peering deep into the mists of time (predictions are _extra_ hard when your team is almost all volunteers!), we can see some exciting work taking shape:

- **Better Scenes:** Scenes are one of Bevy's core building blocks: designed to be a powerful tool for authoring levels and creating reusable game objects, whether they're a radio button widget or a monster. We're working on a new scene system with a new syntax that will make defining scenes in assets _and_ in code more powerful and more pleasant. You can check out the(now slightly old) [project kickoff discussion](https://github.com/bevyengine/bevy/discussions/9538) for more information. We're also very close to putting out a design document outlining our plans and the current state of the implementation.
- **ECS Relations:** Relations (a first-class feature for linking entities together) is wildly desired but remarkably complex, driving features and refactors to our ECS internals. The [working group](https://discord.com/channels/691052431525675048/1237010014355456115) has been patiently laying out what we need to do and why in this [RFC](https://github.com/bevyengine/rfcs/pull/79).
- **Better Audio:** Bevy's built-in audio solution has never really hit the right notes. The [Better Audio working group](https://discord.com/channels/691052431525675048/1236113088793677888) is plotting a path forward.
- **Contributing Book:** Our documentation on how to contribute is scattered to the four corners of our repositories. By gathering this together, the [Contributing Book working group](https://discord.com/channels/691052431525675048/1236112637662724127) hopes to make it easier to discover and maintain.
- **Curve Abstraction:** Curves come up all of the time in game dev, and the mathmagicians that make up the [Curve Crew](https://discord.com/channels/691052431525675048/1236110755212820581) are [designing a trait](https://github.com/bevyengine/rfcs/pull/80) to unify and power them.
- **Better Text:** our existing text solution isn't up to the demands of modern UI. The "Lorem Ipsum" working group is [looking into](https://discord.com/channels/691052431525675048/1248074018612051978) replacing it with a better solution.
- **A Unified View on Dev Tools:** In 0.14, we've added a stub `bevy_dev_tools` crate: a place for tools and overlays that speed up game development such as performance monitors, fly cameras, or in-game commands to spawn game objects. We're working on adding more tools, and creating a [dev tool abstraction](https://github.com/bevyengine/rfcs/pull/77). This will give us a unified way to enable/disable, customize and group this grab bag of tools into toolboxes to create something like Quake console or VSCode Command Palette with tools from around the ecosystem.
- **Bevy Remote Protocol:** Communicating with actively running Bevy games is an incredibly powerful tool for building editors, debuggers and other tools. [We're developing](https://github.com/bevyengine/bevy/pull/13563) a reflection-powered protocol to create a solution that's ready to power a whole ecosystem.
- **A Modular, Maintainable Render Graph:** Bevy's existing rendering architecture is already quite good at providing reusable renderer features like `RenderPhases`, batching, and draw commands. However, the render graph interface itself is one remaining pain points. Since it's distributed across many files the control flow is hard to understand, and its heavy use of ECS resources for passing around rendering data actively works against modularity. While the exact design hasn't been finalized (and feedback is very welcome!), we've been actively working to [redesign the render graph](https://github.com/bevyengine/bevy/pull/13397) in order to build up to a larger refactor of the renderer towards modularity and ease of use.

{{ support_bevy() }}
{{ contributors(version="0.14") }}
{{ changelog(version="0.14")}}


--- END FILE `content/news/2024-07-04-bevy-0.14/index.md` ---


--- BEGIN FILE `content/news/2024-11-29-bevy-0.15/index.md` ---


+++
title = "Bevy 0.15"
date = 2024-11-29
[extra]
image = "cover.png"
show_image = true
image_subtitle = "A snake statue in volumetric fog illuminated by volumetric lighting"
image_subtitle_link = "https://sketchfab.com/3d-models/snake-statue-794b77a3e4654a669cf259d20dc89ec7"
+++

Thanks to **294** contributors, **1217** pull requests, community reviewers, and our [**generous donors**](/donate), we're happy to announce the **Bevy 0.15** release on [crates.io](https://crates.io/crates/bevy)!

For those who don't know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out our [Quick Start Guide](/learn/quick-start) to try it today. It's free and open source forever! You can grab the full [source code](https://github.com/bevyengine/bevy) on GitHub. Check out [Bevy Assets](https://bevy.org/assets) for a collection of community-developed plugins, games, and learning resources.

To update an existing Bevy App or Plugin to **Bevy 0.15**, check out our [0.14 to 0.15 Migration Guide](/learn/migration-guides/0-14-to-0-15/).

Since our last release a few months ago we've added a _ton_ of new features, bug fixes, and quality of life tweaks, but here are some of the highlights:

- **Required Components**: A rethink of how spawning entities works that significantly improves the Bevy user experience
- **Entity Picking / Selection**: A modular system for selecting entities across contexts
- **Animation Improvements**: generalized entity animation, animation masks, additive blending, and animation events
- **Curves**: a new `Curve` trait, cyclic splines, common easing functions, color gradient curves
- **Reflection Improvements**: Function reflection, unique reflect, remote type reflection
- **Bevy Remote Protocol (BRP)**: A new protocol that allows external clients (such as editors) to interact with running Bevy games
- **Visibility Bitmask Ambient Occlusion (VBAO)**: An improved GTAO algorithm that improves ambient occlusion quality
- **Chromatic Aberration**: A new post processing effect that simulates lenses that fail to focus light to a single point
- **Volumetric Fog Improvements**: "Fog volumes" that define where volumetric fog is rendered (and what form it takes), along with Point Lights and Spotlight compatibility
- **Order Independent Transparency**: A new opt-in transparency algorithm that improves the stability / quality of transparent objects as their distance from the camera changes
- **Improved Text Rendering**: We've switched to Cosmic Text for our text rendering, which significantly improves our ability to render text, especially for non-Latin-based languages that require font shaping and bidirectional text
- **Gamepads as Entities**: Gamepads are now represented as entities, making them much easier to interact with
- **UI Box Shadows**: Bevy UI nodes can now render configurable box shadows

Bevy 0.15 was prepared using our new **release candidate** process to help ensure that you can upgrade right away with peace of mind. We worked closely with both plugin authors and ordinary users to catch critical bugs, polish new features, and refine the migration guide. For each release candidate, we prepared fixes, [shipped a new release candidate on crates.io](https://crates.io/crates/bevy/versions?sort=date), let core ecosystem crates update, and listened closely for show-stopping problems. A huge thanks to [everyone who helped out](https://discord.com/channels/691052431525675048/1295069829740499015)! These efforts are a vital step towards making Bevy something that teams large and small can trust to work reliably.

<!-- more -->

{{ release_notes(version="0.15") }}

## What's Next?

The features above may be great, but what else does Bevy have in flight?
Peering deep into the mists of time (predictions are _extra_ hard when your team is almost all volunteers!), we can see some exciting work taking shape:

- **Bevy Scene Notation:** Required components mark the first step on Cart's [master plan](https://github.com/bevyengine/bevy/discussions/14437) for BSN. Over the next few months, he's going to be heads-down developing a Bevy-specific file format (complete with matching macro and IDE support), the `Construct` trait (to easily include asset data in scenes), patches (to layer modifications to scenes) and experimenting with approaches to reactivity for UI.
- **Better font support:** While `cosmic_text` is a huge leap forward for text shaping and rendering, our approach to handling fonts and type-faces is still quite crude. Bidirectional text, working with system fonts, a convenient Markdown-style "bold this section of the text" API, font fallback and more are planned.
- **Picking-Powered UI Interaction:** `bevy_picking` introduces a much more powerful and expressive way to handle pointer interactions, but we're [not leveraging its full power](https://github.com/bevyengine/bevy/issues/15550) within `bevy_ui` itself. While picking events are great, a single source of truth for "what's the user doing with this button" is vital for responsive widget styling.
- **`bevy_lint`:** Try as we might, it _is_ possible to misuse Bevy's API! As part of a broader [`bevy_cli`](https://github.com/theBevyFlock/bevy_cli) project, the Bevy community has developed a Bevy-specific linter to catch common mistakes or hazards and are looking for early adopters to try it out!
- **Focus abstraction:** Keeping track of which UI element is focused is vital to allow users of screen readers, gamepads and keyboards to comfortably navigate the UI. We're planning to build on our success with `bevy_picking` and develop a complementary [focus-tracking solution](https://github.com/bevyengine/bevy/issues/15378), along with a few simple backends to opt-in to keyboard or gamepad-based UI navigation.
- **Immutable components:** Component hooks and observers are really powerful for responding to changes and upholding invariants, but they're easily bypassed by simply mutating the component. The mad science crew has been [experimenting with](https://github.com/bevyengine/bevy/issues/16208) a way to opt-out of direct mutation, opening the door to more robust hierarchies, complex observer-powered reactions and a first-party component indexing solution.
- **Actually Retained Rendering:** While the render world is _technically_ retained in Bevy 0.15, most of our existing code still spawns and despawns entities every frame to reduce the risk of introducing bugs during the migration. We're looking forward to gradually changing this and profiling the performance impact!
- **`no_std` Bevy:** To better support weird platforms (like the [Playdate](https://play.date/)!) and make life easier for devs experimenting with Bevy on modern consoles, we've been [working towards](https://github.com/bevyengine/bevy/issues/15460) ensuring that (much of) Bevy can compile and run without Rust's standard library.

{{ support_bevy() }}
{{ contributors(version="0.15") }}
{{ changelog(version="0.15")}}


--- END FILE `content/news/2024-11-29-bevy-0.15/index.md` ---


--- BEGIN FILE `content/news/2025-04-24-bevy-0.16/index.md` ---


+++
title = "Bevy 0.16"
date = 2025-04-24 
[extra]
image = "planet.jpg"
show_image = true
image_subtitle = "A planet from EmbersArc's in-development spaceflight simulation game, rendered with custom shaders in Bevy"
image_subtitle_link = "https://bsky.app/profile/embersarc.bsky.social"
+++

Thanks to **261** contributors, **1244** pull requests, community reviewers, and our [**generous donors**](/donate), we're happy to announce the **Bevy 0.16** release on [crates.io](https://crates.io/crates/bevy)!

For those who don't know, Bevy is a refreshingly simple data-driven game engine built in Rust. You can check out our [Quick Start Guide](/learn/quick-start) to try it today. It's free and open source forever! You can grab the full [source code](https://github.com/bevyengine/bevy) on GitHub. Check out [Bevy Assets](https://bevy.org/assets) for a collection of community-developed plugins, games, and learning resources.

To update an existing Bevy App or Plugin to **Bevy 0.16**, check out our [0.15 to 0.16 Migration Guide](/learn/migration-guides/0-15-to-0-16/).

Since our last release a few months ago we've added a _ton_ of new features, bug fixes, and quality of life tweaks, but here are some of the highlights:

- **GPU-Driven Rendering:** Bevy now does even more rendering work on the GPU (where possible), making Bevy dramatically faster on big, complex scenes.
- **Procedural Atmospheric Scattering:** Simulate realistic physically-based Earth-like sky at any time of day at a low performance cost.
- **Decals**: Dynamically layer textures onto rendered meshes.
- **Occlusion Culling**: Improve performance by not rendering objects that are obscured by other objects.
- **ECS Relationships:** One of the hottest ECS features is finally here: allowing you to easily and robustly model and work with entity-entity connections. Some caveats apply, but we're excited to get a simple and robust solution to users today.
- **Improved Spawn API:** Spawning entity hierarchies is now significantly easier!
- **Unified Error Handling:** Bevy now has first class error handling support, making it easy, flexible, and ergonomic, while also making debugging easier!
- **`no_std` Support:** `bevy` itself and a ton of our subcrates no longer rely on Rust's standard library, letting you use the same engine on everything from a modern gaming rig to a Gameboy Advance.
- **Faster Transform Propagation:** We've dramatically improved the performance of transform propagation for more objects at once, especially if they are static.
<!-- more -->

{{ release_notes(version="0.16") }}

## What's Next?

The features above may be great, but what else does Bevy have in flight?
Peering deep into the mists of time (predictions are _extra_ hard when your team is almost all volunteers!), we can see some exciting work taking shape:

- **A revamped observers API:** Observers are incredibly popular, but come with some weird quirks. We're looking to smooth those out, and make them the easiest way to write one-off logic for UI.
- **Resources-as-entities:** Sure would be nice if hooks, observers, relations and more worked with resources. Rather than duplicating all of the code, we'd like to [make them components on singleton entities](https://github.com/bevyengine/bevy/pull/17485) under the hood.
- **A .bsn file format and bsn! macro:** With the foundations laid (required components, improved spawning and relations!), it's time to build out the terse and robust Bevy-native scene format (and matching macro) described in [bevy#14437](https://github.com/bevyengine/bevy/discussions/14437).
- **Light textures:** Also known as "light cookies", these are great for everything from dappled sunlight to shadow boxing.
- **NVIDIA Deep Learning Super Sampling:** DLSS is a neural-net powered approach to temporal anti-aliasing and upscaling for NVIDIA RTX GPUs. We're working on integrating DLSS into Bevy to provide a cheaper and higher quality anti-aliasing solution than Bevy's current TAA (on supported platforms).
- **Unified volumetrics system:** God rays, fogs, cascading shadow maps, and atmospheric scattering: there's a huge number of rendering features that fundamentally care about the optical properties of volumes of open air (or water!). We're hoping to unify and extend these features for easier to use, more beautiful physically-based rendering.
- **Ray-tracing foundations:** Hardware-accelerated ray-tracing is all the rage, and with `wgpu`'s help we're ready to start making the first steps, walking towards a world of dynamic ray-traced global illumination.
- **More game-focused examples:** New users continue to flock to Bevy, and need up-to-date learning materials. Our API-focused approach to examples isn't enough: we need to start demonstrating how to use Bevy to do common game dev tasks like making an inventory, saving user preferences or placing structures on a map.

{{ support_bevy() }}

{{ contributors(version="0.16") }}

For those interested in a complete changelog, you can see the entire log (and linked pull requests) via the [relevant commit history](https://github.com/bevyengine/bevy/compare/v0.15.0...v0.16.0-rc.5).


--- END FILE `content/news/2025-04-24-bevy-0.16/index.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/10839_Generalised_ECS_reactivity_with_Observers.md` ---


In 0.14, ECS observers were introduced: mechanisms for immediately responding to events in the world. As part of this change, the `Event` trait was extended to require `Component`. `#[derive(Event)]` now automatically implements `Component` for the annotated type, which can break types that also `#[derive(Component)]`.

```rust
// 0.13
#[derive(Event, Component)]
struct MyEvent;

// 0.14
// `Component` is still implemented by the `Event` derive.
#[derive(Event)]
struct MyEvent;
```

For more information, see the [release notes](/news/bevy-0-14/#ecs-hooks-and-observers) on hooks and observers.


--- END FILE `release-content/0.14/migration-guides/10839_Generalised_ECS_reactivity_with_Observers.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/10973_Contextually_clearing_gizmos.md` ---


`App::insert_gizmo_group()` function is now named `App::insert_gizmo_config()`.


--- END FILE `release-content/0.14/migration-guides/10973_Contextually_clearing_gizmos.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11165_Decouple_BackgroundColor_from_UiImage.md` ---


The [`BackgroundColor`] component now renders a solid-color background behind [`UiImage`] instead of tinting its color. Use the `color` field of `UiImage` for tinting.

```rust
// 0.13
ButtonBundle {
    image: UiImage::new(my_texture),
    background_color: my_color_tint.into(),
    ..default()
}

// 0.14
ButtonBundle {
    image: UiImage::new(my_texture).with_color(my_color_tint),
    ..default()
}
```

Some UI systems have been split or renamed.

- `bevy_ui::RenderUiSystem::ExtractNode` has been split into `ExtractBackgrounds`, `ExtractImages`, `ExtractBorders`, and `ExtractText`.
- `bevy_ui::extract_uinodes` has been split into `extract_uinode_background_colors` and `extract_uinode_images`.
- `bevy_ui::extract_text_uinodes` has been renamed to `extract_uinode_text`.

[`BackgroundColor`]: https://docs.rs/bevy/0.14.0/bevy/prelude/struct.BackgroundColor.html
[`UiImage`]: https://docs.rs/bevy/0.14.0/bevy/prelude/struct.UiImage.html#structfield.color


--- END FILE `release-content/0.14/migration-guides/11165_Decouple_BackgroundColor_from_UiImage.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11278_Fix_fit_canvas_to_parent.md` ---


`Window::fit_canvas_to_parent` is a property on WASM that automatically resizes the canvas element to the size of its parent, usually the screen. It was removed in 0.13, but that ended up being problematic because many users depended on its behavior when they could not customize the CSS. It has now been re-added to account for this need.


--- END FILE `release-content/0.14/migration-guides/11278_Fix_fit_canvas_to_parent.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11426_Computed_State__Sub_States.md` ---


`NextState` has been converted from a unit struct to an enum. If you accessed the internal `Option` directly, whether through `NextState::0` or matching, you will have to update your code to handle this change.

```rust
// 0.13
let state = next_state.0.unwrap();

// 0.14
let NextState::Pending(state) = next_state else { panic!("No pending next state!") };
```

|0.13|0.14|
|-|-|
|`NextState(Some(S))`|`NextState::Pending(S)`|
|`NextState(None)`|`NextState::Unchanged`|


--- END FILE `release-content/0.14/migration-guides/11426_Computed_State__Sub_States.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11426_on_enter_startup_states.md` ---


In Bevy 0.13, the [`OnEnter`] schedules for states initialized via [`app.init_state`] would run after any systems in the `Startup` schedules.
This is because [`apply_state_transitions`] was only run during the [`StateTransition`] schedule.

This was a subtle bug: it was possible for the game to be in a particular state without having first *entered* it.
Now, [`OnEnter`] state transition logic is handled immediately.
See [bevy#13968](https://github.com/bevyengine/bevy/issues/13968) for more context on this decision.

To migrate, choose one of the following options:

1. Moving your startup systems to a state, as a variant of the state you're waiting for (e.g. `AppState::Setup`), and then transition out of it once the setup is complete.
2. Moving your startup systems to a state, and making the other state a [sub state](https://github.com/bevyengine/bevy/blob/v0.14.0-rc.4/examples/state/sub_states.rs) that depends on the startup state's completion (e.g. `SetupState::SetupComplete`).

```rust
// 0.13
#[derive(States, Default)]
enum AppState {
    #[default]
    InMenu,
    InGame,
}

app
   .init_state::<AppState>()
   .add_systems(Startup, initial_setup)
   .add_systems(OnEnter(AppState::InMenu), relies_on_initial_setup);

// 0.14 (Solution 1)
#[derive(States, Default)]
enum AppState {
    // Make this the default instead of `InMenu`.
    #[default]
    Setup
    InMenu,
    InGame,
}

fn transition_to_in_menu(mut app_state: ResMut<NextState<AppState>>) {
    app_state.set(AppState::InMenu);
}

app
    .init_state::<AppState>()
    .add_systems(OnEnter(AppState::Setup), initial_setup)
    .add_system(Update, transition_to_in_menu.run_if(in_state(AppState::Setup)))
    .add_systems(OnEnter(AppState::InMenu), relies_on_initial_setup);

// 0.14 (Solution 2)
#[derive(States, Default)]
enum SetupState {
    #[default]
    SettingUp,
    SetupComplete,
}

#[derive(SubStates, Default)]
#[source(SetupState = SetupState::SetupComplete)]
enum AppState {
    #[default]
    InMenu,
    InGame,
}

fn finish_setup(mut app_state: ResMut<NextState<SetupState>>) {
    app_state.set(SetupState::SetupComplete);
}

app
    .init_state::<SetupState>()
    // Note that we don't call `init_state()` for substates!
    .add_sub_state::<AppState>()
    .add_systems(OnEnter(AppState::InitialSetup), initial_setup)
    .add_system(Update, finish_setup.run_if(in_state(AppState::Setup)))
    .add_systems(OnEnter(AppState::InMenu), relies_on_initial_setup);
```


--- END FILE `release-content/0.14/migration-guides/11426_on_enter_startup_states.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11698_Prefer_UVec2_when_working_with_texture_dimensions.md` ---


`GpuImage`, `TextureAtlasLayout`, `TextureAtlasBuilder`, `DynamicAtlasTextureBuilder`, and `FontAtlas` have been changed to store their dimensions in integers rather than floating point numbers, in order to increase consistency with the underlying texture data. Instances of `Vec2` and `Rect` have been replaced with `UVec2` and `URect`.

Migrating this is tricky because the conversion from `f32` to `u32` is lossy. If you work with constants, you can simply rewrite the code. If you work with user input, you could choose to simply discard the decimal (`1.4 as u32`) or round it first (`1.83.round() as u32`).


--- END FILE `release-content/0.14/migration-guides/11698_Prefer_UVec2_when_working_with_texture_dimensions.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11707_Rework_animation_to_be_done_in_two_phases.md` ---


`AnimationClip` now uses UUIDs instead of hierarchical paths based on the `Name` component to refer to bones. This has several consequences:

- A new component, `AnimationTarget`, should be placed on each bone that you wish to animate, in order to specify its UUID and the associated `AnimationPlayer`. The glTF loader automatically creates these components as necessary, so most uses of glTF rigs shouldn’t need to change.
- Moving a bone around the tree, or renaming it, no longer prevents an `AnimationPlayer` from affecting it.
- Dynamically changing the `AnimationPlayer` component will likely require manual updating of the `AnimationTarget` components.

Entities with `AnimationPlayer` components may now possess descendants that also have `AnimationPlayer` components. They may not, however, animate the same bones.

Furthermore, `NoOpTypeIdHash` and `NoOpTypeIdHasher` have been renamed to `NoOpHash` and `NoOpHasher`.


--- END FILE `release-content/0.14/migration-guides/11707_Rework_animation_to_be_done_in_two_phases.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11766_Fix_CameraProjectionPlugin_not_implementing_Plugin_in_some.md` ---


There was a bug with `CameraProjectionPlugin<T>` where it would sometimes not implement `Plugin` if `T` did not implement `Component` and `GetTypeRegistration`. This has now been fixed by requiring `T: CameraProjection + Component + GetTypeRegistration`.


--- END FILE `release-content/0.14/migration-guides/11766_Fix_CameraProjectionPlugin_not_implementing_Plugin_in_some.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11808_Fix_CameraProjection_panic_and_improve_CameraProjectionPlu.md` ---


`VisibilitySystems`'s `UpdateOrthographicFrusta`, `UpdatePerspectiveFrusta`, and `UpdateProjectionFrusta` variants have been removed in favor of the new `VisibilitySystems::UpdateFrusta` variant.


--- END FILE `release-content/0.14/migration-guides/11808_Fix_CameraProjection_panic_and_improve_CameraProjectionPlu.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11823_Immediately_apply_deferred_system_params_in_Systemrun.md` ---


The default implementation of `System::run` will now always immediately run `System::apply_deferred`. If you were manually calling `System::apply_deferred` in this situation, you may remove it. Please note that `System::run_unsafe` still _does not_ call `apply_deferred` because it cannot guarantee it will be safe.

```rust
// 0.13
system.run(world);

// Sometime later:
system.apply_deferred(world);

// 0.14
system.run(world);

// `apply_deferred` no longer needs to be called!
```


--- END FILE `release-content/0.14/migration-guides/11823_Immediately_apply_deferred_system_params_in_Systemrun.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11904_Add_support_for_KHR_texture_transform.md` ---


The `affine_to_square()` **shader** function has been renamed to `affine3_to_square`, in order to give room for `affine2_to_square`. Please update your import statements and usages accordingly. (Note that this is not Rust, but instead WGSL.)

```wgsl
// 0.13
#import bevy_render::maths::affine_to_square

// 0.14
#import bevy_render::maths::affine3_to_square
```


--- END FILE `release-content/0.14/migration-guides/11904_Add_support_for_KHR_texture_transform.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11939_rename_Camera3dBundles_dither_field_to_deband_dither_to_al.md` ---


`Camera3dBundle::dither` has been renamed to `deband_dither` to make it consistent with `Camera2dBundle`. If you construct or access this field, you will have to update your usage.


--- END FILE `release-content/0.14/migration-guides/11939_rename_Camera3dBundles_dither_field_to_deband_dither_to_al.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11956_Add_random_shader_utils_fix_cluster_debug_visualization.md` ---


The `bevy_pbr::utils::random1D()` **shader** function has been replaced by the similar `bevy_pbr::utils::rand_f()`. Note that if you convert the returned `f32` to a different data type, you may be interested in `rand_u()` which returns a `u32` and `rand_vec2f()` which returns a `vec2<f32>`.


--- END FILE `release-content/0.14/migration-guides/11956_Add_random_shader_utils_fix_cluster_debug_visualization.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11986_Remove_the_UpdateAssets_and_AssetEvents_schedules.md` ---


The `UpdateAssets` schedule has been removed. If you add systems to this schedule, move them to run on `PreUpdate`. (You may need to configure the ordering with `system.before(...)` and `system.after(...)`.)

```rust
// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(UpdateAssets, my_system)
    .run()

// 0.14
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(PreUpdate, my_system)
    .run()
```

Furthermore, `AssetEvents` has been changed from a `ScheduleLabel` to a `SystemSet` within the `First` schedule.

```rust
// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(AssetEvents, my_system)
    .run()

// 0.14
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(First, my_system.in_set(AssetEvents))
    .run()
```


--- END FILE `release-content/0.14/migration-guides/11986_Remove_the_UpdateAssets_and_AssetEvents_schedules.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/11989_Implement_the_AnimationGraph_allowing_for_multiple_animati.md` ---


`AnimationPlayer`s can no longer play animations by themselves: they need to be paired with a `Handle<AnimationGraph>`. Code that used `AnimationPlayer` to play animations will need to create an `AnimationGraph` asset first, add a node for the clip (or clips) you want to play, and then supply the index of that node to the `AnimationPlayer`’s `play` method.

```rust
// 0.13
fn setup(mut commands: Commands, mut animations: ResMut<Assets<AnimationClip>>) {
    let mut animation = AnimationClip::default();

    // ...

    let mut player = AnimationPlayer::default();
    player.play(animations.add(animation));

    commands.spawn((
        player,
        // ...
    ));
}

// 0.14
fn setup(
    mut commands: Commands,
    mut animations: ResMut<Assets<AnimationClip>>,
    // You now need access to the `AnimationGraph` asset.
    mut graphs: ResMut<Assets<AnimationGraph>>,
) {
    let mut animation = AnimationClip::default();

    // ...

    // Create a new `AnimationGraph` and add the animation handle to it.
    let (graph, animation_index) = AnimationGraph::from_clip(animations.add(animation));

    let mut player = AnimationPlayer::default();
    // Play the animation index, not the handle.
    player.play(animation_index);

    commands.spawn((
        player,
        // Add the new `AnimationGraph` to the assets, and spawn the entity with its handle.
        graphs.add(graph),
        // ...
    ));
}
```

Furthermore, the `AnimationPlayer::play_with_transition()` method has been removed and replaced with the `AnimationTransitions` component. If you were previously using `AnimationPlayer::play_with_transition()`, add all animations that you were playing to the `AnimationGraph` and create an `AnimationTransitions` component to manage the blending between them.

For more information behind this change, you may be interested in [RFC 51](https://github.com/bevyengine/rfcs/blob/main/rfcs/51-animation-composition.md).


--- END FILE `release-content/0.14/migration-guides/11989_Implement_the_AnimationGraph_allowing_for_multiple_animati.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12012_Move_AlphaMode_into_bevy_render.md` ---


`AlphaMode` has been moved from `bevy::pbr` to `bevy::render`. If you import them directly, you will need to update your import statements.

```rust
// 0.13
use bevy::pbr::AlphaMode;

// 0.14
use bevy::render::alpha::AlphaMode;
```


--- END FILE `release-content/0.14/migration-guides/12012_Move_AlphaMode_into_bevy_render.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12018_Add_Direction3dA_and_move_direction_types_out_of_primitive.md` ---


The `Direction2d`, `Direction3d`, and `InvalidDirectionError` types have been moved from `bevy::math::primitives` to `bevy::math`.

```rust
// 0.13
use bevy::math::primitives::{Direction2d, Direction3d, InvalidDirectionError};

// 0.14
use bevy::math::{Direction2d, Direction3d, InvalidDirectionError};
```


--- END FILE `release-content/0.14/migration-guides/12018_Add_Direction3dA_and_move_direction_types_out_of_primitive.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12024_reflect_treat_proxy_types_correctly_when_serializing.md` ---


`ReflectSerialize` now requires the `TypePath` and `FromReflect` trait bounds instead of `Reflect`. You will have to implement these traits if you previously opted-out of them. For instance, if you used `#[reflect(type_path = false)]` or `#[reflect(from_reflect = false)]`, you will have to remove them.


--- END FILE `release-content/0.14/migration-guides/12024_reflect_treat_proxy_types_correctly_when_serializing.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12038_fix_some_typos.md` ---


`Node2d::ConstrastAdaptiveSharpening` from `bevy::core_pipeline::core_2d::graph` has been renamed to fix a typo. It was originally `Constrast`, but is now `Contrast`.

```rust
// 0.13
Node2D::ConstrastAdaptiveSharpening

// 0.14
Node2D::ContrastAdaptiveSharpening
```


--- END FILE `release-content/0.14/migration-guides/12038_fix_some_typos.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12055_configure_surface_needs_to_be_on_the_main_thread_on_iOS.md` ---


The `need_new_surfaces()` system has been renamed `need_surface_configuration()` as part of a bug fix where Bevy apps would crash on iOS when the screen orientation was changed.


--- END FILE `release-content/0.14/migration-guides/12055_configure_surface_needs_to_be_on_the_main_thread_on_iOS.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12105_Made_bevy_color_a_dependency_of_bevy_render.md` ---


The `SrgbColorSpace` trait, `HslRepresentation` struct, and `LchRepresentation` struct have been removed in favor of the specific color space structs.

For `SrgbColorSpace`, use `Srgba::gamma_function()` and `Srgba::gamma_function_inverse()`. If you used the `SrgbColorSpace` implementation for `u8`, convert it to an `f32` first:

```rust
// 14 is random, this could be any number.
let nonlinear: u8 = 14;

// Apply gamma function, converting `u8` to `f32`.
let linear: f32 = Srgba::gamma_function(nonlinear as f32 / 255.0);

// Convert back to a `u8`.
let linear: u8 = (linear * 255.0) as u8;
```

Note that this conversion can be costly, especially if called during the `Update` schedule. Consider just using `f32` instead.

`HslRepresentation` and `LchRepresentation` can be replaced with the `From` implementations between `Srgba`, `Hsla`, and `Lcha`.

```rust
// 0.13
let srgb = HslRepresentation::hsl_to_nonlinear_srgb(330.0, 0.7, 0.8);
let lch = LchRepresentation::nonlinear_srgb_to_lch([0.94, 0.66, 0.8]);

// 0.14
let srgba: Srgba = Hsla::new(330.0, 0.7, 0.8, 1.0).into();
let lcha: Lcha = Srgba::new(0.94, 0.66, 0.8, 1.0).into();
```


--- END FILE `release-content/0.14/migration-guides/12105_Made_bevy_color_a_dependency_of_bevy_render.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12116_Port_bevy_core_pipeline_to_LinearRgba.md` ---


`ColorAttachment::new()` now takes `Option<LinearRgba>` instead of `Option<Color>` for the `clear_color`. You can use the `From<Color>` implementation to convert your color.

```rust
let clear_color: Option<LinearRgba> = Some(color.into());
```


--- END FILE `release-content/0.14/migration-guides/12116_Port_bevy_core_pipeline_to_LinearRgba.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12136_Replace_FromWorld_requirement_on_ReflectResource_and_refle.md` ---


`#[reflect(Resource)]` now requires the `FromReflect` trait to be implemented for your resource. This is done by default if you use `#[derive(Reflect)]`, but you structs that opt-out of this behavior will have to write their own implementation. `FromReflect` was added to replace the `FromWorld` requirement, though `FromReflect` is fallible. You may wish to add `#[reflect(FromWorld)]` to your resources to maintain an infallible variant.

Finally, if you use the `ReflectResource` struct you will need to pass a `&TypeRegistry` to its `insert`, `apply_or_insert`, and `copy` methods.


--- END FILE `release-content/0.14/migration-guides/12136_Replace_FromWorld_requirement_on_ReflectResource_and_refle.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12163_Migrate_from_LegacyColor_to_bevy_colorColor.md` ---


Bevy's color support has received a major overhaul, and with it the new `bevy::color` module. Buckle up, many things have been changed!

#### Color space representation

Bevy's main `Color` enum is used to represent color in many different color spaces (such as RGB, HSL, and more). Before, these color spaces were all represented inline as variants:

```rust
enum Color {
    Rgba {
        red: f32,
        green: f32,
        blue: f32,
        alpha: f32,
    },
    Hsla {
        hue: f32,
        saturation: f32,
        lightness: f32,
        alpha: f32,
    },
    // ...
}
```

This has been changed so now each color space has its own dedicated struct:

```rust
struct Srgba {
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
}

struct Hsla {
    hue: f32,
    saturation: f32,
    lightness: f32,
    alpha: f32,
}

enum Color {
    Srgba(Srgba),
    Hsla(Hsla),
    // ...
}
```

This makes it easier to organize and manage different color spaces, and many more color spaces have been added too! To handle this change, you may need to update your match statements:

```rust
// 0.13
match color {
    Color::Rgba { red, green, blue, alpha } => {
        // Something cool here!
    },
    _ => {},
}

// 0.14
match color {
    Color::Srgba(Srgba { red, green, blue, alpha }) => {
        // Something cool here!
    },
    // If you explicitly match every possible color space, you may need to handle more variants.
    // Color::Xyza(Xyza { x, y, z, alpha }) => {
    //     // Something else even cooler here!
    // },
    _ => {}
}
```

Additionally, you must now use the `From` and `Into` implementations when converting between color spaces, as compared to the old helper methods such as `as_rgba` and `as_hsla`.

```rust
// 0.13
let color = Color::rgb(1.0, 0.0, 1.0).as_hsla();

// 0.14
let color: Hsla = Srgba::rgb(1.0, 0.0, 1.0).into();
```

#### `Color` methods

Any mention of RGB has been renamed to [sRGB]. This includes the variant `Color::Rgba` turning into `Color::Srgba` as well as methods such as `Color::rgb` and `Color::rgb_u8` turning into `Color::srgb` and `Color::srgb_u8`.

[sRGB]: https://en.wikipedia.org/wiki/SRGB

Methods to access specific channels of `Color` have been removed due to causing silent, relatively expensive conversions. This includes `Color::r`, `Color::set_r`, `Color::with_r`, and all of the equivalents for `g`, `b` `h`, `s` and `l`. Convert your `Color` into the desired color space, perform your operation there, and then convert it back.

```rust
// 0.13
let mut color = Color::rgb(0.0, 0.0, 0.0);
color.set_b(1.0);

// 0.14
let color = Color::srgb(0.0, 0.0, 0.0);
let srgba = Srgba {
    blue: 1.0,
    ..Srgba::from(color),
};
let color = Color::from(srgba);
```

`Color::hex` has been moved to `Srgba::hex`. Call `.into()` or construct a `Color::Srgba` variant manually to convert it.

`Color::rgb_linear` and `Color::rgba_linear` have been renamed `Color::linear_rgb` and `Color::linear_rgba` to fit the naming scheme of the `LinearRgba` struct.

`Color::as_linear_rgba_f32` and `Color::as_linear_rgba_u32` have been removed. Call `LinearRgba::to_f32_array` and `LinearRgba::to_u32` instead, converting if necessary.

Several other color conversion methods to transform LCH or HSL colors into float arrays or `Vec` types have been removed. Please reimplement these externally or open a PR to re-add them if you found them particularly useful.

Vector field arithmetic operations on `Color` (add, subtract, multiply and divide by a f32) have been removed. Instead, convert your colors into `LinearRgba` space and perform your operations explicitly there. This is particularly relevant when working with emissive or HDR colors, whose color channel values are routinely outside of the ordinary 0 to 1 range.

#### Alpha

Alpha, also known as transparency, used to be referred to by the letter `a`. It is now called by its full name within structs and methods.

- `Color::set_a`, `Color::with_a`, and `Color::a` are now `Color::set_alpha`, `Color::with_alpha`, and `Color::alpha`. These are part of the new `Alpha` trait.
- Additionally, `Color::is_fully_transparent` is now part of the `Alpha`.

#### CSS Constants

The various CSS color constants are no longer stored directly on `Color`. Instead, they’re defined in the `Srgba` color space, and accessed via `bevy::color::palettes`. Call `.into()` on them to convert them into a `Color` for quick debugging use.

```rust
// 0.13
let color = Color::BLUE;

// 0.14
use bevy::color::palettes::css::BLUE;

let color = BLUE;
```

Please note that `palettes::css` is not necessarily 1:1 with the constants defined previously as some names and colors have been changed to conform with the CSS spec. If you need the same color as before, consult the table below or use the color values from the [old constants](https://github.com/bevyengine/bevy/blob/v0.13.2/crates/bevy_render/src/color/mod.rs#L60).

|0.13|0.14|
|-|-|
|`CYAN`|`AQUA`|
|`DARK_GRAY`|`Srgba::gray(0.25)`|
|`DARK_GREEN`|`Srgba::rgb(0.0, 0.5, 0.0)`|
|`GREEN`|`LIME`|
|`LIME_GREEN`|`LIMEGREEN`|
|`PINK`|`DEEP_PINK`|

#### Switch to `LinearRgba`

`WireframeMaterial`, `ExtractedUiNode`, `ExtractedDirectionalLight`, `ExtractedPointLight`, `ExtractedSpotLight`, and `ExtractedSprite` now store a `LinearRgba` rather than a polymorphic `Color`. Furthermore, `Color` no longer implements `AsBindGroup`. You should store a `LinearRgba` instead to avoid conversion costs.


--- END FILE `release-content/0.14/migration-guides/12163_Migrate_from_LegacyColor_to_bevy_colorColor.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12164_Make_sysinfo_diagnostic_plugin_optional.md` ---


`bevy::diagnostic` depends on the `sysinfo` to track CPU and memory usage using `SystemInformationDiagnosticsPlugin`, but compiling and polling system information can be very slow. `sysinfo` is now behind the `sysinfo_plugin` feature flag, which is enabled by default for `bevy` for _not_ for `bevy_diagnostic`.

If you depend on `bevy_diagnostic` directly, toggle the flag in `Cargo.toml`:

```toml
[dependencies]
bevy_diagnostic = { version = "0.14", features = ["sysinfo_plugin"] }
```

If you set `default-features = false` for `bevy`, do the same in `Cargo.toml`:

```toml
[dependencies]
bevy = { version = "0.14", default-features = false, features = ["sysinfo_plugin"] }
```


--- END FILE `release-content/0.14/migration-guides/12164_Make_sysinfo_diagnostic_plugin_optional.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12169_Add_an_index_argument_to_parallel_iteration_helpers_in_bev.md` ---


Closures passed as arguments to `par_chunk_map()`, `par_splat_map()`, `par_chunk_map_mut()`, and `par_splat_map_mut()` now take an additional index argument specifying which part of the slice is being processed.

```rust
// 0.13
items.par_chunk_map(&task_pool, 100, |chunk| {
    // ...
});

// 0.14
items.par_chunk_map(&task_pool, 100, |_index, chunk| {
    // ...
});
```


--- END FILE `release-content/0.14/migration-guides/12169_Add_an_index_argument_to_parallel_iteration_helpers_in_bev.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12189_Rename_Direction2d3d_to_Dir23.md` ---


The `Direction2d` and `Direction3d` types have been renamed to `Dir2` and `Dir3`. They have been shortened to make them easier to type, and to make them consistent with `glam`'s shorter naming scheme (e.g. `Vec2`, `Mat4`).


--- END FILE `release-content/0.14/migration-guides/12189_Rename_Direction2d3d_to_Dir23.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12216_Intern_mesh_vertex_buffer_layouts_so_that_we_dont_have_to_.md` ---


Duplicate `MeshVertexBufferLayout`s are now combined into a single object, `MeshVertexBufferLayoutRef`, which contains an atomically-reference-counted (`Arc`) pointer to the layout. By interning these layouts, the results of `PartialEq` can be cached, resulting in a speedup in rendering. Code that was using `MeshVertexBufferLayout` may need to be updated to use `MeshVertexBufferLayoutRef` instead.


--- END FILE `release-content/0.14/migration-guides/12216_Intern_mesh_vertex_buffer_layouts_so_that_we_dont_have_to_.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12218_Deprecate_SpriteSheetBundle_and_AtlasImageBundle.md` ---


`SpriteSheetBundle` has been deprecated as part of a style and maintenance-motivated move towards optional components that add functionality, rather than a proliferation of bundles. Insert the `TextureAtlas` component alongside a `SpriteBundle` instead.

```rust
// 0.13
commands.spawn(SpriteSheetBundle {
    texture,
    atlas: TextureAtlas {
        layout,
        ..default()
    },
    ..default()
});
// 0.14
commands.spawn((
    SpriteBundle {
        texture,
        ..default()
    },
    TextureAtlas {
        layout,
        ..default()
    },
));
```

`AtlasImageBundle` has been deprecated. Insert the `TextureAtlas` component alongside an `ImageBundle` instead.

```rust
// 0.13
commands.spawn(AtlasImageBundle {
    image,
    atlas: TextureAtlas {
        layout,
        ..default()
    },
    ..default()
});
// 0.14
commands.spawn((
    ImageBundle {
        image,
        ..default()
    },
    TextureAtlas {
        layout,
        ..default()
    },
));
```


--- END FILE `release-content/0.14/migration-guides/12218_Deprecate_SpriteSheetBundle_and_AtlasImageBundle.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12234_Move_commands_module_into_bevyecsworld.md` ---


`Command` and `CommandQueue` have been moved from `bevy::ecs::system` to `bevy::ecs::world`. If you import them directly, you will need to update your import statements.

```rust
// 0.13
use bevy::ecs::system::{Command, CommandQueue};

// 0.14
use bevy::ecs::world::{Command, CommandQueue};
```


--- END FILE `release-content/0.14/migration-guides/12234_Move_commands_module_into_bevyecsworld.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12250_Batching_replace_GpuArrayBufferIndexindex_with_a_u32.md` ---


`GpuArrayBufferIndex::index` is now a `u32` instead of a `NonMaxU32`, since restricting the number isn't necessary anymore. Please update any usage to use `u32` instead.


--- END FILE `release-content/0.14/migration-guides/12250_Batching_replace_GpuArrayBufferIndexindex_with_a_u32.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12252_Gizmo_line_joints.md` ---


Line joins have been added for gizmos, allowing for smooth or sharp corners between lines. If you manually created your own `GizmoConfig`, you will have to specify the type of line joins with the `line_joins` field.

The `Default` implementation of `GizmoLineJoint` is `None`, but you may be interested in `Miter` for sharp joints or `Round` for smooth joints.


--- END FILE `release-content/0.14/migration-guides/12252_Gizmo_line_joints.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12302_Allow_setting_RenderAssetUsages_for_gLTF_meshes__materials.md` ---


It is now possible configure whether meshes and materials should be loaded in the main world, the render world, or both with `GltfLoaderSettings`. The `load_meshes` field has been changed from a `bool` to a `RenderAssetUsages` bitflag, and a new `load_materials` field as been added.

You may need to update any gLTF `.meta` files:

<!-- This is technically RON, but it follows a syntax similar to Rust so we use that instead for syntax highlighting. -->

```rust
// 0.13
load_meshes: true

// 0.14
load_meshes: ("MAIN_WORLD | RENDER_WORLD")
```

If you use `AssetServer::load_with_settings` instead when loading gLTF files, you will also have to update:

```rust
// 0.13
asset_server.load_with_settings("model.gltf", |s: &mut GltfLoaderSettings| {
    s.load_meshes = true;
});

// 0.14
asset_server.load_with_settings("model.gltf", |s: &mut GltfLoaderSettings| {
    s.load_meshes = RenderAssetUsages::MAIN_WORLD | RenderAssetUsages::RENDER_WORLD;
});
```


--- END FILE `release-content/0.14/migration-guides/12302_Allow_setting_RenderAssetUsages_for_gLTF_meshes__materials.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12311_Remove_ComponentStorage_and_associated_types.md` ---


The `Component::Storage` associated type has been replaced with the associated constant `STORAGE_TYPE`, making the `ComponentStorage` trait unnecessary. If you were manually implementing `Component` instead of using the derive macro, update your definitions:

```rust
// 0.13
impl Component for MyComponent {
    type Storage = TableStorage;
}

// 0.14
impl Component for MyComponent {
    const STORAGE_TYPE: StorageType = StorageType::Table;

    // ...
}
```

|Before|After|
|-|-|
|`TableStorage`|`StorageType::Table`|
|`SparseStorage`|`StorageType::SparseSet`|

`Component` is also now no longer object safe. If you were using `dyn Component`, please consider [filing an issue](https://github.com/bevyengine/bevy/issues) describing your use-case.


--- END FILE `release-content/0.14/migration-guides/12311_Remove_ComponentStorage_and_associated_types.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12313_Disentangle_bevy_utilsbevy_cores_reexported_dependencies.md` ---


`bevy::utils` no longer re-exports `petgraph`, `uuid`, `nonmax`, `smallvec`, or `thiserror`. Additionally, `bevy::core` no longer re-exports `bytemuck`'s `bytes_of`, `cast_slice`, `Pod`, and `Zeroable`.

If you need any of these as dependencies, you can add them to your own `Cargo.toml`.


--- END FILE `release-content/0.14/migration-guides/12313_Disentangle_bevy_utilsbevy_cores_reexported_dependencies.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12314_Clean_up_type_registrations.md` ---


Many external types are no longer registered into the type registry by Bevy's default plugin. Generally, only types used by other Bevy types (due to the new recursive registration) will be registered by default. If you were using reflection features with types from `std` or `glam` you may need to manually register them.

```rust
App::new().register_type::<DMat3>();
```


--- END FILE `release-content/0.14/migration-guides/12314_Clean_up_type_registrations.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12394_Gizmo_line_styles.md` ---


It is now possible to configure the line style (such as solid or dotted) of gizmos using `GizmoConfig::line_style`. If you manually create a `GizmoConfig`, you will have to specify this field.


--- END FILE `release-content/0.14/migration-guides/12394_Gizmo_line_styles.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12407_Fix_leftover_references_to_children_when_despawning_audio_.md` ---


You can configure the behavior of spawned audio with the `PlaybackMode` enum. One of its variants, `PlaybackMode::Despawn`, would despawn the entity when the audio finished playing.

There was previously a bug where this would only despawn the entity and not its children. This has been fixed, so now `despawn_recursive()` is called when the audio finishes.

If you relied on this behavior, consider using `PlaybackMode::Remove` to just remove the audio components from the entity or `AudioSink::empty()` to check whether any audio is finished and manually `despawn()` it.


--- END FILE `release-content/0.14/migration-guides/12407_Fix_leftover_references_to_children_when_despawning_audio_.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12426_separating_finite_and_infinite_3d_planes.md` ---


The `Plane3d` primitive is now a finite plane with a `half_size` field. If you want an infinite plane, use the new `InfinitePlane3d`.

```rust
// 0.13
let plane = Plane3d::new(Vec3::Y);

// 0.14
let plane = Plane3d {
    normal: Dir3::Y,
    half_size: Vec2::new(10., 10.),
};
let plane = InfinitePlane3d::new(Vec3::Y);
```


--- END FILE `release-content/0.14/migration-guides/12426_separating_finite_and_infinite_3d_planes.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12453_13277_14029_sorted_and_binned_render_phase_items.md` ---


Usage of `PhaseItem` has been split into `BinnedPhaseItem` and `SortedPhaseItem`. If you have custom `PhaseItem`s you will need to choose one of the new types. Notably some phases _must_ be Sorted (such as Transparent and Transmissive), while others can be Binned. Effectively Sorted is "what Bevy did before" and Binned is new, and the point of this change is to avoid sorting when possible for improved performance.

If you're looking for a quick migration, consider picking [`SortedPhaseItem`](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/trait.SortedPhaseItem.html) which requires the fewest code changes.

If you're looking for higher performance (and your phase doesn’t require sorting) you may want to pick [`BinnedPhaseItem`](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/trait.BinnedPhaseItem.html). Notably bins are populated based on `BinKey` and everything in the same bin is potentially batchable.

If you are only consuming these types, then a `Query` for a type like `&mut RenderPhase<Transparent2d>` will become a `Resource` as such:

```rust
mut transparent_render_phases: ResMut<ViewSortedRenderPhases<Transparent2d>>
```

`ViewSortedRenderPhases` and `ViewBinnedRenderPhases` are used in accordance with which phase items you're trying to access (sorted or binned).

Examples of [`SortedPhaseItems`s](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/trait.SortedPhaseItem.html#implementors):

- Transmissive3d
- Transparent2d
- Transparent3d
- TransparentUi

Examples of [`BinnedPhaseItem`s](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/trait.BinnedPhaseItem.html#implementors) include:

- Opaque3d
- Opaque3dPrepass
- Opaque3dDeferred
- AlphaMask3d
- AlphaMask3dPrepass
- AlphaMask3dDeferred
- [Shadow](https://docs.rs/bevy/0.14.0/bevy/pbr/struct.Shadow.html)

If you do not have a mesh (such as for GPU-driven particles or procedural generation) and want to use the new binned behavior, the [`BinnedRenderPhase`](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/struct.BinnedRenderPhase.html) includes a `non_mesh_items` collection which correlates with the [`BinnedRenderPhaseType`](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/struct.BinnedRenderPhase.html). This type is used when [add](https://docs.rs/bevy/0.14.0/bevy/render/render_phase/struct.BinnedRenderPhase.html#method.add)ing items to the `BinnedRenderPhase`.

It may be additionally useful to checkout the new [custom_phase_item example](https://github.com/bevyengine/bevy/blob/5876352206d1bcea792825bf013eb212383b73d6/examples/shader/custom_phase_item.rs) which details some of the new APIs.


--- END FILE `release-content/0.14/migration-guides/12453_13277_14029_sorted_and_binned_render_phase_items.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12474_Remove_archetype_component_access_from_QueryState.md` ---


`QueryState` no longer stores an `Access<ArchetypeComponentId>`, you must now pass it as an argument to each method that uses it. To account for this change:

- `QueryState::archetype_component_access` has been removed. You can work around this by accessing the surrounding `SystemState`s instead.
- `QueryState::new_archetype` and `QueryState::update_archetype_component_access` now require an `&mut Access<ArchetypeComponentId>` as a parameter.


--- END FILE `release-content/0.14/migration-guides/12474_Remove_archetype_component_access_from_QueryState.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12476_Store_only_the_IDs_needed_for_Query_iteration.md` ---


`QueryState::matched_tables` and `QueryState::matched_archetypes` now return iterators instead of slices. If possible, use the combinators available from the [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) trait. In a worst-case scenario you may call `Iterator::collect()` into a `Vec`, which can then be converted into a slice.


--- END FILE `release-content/0.14/migration-guides/12476_Store_only_the_IDs_needed_for_Query_iteration.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12499_Make_from_reflect_or_world_also_try_ReflectDefault_and_imp.md` ---


`ReflectBundle::insert` now requires an additional `&TypeRegistry` parameter.


--- END FILE `release-content/0.14/migration-guides/12499_Make_from_reflect_or_world_also_try_ReflectDefault_and_imp.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12512_Update_to_fixedbitset_05.md` ---


`Access::grow` from `bevy::ecs::query` has been removed. Many operations now automatically grow the capacity.

```rust
// 0.13
let mut access = Access::new();
access.grow(1);
// Other operations...

// 0.14
let mut access = Access::new();
// Other operations...
```


--- END FILE `release-content/0.14/migration-guides/12512_Update_to_fixedbitset_05.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12538_Add_setting_to_enabledisable_shadows_to_MaterialPlugin.md` ---


`MaterialPlugin` now has a `shadows_enabled` property. If you manually constructed this plugin, you may need to set it. By default it is true, but you can disable shadows entirely by setting it to false.


--- END FILE `release-content/0.14/migration-guides/12538_Add_setting_to_enabledisable_shadows_to_MaterialPlugin.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12547_Add_AsyncSeek_trait_to_Reader_to_be_able_to_seek_inside_as.md` ---


The asset loader's `Reader` type alias now requires the new `AsyncSeek` trait. Please implement `AsyncSeek` for any structures that must be a `Reader`, or use an alternative if seeking is not supported.

If this is a problem for you, please chime in at [bevy#12880](https://github.com/bevyengine/bevy/issues/12880) and help us improve the design for 0.15!


--- END FILE `release-content/0.14/migration-guides/12547_Add_AsyncSeek_trait_to_Reader_to_be_able_to_seek_inside_as.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12550_Use_asyncfn_in_traits_rather_than_BoxedFuture.md` ---


In Rust 1.75, [`async fn` was stabilized for traits](https://blog.rust-lang.org/2023/12/28/Rust-1.75.0.html#async-fn-and-return-position-impl-trait-in-traits). Some traits have been switched from returning `BoxedFuture` to be an `async fn`, specifically:

- `AssetReader`
- `AssetWriter`
- `AssetLoader`
- `AssetSaver`
- `Process`

Please update your trait implementations:

```rust
// 0.13
impl AssetLoader for MyAssetLoader {
    // ...

    fn load<'a>(
        &'a self,
        reader: &'a mut Reader,
        _settings: &'a (),
        _load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<Self::Asset, Self::Error>> {
        // Note that you had to pin the future.
        Box::pin(async move {
            let mut bytes = Vec::new();
            reader.read_to_end(&mut bytes).await?;
            Ok(bytes)
        })
    }
}

// 0.14
impl AssetLoader for MyAssetLoader {
    // ...

    async fn load<'a>(
        &'a self,
        reader: &'a mut Reader<'_>,
        _settings: &'a (),
        _load_context: &'a mut LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
        // No more need to pin the future, just write it!
        let mut bytes = Vec::new();
        reader.read_to_end(&mut bytes).await?;
        Ok(bytes)
    }
}
```

Because these traits now use `async`, they are no longer object safe. If you need to receive or store `&dyn Trait`, use the `&dyn ErasedTrait` variant instead. For instance:

```rust
// 0.13
struct MyReader(Box<dyn AssetReader>);

// 0.14
struct MyReader(Box<dyn ErasedAssetReader>);
```


--- END FILE `release-content/0.14/migration-guides/12550_Use_asyncfn_in_traits_rather_than_BoxedFuture.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12551_Remove_WorldCell.md` ---


`WorldCell` has been removed due to its incomplete nature, tendency to generate runtime panics, and the presence of multiple good alternatives. If you were using it to fetch multiple distinct resource values, consider using a `SystemState` instead with the `SystemState::get()` method.

If `SystemState` does not fit your use-case and `unsafe` is tolerable, you can use `UnsafeWorldCell`. It is more performant and featureful, but lacks the runtime checks.


--- END FILE `release-content/0.14/migration-guides/12551_Remove_WorldCell.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12557_refactor_separate_out_PanicHandlerPlugin.md` ---


`LogPlugin` used to silently override the panic handler on WASM targets. This functionality has now been split out into the new `PanicHandlerPlugin`, which was added to `DefaultPlugins`.

If you want nicer error messages on WASM but don't use `DefaultPlugins`, make sure to manually add `PanicHandlerPlugin` to the app.

```rust
App::new()
    .add_plugins((MinimalPlugins, PanicHandlerPlugin))
    .run()
```


--- END FILE `release-content/0.14/migration-guides/12557_refactor_separate_out_PanicHandlerPlugin.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12559_Remove_needless_color_specializaion_for_SpritePipeline.md` ---


The `COLORED` flag of `SpritePipelineKey` has been removed, since it is no longer used. In doing so, the raw values of `HDR`, `TONEMAP_IN_SHADER`, and `DEBAND_DITHER` have changed. If you are manually converting a `u32` into `SpritePipelineKey`, you may need to update it.


--- END FILE `release-content/0.14/migration-guides/12559_Remove_needless_color_specializaion_for_SpritePipeline.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12574_Make_cardinal_splines_include_endpoints.md` ---


There was a bug in `CubicCardinalSpline` where the curve would only pass through the interior control points, not the points at the beginning and end. (For an in-depth analysis, see [this issue](https://github.com/bevyengine/bevy/issues/12570).) This has been fixed so that the curve passes through all control points, but it may break behavior you were depending on.

If you rely on the old behavior of `CubicCardinalSpline`, you will have to truncate any parametrizations you used in order to access a curve identical to the one you had previously. This can be done by chopping off a unit-distance segment from each end of the parametrizing interval. For instance, if your code looks as follows:

```rust
fn interpolate(t: f32) -> Vec2 {
    let points = [
        vec2(-1.0, -20.0),
        vec2(3.0, 2.0),
        vec2(5.0, 3.0),
        vec2(9.0, 8.0),
    ];
    let my_curve = CubicCardinalSpline::new(0.3, points).to_curve();
    my_curve.position(t)
}
```

Then in order to obtain similar behavior, `t` will need to be shifted up by 1 (since the output of `CubicCardinalSpline::to_curve` has introduced a new segment in the interval [0,1]), displacing the old segment from [0,1] to [1,2]:

```rust
fn interpolate(t: f32) -> Vec2 {
    let points = [
        vec2(-1.0, -20.0),
        vec2(3.0, 2.0),
        vec2(5.0, 3.0),
        vec2(9.0, 8.0),
    ];
    let my_curve = CubicCardinalSpline::new(0.3, points).to_curve();
    // Add 1 here to restore original behavior.
    my_curve.position(t + 1)
}
```

(Note that this does not provide identical output for values of `t` outside of the interval [0,1].)

On the other hand, any user who was specifying additional endpoint tangents simply to get the curve to pass through the right points (i.e. not requiring exactly the same output) can simply omit the endpoints that were being supplied only for control purposes.


--- END FILE `release-content/0.14/migration-guides/12574_Make_cardinal_splines_include_endpoints.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12575_Color_maths_4.md` ---


It was previously possible to multiply and divide a `Color` by an `f32`, which is now removed. You must now operate on a specific color space, such as `LinearRgba`. Furthermore, these operations used to skip the alpha channel, but that is no longer the case.

```rust
// 0.13
let color = Color::RgbaLinear {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
} * 0.5;

// Alpha is preserved, ignoring the multiplier.
assert_eq!(color.a(), 1.0);

// 0.14
let color = LinearRgba {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
} * 0.5;

// Alpha is included in multiplication.
assert_eq!(color.alpha, 0.5);
```

If you need the alpha channel to remain untouched, consider creating your own helper method:

```rust
fn legacy_div_f32(color: &mut LinearRgba, scale: f32) {
    color.red /= scale;
    color.green /= scale;
    color.blue /= scale;
}

let mut color = LinearRgba {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
};

legacy_div_f32(&mut color, 2.0);
```

If you are fine with the alpha changing, but need it to remain within the range of 0.0 to 1.0, consider clamping it:

```rust
let mut color = LinearRgba {
    red: 1.0,
    green: 1.0,
    blue: 1.0,
    alpha: 1.0,
} * 10.0;

// Force alpha to be within [0.0, 1.0].
color.alpha = color.alpha.clamp(0.0, 1.0);
```

<!-- TODO: I want this to be a callout, but shortcodes don't work here. -->
Note that in some cases, such as rendering sprites, the alpha is automatically clamped so you do not need to do it manually.


--- END FILE `release-content/0.14/migration-guides/12575_Color_maths_4.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12582_Divide_the_single_VisibleEntities_list_into_separate_lists.md` ---


`check_visibility()` and `VisibleEntities` now store the four types of renderable entities–-2D meshes, 3D meshes, lights, and UI elements-–separately. If your custom rendering code examines `VisibleEntities`, it will now need to specify which type of entity it’s interested in using the `WithMesh2d`, `WithMesh`, `WithLight`, and `WithNode` types respectively. If your app introduces a new type of renderable entity, you’ll need to add an instance of the `check_visibility` system with the appropriate query filter to the main world schedule to accommodate your new component or components. For example:

```rust
struct MyCustomRenderable;

App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(
        PostUpdate,
        check_visibility::<With<MyCustomRenderable>>
            .in_set(VisibilitySystems::CheckVisibility)
    )
    .run();
```


--- END FILE `release-content/0.14/migration-guides/12582_Divide_the_single_VisibleEntities_list_into_separate_lists.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12605_Make_AssetActionIgnore_not_copy_assets_to_imported_assets.md` ---


The `ProcessResult` enum, used in asset loading, has a new `Ignore` variant. You may need to update your `match` statements.


--- END FILE `release-content/0.14/migration-guides/12605_Make_AssetActionIgnore_not_copy_assets_to_imported_assets.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12655_Removed_IntoAssedIdT_for_HandleT_as_mentioned_in_12600.md` ---


Converting from a `Handle` to an `AssetId` using `Into` was removed because it was a footgun that could potentially drop the asset if the `Handle` was a strong reference. If you need the `AssetId`, please use `Handle::id()` instead.

```rust
// 0.13
let id: AssetId<T> = handle.into();

// 0.14
let id = handle.id();
```


--- END FILE `release-content/0.14/migration-guides/12655_Removed_IntoAssedIdT_for_HandleT_as_mentioned_in_12600.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12686_Meshing_for_Triangle3d_primitive.md` ---


The UV-mapping of `Triangle2d` has changed with this PR: the main difference is that the UVs are no longer dependent on the triangle’s absolute coordinates but instead follow translations of the triangle itself in its definition. If you depended on the old UV-coordinates for `Triangle2d`, then you will have to update affected areas to use the new ones which can be briefly described as follows:

- The first coordinate is parallel to the line between the first two vertices of the triangle.
- The second coordinate is orthogonal to this, pointing in the direction of the third point.

Generally speaking, this means that the first two points will have coordinates `[_, 0.]`, while the third coordinate will be `[_, 1.]`, with the exact values depending on the position of the third point relative to the first two. For acute triangles, the first two vertices always have UV-coordinates `[0., 0.]` and `[1., 0.]` respectively. For obtuse triangles, the third point will have coordinate `[0., 1.]` or `[1., 1.]`, with the coordinate of one of the two other points shifting to maintain proportionality.

For example: 

- The default `Triangle2d` has UV-coordinates `[0., 0.]`, `[0., 1.]`, [`0.5, 1.]`.
- The triangle with vertices `vec2(0., 0.)`, `vec2(1., 0.)`, `vec2(2., 1.)` has UV-coordinates `[0., 0.]`, `[0.5, 0.]`, `[1., 1.]`.
- The triangle with vertices `vec2(0., 0.)`, `vec2(1., 0.)`, `vec2(-2., 1.)` has UV-coordinates `[2./3., 0.]`, `[1., 0.]`, `[0., 1.]`.


--- END FILE `release-content/0.14/migration-guides/12686_Meshing_for_Triangle3d_primitive.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12698_Restore_pre_0131_Root_Node_Layout_behavior.md` ---


There was a regression in 0.13.1 `NodeBundle`s to destroy previous ones when spawned, and the original workaround was to add `position_type: Absolute` to all of the root nodes. This bug is now fixed, so you can remove the workaround.


--- END FILE `release-content/0.14/migration-guides/12698_Restore_pre_0131_Root_Node_Layout_behavior.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12709_Error_info_has_been_added_to_LoadStateFailed.md` ---


Rust prides itself on its error handling, and Bevy has been steadily catching up. Previously, when checking if an asset was loaded using `AssetServer::load_state` (and variants), the only information returned on an error was the empty `LoadState::Failed`. Not very useful for debugging!

Now, a full `AssetLoadError` is included inside `Failed` to tell you exactly what went wrong. You may need to update your `match` and `if let` statements to handle this new value:

```rust
// 0.13
match asset_server.load_state(asset_id) {
    // ...
    LoadState::Failed => eprintln!("Could not load asset!"),
}

// 0.14
match asset_server.load_state(asset_id) {
    // ...
    LoadState::Failed(error) => eprintln!("Could not load asset! Error: {}", error),
}
```

Furthermore, the `Copy`, `PartialOrd`, and `Ord` implementations have been removed from `LoadState`. You can explicitly call `.clone()` instead of copying the enum, and you can manually re-implement `Ord` as a helper method if required.


--- END FILE `release-content/0.14/migration-guides/12709_Error_info_has_been_added_to_LoadStateFailed.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12711_Fix_Ord_and_PartialOrd_differing_for_FloatOrd_and_optimize.md` ---


`FloatOrd`'s `PartialOrd` implementation used to differ in behavior from its `Ord` implementation, but it has since been fixed so they both now match. The current implementation of `PartialOrd` will never return `None`, as it now falls back to the `Ord` implementation. If you depended on this mismatched behavior, consider using the `PartialOrd` implementation on the inner `f32`.


--- END FILE `release-content/0.14/migration-guides/12711_Fix_Ord_and_PartialOrd_differing_for_FloatOrd_and_optimize.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12715_Fix_TypeRegistry_use_in_dynamic_scene.md` ---


`SceneSerializer` and all related serialization helpers now take `&TypeRegistry` instead of `&TypeRegistryArc`. You can access the former from the latter with `TypeRegistryArc::read()`.

Furthermore, `DynamicScene::serialize_ron()` has been renamed to `serialize()`. This has been done to highlight that this function is not about serializing into RON specifically, but rather the official Bevy scene format (`.scn` / `.scn.ron`). This leaves room to change the format in the future, if need be.

```rust
// 0.13
let world = World::new();
let scene = DynamicScene::from_world(&world);

let type_registry_arc: &TypeRegistryArc = &**world.resource::<AppTypeRegistry>();

let serialized_scene = scene.serialize_ron(type_registry_arc).unwrap();

// 0.14
let world = World::new();
let scene = DynamicScene::from_world(&world);

let type_registry_arc: &TypeRegistryArc = &**world.resource::<AppTypeRegistry>();

// We now need to retrieve the inner `TypeRegistry`.
let type_registry = type_registry_arc.read();

// `serialize_ron` has been renamed to `serialize`, and now takes a reference to `TypeRegistry`.
let serialized_scene = scene.serialize(&type_registry).unwrap();
```


--- END FILE `release-content/0.14/migration-guides/12715_Fix_TypeRegistry_use_in_dynamic_scene.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12721_bevy_reflect_Rename_UntypedReflectDeserializer_to_ReflectD.md` ---


`UntypedReflectDeserializer` has been renamed to `ReflectDeserializer`. Any usage will need to be updated accordingly:

```rust
// 0.13
let reflect_deserializer = UntypedReflectDeserializer::new(&registry);

// 0.14
let reflect_deserializer = ReflectDeserializer::new(&registry);
```


--- END FILE `release-content/0.14/migration-guides/12721_bevy_reflect_Rename_UntypedReflectDeserializer_to_ReflectD.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12732_Move_FloatOrd_into_bevy_math.md` ---


`FloatOrd` has been moved to into the `bevy::math` module. Please update your import statements:

```rust
// 0.13
use bevy::utils::FloatOrd;

// 0.14
use bevy::math::FloatOrd;
```


--- END FILE `release-content/0.14/migration-guides/12732_Move_FloatOrd_into_bevy_math.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12747_Move_Point_out_of_cubic_splines_module_and_expand_it.md` ---


The `Point` trait has been replaced by `VectorSpace`. These traits are very similar, with a few minor changes:

- `VectorSpace` implementations must now provide the `ZERO` constant.
- `VectorSpace` now requires the `Div<f32, Output = Self>` and `Neg` trait bounds.
- `VectorSpace` no longer requires the `Add<f32, Output = Self>`, `Sum`, and `PartialEq` trait bounds.

For most cases you can replace all `Point` usage with `VectorSpace`, but you may have to make further changes if you depend on anything in the list above.


--- END FILE `release-content/0.14/migration-guides/12747_Move_Point_out_of_cubic_splines_module_and_expand_it.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12749_Clean_up_WinitWindowsremove_window.md` ---


`WinitWindows::get_window_entity` now returns `None` after a window is closed, instead of an entity that no longer exists.


--- END FILE `release-content/0.14/migration-guides/12749_Clean_up_WinitWindowsremove_window.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12757_Update_glam_version_requirement_from_025_to_027.md` ---


`glam` has been updated from 0.25 to 0.27. Please view [the changelog] for both 0.26 and 0.27 to update your code.

[the changelog]: https://github.com/bitshifter/glam-rs/blob/e1b521a4c8146f27b97e510d38fab489c39650d1/CHANGELOG.md#0270---2024-03-23

The largest breaking change is that the `fract()` method for vector types now evaluates as `self - self.trunc()` instead of `self - self.floor()`. If you require the old behavior, use the `fract_gl()` method instead.


--- END FILE `release-content/0.14/migration-guides/12757_Update_glam_version_requirement_from_025_to_027.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12772_Moves_intern_and_label_modules_into_bevy_ecs.md` ---


The `bevy::utils::label` and `bevy::utils::intern` modules have been moved to `bevy::ecs`, as well as the `bevy::utils::define_label` macro as part of an active effort to shrink `bevy::utils`. You will have to update your import statements to use the new paths.


--- END FILE `release-content/0.14/migration-guides/12772_Moves_intern_and_label_modules_into_bevy_ecs.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12773_Generate_MeshUniforms_on_the_GPU_via_compute_shader_where_.md` ---


Custom render phases now need multiple systems beyond just `batch_and_prepare_render_phase`. Code that was previously creating custom render phases should now add a `BinnedRenderPhasePlugin` or `SortedRenderPhasePlugin` as appropriate, instead of directly adding `batch_and_prepare_render_phase`.


--- END FILE `release-content/0.14/migration-guides/12773_Generate_MeshUniforms_on_the_GPU_via_compute_shader_where_.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12791_Microoptimize_queue_material_meshes_primarily_to_remove_bi.md` ---


The `primitive_topology` field on `GpuMesh` is now an getter method: `GpuMesh::primitive_topology()`.

For performance reasons, `MeshPipelineKey` has been split into `BaseMeshPipelineKey`, which lives in `bevy::render`, and `MeshPipelineKey`, which lives in `bevy::pbr`. These two may be combined with bitwise-or to produce the final `MeshPipelineKey`.

```rust
let base_pipeline_key = BaseMeshPipelineKey::all();
let pbr_pipeline_key = MeshPipelineKey::all();

let pipeline_key: u64 = base_pipeline_key.bits() | pbr_pipeline_key.bits();
```


--- END FILE `release-content/0.14/migration-guides/12791_Microoptimize_queue_material_meshes_primarily_to_remove_bi.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12811_remove_DeterministicRenderingConfig.md` ---


`DeterministicRenderingConfig` has been removed because its only property, `stable_sort_z_fighting`, is no longer needed. Z-fighting has been generally removed now that opaque items are binned instead of sorted.


--- END FILE `release-content/0.14/migration-guides/12811_remove_DeterministicRenderingConfig.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12827_Consolidate_RenderUiMaterials2d_into_RenderAssets.md` ---


`RenderMaterials`, `RenderMaterials2d`, and `RenderUiMaterials` have all been replaced with the `RenderAssets` resource. If you need access a `PreparedMaterial<T>` using an `AssetId`, use `RenderAssets::get` instead.

Furthermore, the `RenderAsset` trait should now be implemented for destination types rather than source types. If you need to access the source type, use the `RenderAsset::SourceAsset` associated type.

```rust
// 0.13
impl RenderAsset for Image {
    type PreparedAsset = GpuImage;

    // ...
}

// 0.14
impl RenderAsset for GpuImage {
    type SourceAsset = Image;

    // ...
}
```


--- END FILE `release-content/0.14/migration-guides/12827_Consolidate_RenderUiMaterials2d_into_RenderAssets.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12847_Remove_stepping_from_default_features.md` ---


The system stepping feature is now disabled by default. It generally should not be included in shipped games, and adds a small but measurable performance overhead. To enable it, add the `bevy_debug_stepping` feature to your `Cargo.toml`:

```toml
[dependencies]
bevy = { version = "0.14", features = ["bevy_debug_stepping"] }
```

Code using `Stepping` will still compile with the feature disabled, but will print an error message at runtime if the application calls `Stepping::enable()`.


--- END FILE `release-content/0.14/migration-guides/12847_Remove_stepping_from_default_features.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12859_remove_close_on_esc.md` ---


The `close_on_esc` system was removed because it was too opiniated and lacked customization. If you used this system, you may copy its contents below:

```rust
pub fn close_on_esc(
    mut commands: Commands,
    focused_windows: Query<(Entity, &Window)>,
    input: Res<ButtonInput<KeyCode>>,
) {
    for (window, focus) in focused_windows.iter() {
        if !focus.focused {
            continue;
        }

        if input.just_pressed(KeyCode::Escape) {
            commands.entity(window).despawn();
        }
    }
}
```

You may be interested in using the built-in keybinds provided by the operating system instead, such as <kbd>Alt+F4</kbd> and <kbd>Command+Q</kbd>.


--- END FILE `release-content/0.14/migration-guides/12859_remove_close_on_esc.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12862_Disable_RAY_QUERY_and_RAY_TRACING_ACCELERATION_STRUCTURE_b.md` ---


The `RAY_QUERY` and `RAY_TRACING_ACCELERATION_STRUCTURE` `wgpu` features are now disabled by default, due to some users having their program crash while initializing. (The `wgpu` issue for this can be found [here](https://github.com/gfx-rs/wgpu/issues/5488).)

If you use these features, you will need to re-enable them through `WgpuSettings::features`:

```rust
let mut settings = WgpuSettings::default();

// Enable `RAY_QUERY` and `RAY_TRACING_ACCELERATION_STRUCTURE`, along with the defaults.
settings.features |= WgpuFeatures::RAY_QUERY | WgpuFeatures::RAY_TRACING_ACCELERATION_STRUCTURE;

App::new()
    .add_plugins(DefaultPlugins.set(RenderPlugin {
        render_creation: settings.into(),
        ..default()
    }))
    .run()
```

Note that `WgpuSettings::default()` automatically configures good default flags for Bevy, while `WgpuFeatures::default()` is the equivalent of `WgpuFeatures::empty()`.


--- END FILE `release-content/0.14/migration-guides/12862_Disable_RAY_QUERY_and_RAY_TRACING_ACCELERATION_STRUCTURE_b.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12868_Deprecate_ReceivedCharacter.md` ---


`ReceivedCharacter` is now deprecated due to `winit` reworking their keyboard system, switch to using `KeyboardInput` instead.

```rust
// 0.13
fn listen_characters(events: EventReader<ReceivedCharacter>) {
    for event in events.read() {
        info!("{}", event.char);
    }
}

// 0.14
fn listen_characters(events: EventReader<KeyboardInput>) {
    for event in events.read() {
        // Only check for characters when the key is pressed.
        if !event.state.is_pressed() {
            continue;
        }

        // Note that some keys such as `Space` and `Tab` won't be detected as a character.
        // Instead, check for them as separate enum variants.
        match &event.logical_key {
            Key::Character(character) => {
                info!("{} pressed.", character);
            },
            Key::Space => {
                info!("Space pressed.");
            },
            _ => {},
        }
    }
}
```


--- END FILE `release-content/0.14/migration-guides/12868_Deprecate_ReceivedCharacter.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12889_Implement_GPU_frustum_culling.md` ---


For `PhaseItem`s, the `dynamic_offset: Option<NonMaxU32>` field is now `extra_index: PhaseItemExtraIndex`, which wraps a `u32`. Instead of `None`, use `PhaseItemExtraIndex::NONE`.

This change affects `AlphaMask3d`, `AlphaMask3dDeferred`, `AlphaMask3dPrepass`, `Opaque2d`, `Opaque3dDeferred`, `Opaque3dPrepass`, `Shadow`, `Transmissive3d`, `Transparent2d`, `Transparent3d`, and `TransparentUi`.


--- END FILE `release-content/0.14/migration-guides/12889_Implement_GPU_frustum_culling.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12895_Make_some_ReflectComponentReflectBundle_methods_work_with_.md` ---


`ReflectComponentFns` and `ReflectBundleFns` have been updated to work with `EntityMut`, as compared to the more restricting `EntityWorldMut`. You will have to update your usage of `ReflectComponentFns::apply`, `ReflectComponentFns::reflect_mut`, and `ReflectBundleFns::apply`.

If you just use `ReflectComponent` and `ReflectBundle`, you will not have change your code because `EntityWorldMut` implements `Into<EntityMut>`.


--- END FILE `release-content/0.14/migration-guides/12895_Make_some_ReflectComponentReflectBundle_methods_work_with_.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12902_Add_previous_view_uniformsinverse_view.md` ---


`PreviousViewProjection` has been renamed to `PreviousViewData` and `PreviousViewProjectionUniformOffset` has been renamed to `PreviousViewUniformOffset`. Additionally, a few systems have been renamed:

- `update_previous_view_projections` to `update_previous_view_data`
- `extract_camera_previous_view_projection` to `extract_camera_previous_view_data`
- `prepare_previous_view_projection_uniforms` to `prepare_previous_view_uniforms`


--- END FILE `release-content/0.14/migration-guides/12902_Add_previous_view_uniformsinverse_view.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12910_Implement_percentagecloser_filtering_PCF_for_point_lights.md` ---


`ShadowFilteringMethod::Castano13` and `ShadowFilteringMethod::Jimenez14` have been renamed to `Gaussian` and `Temporal` respectively to leave room for expansion in the future, though the corresponding authors are still credited in the documentation.


--- END FILE `release-content/0.14/migration-guides/12910_Implement_percentagecloser_filtering_PCF_for_point_lights.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12917_flipping_texture_coords_methods_has_been_added_to_the_Stan.md` ---


`Quad` was deprecated in 0.13, though its replacement `Rectangle` did not provide a clear replacement for `Quad::flip`. This has been amended: now you can call `flip()` on any `StandardMaterial`.

Please note that `Quad::flip` was specifically _horizontal_ flipping, though `StandardMaterial::flip()` supports both _vertical_ and _horizontal_ flipping.


--- END FILE `release-content/0.14/migration-guides/12917_flipping_texture_coords_methods_has_been_added_to_the_Stan.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12936_Optimize_Event_Updates.md` ---


`Events::update()` has been optimized to be `O(1)` for the amount of events registered. In doing so, a few systems and run conditions have been changed.

Events are registered to a `World` using `EventRegistry` instead of the `Events` resource:

```rust
// 0.13
world.insert_resource(Events::<MyEvent>::default());

// 0.14
EventRegistry::register_event::<MyEvent>(&mut world);
```

A few systems and run conditions have been changed as well:

- `event_update_system` no longer uses generics and now has different arguments.
- `signal_event_update_system` now has different arguments.
- `reset_event_update_signal_system` has been removed.
- `event_update_condition` now has different arguments.

While not related to events, the `virtual_time_system` has been changed as well. It has been converted from a system to a regular function, and now takes `&T` and `&mut T` instead of `Res<T>` and `ResMut<T>`.


--- END FILE `release-content/0.14/migration-guides/12936_Optimize_Event_Updates.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12945_Fix_rendering_of_sprites_text_and_meshlets_after_12582.md` ---


`Text` now requires a `SpriteSource` marker component in order to render. This component has been added to `Text2dBundle` and may need to be specified if `..default()` isn't used.


--- END FILE `release-content/0.14/migration-guides/12945_Fix_rendering_of_sprites_text_and_meshlets_after_12582.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12954_Expose_desired_maximum_frame_latency_through_window_creati.md` ---


The `desired_maximum_frame_latency` field has been added to `Window` and `ExtractedWindow`. It is an `Option<NonZero<u32>>` that hints the maximum number of queued frames allowed on the GPU. Higher values may result in smoother frames and avoids freezes due to CPU-GPU data upload, but all at the cost of higher input latency. Setting `desired_maximum_frame_latency` to `None` will make it fall back to the default value, which is currently 2.


--- END FILE `release-content/0.14/migration-guides/12954_Expose_desired_maximum_frame_latency_through_window_creati.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12978_Introduce_a_WindowWrapper_to_extend_the_lifetime_of_the_wi.md` ---


Windowing backends now need to store their window in the new `WindowWrapper`, so that Bevy can control when it is dropped. This fixes a number of bugs and crashes related to the window being dropped before the pipelined renderer is finished drawing to it.


--- END FILE `release-content/0.14/migration-guides/12978_Introduce_a_WindowWrapper_to_extend_the_lifetime_of_the_wi.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12982_Clean_up_2d_render_phases.md` ---


`Node2d::MainPass` has been split into 3 separate phases: `StartMainPass`, `MainTransparentPass`, and `EndMainPass`. If you previously used `MainPass` to order your own custom nodes, you now need to order them relative to `StartMainPass` and `EndMainPass`.


--- END FILE `release-content/0.14/migration-guides/12982_Clean_up_2d_render_phases.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12986_Make_Transformrotate_axis_and_Transformrotate_local_axis_u.md` ---


`Transform::rotate_axis()` and `Transform::rotate_local_axis()` now require a `Dir3` instead of a `Vec3` because the axis is expected to be normalized. In general you can call `Dir3::new()` with a `Vec3`, which will automatically normalize it, though you must handle the `Result` in case the vector is invalid.

Note that most constants like `Vec3::X` have a corresponding `Dir3` variant, such as `Dir3::X`.


--- END FILE `release-content/0.14/migration-guides/12986_Make_Transformrotate_axis_and_Transformrotate_local_axis_u.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/12997_multi_threaded_feature_rename.md` ---


The `multi-threaded` feature has been renamed to `multi_threaded` for `bevy`, `bevy_asset`, `bevy_ecs`, `bevy_render`, `bevy_tasks`, and `bevy_internal`. Please update your `Cargo.toml` if you manually specify Bevy features.


--- END FILE `release-content/0.14/migration-guides/12997_multi_threaded_feature_rename.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13022_Make_AppExit_more_specific_about_exit_reason.md` ---


The `AppExit` event is now an enum that represents whether the code exited successfully or not. If you construct it, you must now specify `Success` or `Error`:

```rust
// 0.13
fn send_exit(mut writer: EventWriter<AppExit>) {
    writer.send(AppExit);
}

// 0.14
fn send_exit(mut writer: EventWriter<AppExit>) {
    writer.send(AppExit::Success);
    // Or...
    writer.send(AppExit::Error(NonZeroU8::new(1).unwrap()));
}
```

If you subscribed to this event in a system, consider `match`ing whether it was a success or an error:

```rust
// 0.13
fn handle_exit(mut reader: EventReader<AppExit>) {
    for app_exit in reader.read() {
        // Something interesting here...
    }
}

// 0.14
fn handle_exit(mut reader: EventReader<AppExit>) {
    for app_exit in reader.read() {
        match *app_exit {
            AppExit::Success => {
                // Something interesting here...
            },
            AppExit::Error(exit_code) => panic!("App exiting with an error! (Code: {exit_code})"),
        }
    }
}
```

Furthermore, `App::run()` now returns `AppExit` instead of the unit type `()`. Since `AppExit` implements [`Termination`](https://doc.rust-lang.org/stable/std/process/trait.Termination.html), you can now return it from the main function.

```rust
// 0.13
fn main() {
    App::new().run()
}

// 0.14
fn main() -> AppExit {
    App::new().run()
}

// 0.14 (alternative)
fn main() {
    // If you want to ignore `AppExit`, you can add a semicolon instead. :)
    App::new().run();
}
```

Finally, if you configured a custom `App` runner function, it will now have to return an `AppExit`.

```rust
let mut app = App::new();

app.set_runner(|_app| {
    // ...

    // Return success by default, though you may also return an error code.
    AppExit::Success
});
```


--- END FILE `release-content/0.14/migration-guides/13022_Make_AppExit_more_specific_about_exit_reason.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13031_Implement_clearcoat_per_the_Filament_and_the_KHR_materials.md` ---


The lighting functions in the `pbr_lighting` WGSL module now have clearcoat parameters if `STANDARD_MATERIAL_CLEARCOAT` is defined. Additionally, the `R` reflection vector parameter has been removed from some lighting functions, as it was unused.


--- END FILE `release-content/0.14/migration-guides/13031_Implement_clearcoat_per_the_Filament_and_the_KHR_materials.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13044_Make_SystemParamnew_archetype_and_QueryStatenew_archetype_.md` ---


`QueryState::new_archetype` and `SystemParam::new_archetype` are now unsafe functions because they do not ensure that the provided `Archetype` is from the same `World` that the state was initialized from. You will need to wrap any usage inside of an `unsafe` block, and you may need to write additional assertions to verify correct usage.


--- END FILE `release-content/0.14/migration-guides/13044_Make_SystemParamnew_archetype_and_QueryStatenew_archetype_.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13080_Deprecate_dynamic_plugins.md` ---


Dynamic plugins are now deprecated. If possible, remove all usage them from your code:

```rust
// 0.13
// This would be compiled into a separate dynamic library.
#[derive(DynamicPlugin)]
pub struct MyPlugin;

impl Plugin for MyPlugin {
    // ...
}

// This would be compiled into the main binary.
App::new()
    .load_plugin("path/to/plugin")
    .run()

// 0.14
// This would now be compiled into the main binary as well.
pub struct MyPlugin;

impl Plugin for MyPlugin {
    // ...
}

App::new()
    .add_plugins(MyPlugin)
    .run()
```

If you are unable to do that, you may temporarily silence the deprecation warnings by annotating all usage with `#[allow(deprecated)]`. Please note that the current dynamic plugin system will be removed by the next major Bevy release, so you will have to migrate eventually. You may be interested in these safer, related links:

- [Bevy Assets - Scripting](https://bevy.org/assets/#scripting): Scripting and modding libraries for Bevy
- [Bevy Assets - Development tools](https://bevy.org/assets/#development-tools): Hot reloading and other development functionality
- [`stabby`](https://github.com/ZettaScaleLabs/stabby): Stable Rust ABI

If you truly cannot go without dynamic plugins, you may copy the code from Bevy and add it to your project locally.


--- END FILE `release-content/0.14/migration-guides/13080_Deprecate_dynamic_plugins.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13087_Use_Vec3A_for_3D_bounding_volumes_and_raycasts.md` ---


`Aabb3d`, `BoundingSphere`, and `RayCast3d` now use `Vec3A` instead of `Vec3` internally. `Vec3A` is the SIMD-accelerated form of `Vec3`, so it should provide performance improvements without visible changes in behavior.

If you manually construct any of the affected structs, you will have to convert into a `Vec3A`.

```rust
// 0.13
let x = Vec3::new(5.0, -2.0);

let aabb = Aabb3d {
    min: Vec3::ZERO,
    max: x,
};

// 0.14
let x = Vec3::new(5.0, -2.0);

let aabb = Aabb3d {
    // Both variants are very similar, so you can usually replace `Vec3` with `Vec3A`.
    min: Vec3A::ZERO,
    // In cases where you cannot, use the `From` and `Into` traits.
    max: x.into(),
};
```


--- END FILE `release-content/0.14/migration-guides/13087_Use_Vec3A_for_3D_bounding_volumes_and_raycasts.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13090_Better_SystemId_to_Entity_conversions.md` ---


If you need to access the underlying `Entity` for a one-shot system's `SystemId`, use the new `SystemId::entity()` method.

```rust
// 0.13
let system_id = world.register_system(my_system);
let entity = Entity::from(system_id);

// 0.14
let system_id = world.register_system(my_system);
let entity = system_id.entity();
```


--- END FILE `release-content/0.14/migration-guides/13090_Better_SystemId_to_Entity_conversions.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13121_Implement_filmic_color_grading.md` ---


The `ColorGrading` component has been expanded to support individually configuring the shadow, midtone, and highlight sections. If you configured the `gamma` or `pre_saturation` fields previously, you will now have to set them for all sections:

```rust
// 0.13
let color_grading = ColorGrading {
    gamma: 2.0,
    pre_saturation: 0.8,
    ..default()
};

// 0.14
let mut color_grading = ColorGrading::default();

for section in color_grading.all_sections_mut() {
    section.gamma = 2.0;
    // `pre_saturation` has been renamed to `saturation`.
    section.saturation = 0.8;
}
```

Additionally, the `post_saturation` and `exposure` fields have been moved specifically to the new `global` field, which is a `ColorGradingGlobal` that supports more operations for the image as a whole.

```rust
// 0.13
let color_grading = ColorGrading {
    post_saturation: 1.2,
    exposure: 0.4,
};

// 0.14
let color_grading = ColorGrading {
    global: ColorGradingGlobal {
        post_saturation: 1.2,
        exposure: 0.4,
        ..default()
    },
    ..default()
};
```


--- END FILE `release-content/0.14/migration-guides/13121_Implement_filmic_color_grading.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13159_Improve_tracing_layer_customization.md` ---


Bevy uses `tracing` to handle logging and spans through `LogPlugin`. This could be customized with the `update_subscriber` field, but it was highly restrictive. This has since been amended, replacing the `update_subscriber` field with the more flexible `custom_layer`, which returns a `Layer`.

```rust
// 0.13
fn update_subscriber(_app: &mut App, subscriber: BoxedSubscriber) -> BoxedSubscriber {
    Box::new(subscriber.with(CustomLayer))
}

App::new()
    .add_plugins(LogPlugin {
        update_subscriber: Some(update_subscriber),
        ..default()
    })
    .run();

// 0.14
use bevy::log::tracing_subscriber;

fn custom_layer(_app: &mut App) -> Option<BoxedLayer> {
    // You can provide a single layer:
    return Some(CustomLayer.boxed());

    // Or you can provide multiple layers, since `Vec<Layer>` also implements `Layer`:
    Some(Box::new(vec![
        tracing_subscriber::fmt::layer()
            .with_file(true)
            .boxed(),
        CustomLayer.boxed(),
    ]))
}

App::new()
    .add_plugins(LogPlugin {
        custom_layer,
        ..default()
    })
    .run();
```

The `BoxedSubscriber` type alias has also been removed, it was replaced by the `BoxedLayer` type alias.


--- END FILE `release-content/0.14/migration-guides/13159_Improve_tracing_layer_customization.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13177_Make_AssetMetaCheck_a_field_on_the_asset_plugin.md` ---


`AssetMetaCheck` is used to configure how the `AssetPlugin` reads `.meta` files. It was previously a resource, but now has been changed to a field in `AssetPlugin`. If you use `DefaultPlugins`, you can use `.set` to configure this field.

```rust
// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .insert_resource(AssetMetaCheck::Never)
    .run()

// 0.14
App::new()
    .add_plugins(DefaultPlugins.set(AssetPlugin {
        meta_check: AssetMetaCheck::Never,
        ..default()
    }))
    .run()
```


--- END FILE `release-content/0.14/migration-guides/13177_Make_AssetMetaCheck_a_field_on_the_asset_plugin.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13182_Implement_Reflect_for_ResultT_E_as_enum.md` ---


`Result`'s `Reflect` implementation has been changed to make it a `ReflectKind::Enum` instead of a `ReflectKind::Value`. This increases its consistency with `Option` and allows for inspection of its contents.

Now, `Result<T, E>` no longer requires both `T` and `E` to be `Clone`, but instead requires them to implement `FromReflect`. Additionally, `<Result<T, E> as Reflect>::reflect_*` now returns the `Enum` variant instead of `Value`.


--- END FILE `release-content/0.14/migration-guides/13182_Implement_Reflect_for_ResultT_E_as_enum.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13186_Wgpu_020.md` ---


Bevy now depends on `wgpu` 0.20, `naga` 0.20, and `naga_oil` 0.14. If you manually specify any of these crates in your `Cargo.toml`, make sure to update their versions to prevent them from being duplicated.

Furthermore, timestamps inside of encoders are now disallowed on WebGPU (though they still work on native). Use the `TIMESTAMP_QUERY_INSIDE_ENCODERS` feature to check for support.


--- END FILE `release-content/0.14/migration-guides/13186_Wgpu_020.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13199_Add_BufferVec_an_higherperformance_alternative_to_StorageB.md` ---


`BufferVec` has been renamed to `RawBufferVec` because a new implementation of `BufferVec` has taken its name. The new `BufferVec<T>` no longer requires `T: Pod`, but instead `ShaderType` from the `encase` library.

For most cases you can simply switch to using `RawBufferVec`, but if you have more complex data you may be interested in the new `BufferVec` implementation.


--- END FILE `release-content/0.14/migration-guides/13199_Add_BufferVec_an_higherperformance_alternative_to_StorageB.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13209_move_wgsl_color_operations_from_bevy_pbr_to_bevy_render.md` ---


Mathematical constants and color conversion functions for shaders have been moved from `bevy_pbr::utils` to `bevy_render::maths` and `bevy_render::color_operations`. If you depended on these in your own shaders, please update your import statements:

```wgsl
// 0.13
#import bevy_pbr::utils::{PI, rgb_to_hsv}

// 0.14
#import bevy_render::{maths::PI, color_operations::rgb_to_hsv}
```


--- END FILE `release-content/0.14/migration-guides/13209_move_wgsl_color_operations_from_bevy_pbr_to_bevy_render.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13216_Separate_state_crate.md` ---


States were moved to a separate crate which is gated behind the `bevy_state` feature. Projects that use state but don't use Bevy's `default-features` will need to add this feature to their `Cargo.toml`.

Projects that use `bevy_ecs` directly and use states will need to add the `bevy_state` **crate** as a dependency.

Projects that use `bevy_app` directly and use states will need to add the `bevy_state` **feature**.

If you do not use `DefaultPlugins`, you will need to add the `StatesPlugin` manually to your app.

Users should update imports that referenced the old location.

```rust
// 0.13
use bevy::ecs::schedule::{NextState, OnEnter, OnExit, OnTransition, State, States};
use bevy::ecs::schedule::common_conditions::in_state;

// 0.14
use bevy::state::state::{NextState, OnEnter, OnExit, OnTransition, State, States}
use bevy::state::condition::in_state;
```


--- END FILE `release-content/0.14/migration-guides/13216_Separate_state_crate.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13236_Ensure_clean_exit.md` ---


Windows now close a frame after their exit has been requested in order to fix several regressions. If you have custom exit logic, ensure that it does not rely on the app exiting the same frame the window is closed.


--- END FILE `release-content/0.14/migration-guides/13236_Ensure_clean_exit.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13238_More_idiomatic_texture_atlas_builder.md` ---


`TextureAtlasBuilder` has been modified to be more consistent with other builders. As part of this, most methods now return `&mut Self` instead of `Self` and `finish()` has been renamed to `build()`.

```rust
// 0.13
let (texture_atlas_layout, texture) = TextureAtlasBuilder::default()
    .padding(UVec2::default())
    .format(TextureFormat::bevy_default())
    .finish()
    .unwrap();

// 0.14
let (texture_atlas_layout, texture) = TextureAtlasBuilder::default()
    .padding(UVec2::default())
    .format(TextureFormat::bevy_default());
    .build() // This is now `build()`.
    .unwrap();
```


--- END FILE `release-content/0.14/migration-guides/13238_More_idiomatic_texture_atlas_builder.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13261_More_gizmos_builders.md` ---


`Gizmos::primitive_2d(CIRLCE)`, `Gizmos::primitive_2d(ELLIPSE)`, `Gizmos::primitive_2d(ANNULUS)`, and `Gizmos::primitive_3d(SPHERE)` now return their corresponding builders instead of the unit type `()`. Furthermore, `SphereBuilder::circle_segments()` has been renamed to `resolution()`.


--- END FILE `release-content/0.14/migration-guides/13261_More_gizmos_builders.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13264_Use_Dir3_for_local_axis_methods_in_GlobalTransform.md` ---


The `GlobalTransform` component's directional axis methods (`right()`, `left()`, `up()`, `down()`, `back()`, `forward()`) have been updated from returning a `Vec3` to a `Dir3`. `Dir3` implements `Deref<Target = Vec>`, but if you need mutable access you can call `Vec3::from()`.


--- END FILE `release-content/0.14/migration-guides/13264_Use_Dir3_for_local_axis_methods_in_GlobalTransform.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13317_12502_Remove_limit_on_RenderLayers.md` ---


There is no longer a limit on the total amount of `RenderLayers`, and so the `TOTAL_LAYERS` associated constant and `all()` constructor have been removed. Entities expecting to be visible on all layers, such as lights, should either create a constant listing all known layers used by the application or compute the active layers that are in use at runtime.

The `Copy` trait is no longer implemented on `RenderLayers`. Instead you should use the `.clone()` function from the `Clone` trait which `Renderlayers` still implements.


--- END FILE `release-content/0.14/migration-guides/13317_12502_Remove_limit_on_RenderLayers.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13343_constrain_WorldQueryget_state_to_only_use_Components.md` ---


A few methods of `WorldQuery` and `QueryState` were unsound because they were passed an `&World`. They are now restricted to just take an `&Components`. The affected methods are:

- `WorldQuery::get_state()`
- `QueryState::transmute()`
- `QueryState::transmute_filtered()`
- `QueryState::join()`
- `QueryState::join_filtered()`

To access `Components` from a `World`, call `World::components()`.

If you manually implemented `WorldQuery`, you need to update `get_state()` to only use the information provided by `Components`.


--- END FILE `release-content/0.14/migration-guides/13343_constrain_WorldQueryget_state_to_only_use_Components.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13350_Add_emissive_exposure_weight_to_the_StandardMaterial.md` ---


Emissive color and camera exposure now play nicely with each other. Before, the `emissive` property of a `StandardMaterial` had to be massive (in the thousands) in order for effects such as bloom to be visible. This has been scaled down, so you may have to re-adjust your emissive colors.

```rust
// 0.13
StandardMaterial {
    emissive: Color::linear_rgb(23000.0, 9000.0, 3000.0),
    ..default()
}

// 0.14
StandardMaterial {
    // Much more reasonable! :)
    emissive: Color::linear_rgb(13.99, 5.32, 2.0),
    ..default()
}
```

You may also be interested in the `StandardMaterial::emissive_exposure_weight` property.


--- END FILE `release-content/0.14/migration-guides/13350_Add_emissive_exposure_weight_to_the_StandardMaterial.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13366_fix_upgrade_to_winit_v030.md` ---


The custom UserEvent is now renamed as WakeUp, used to wake up the loop if anything happens outside the app (a new [custom_user_event](https://github.com/bevyengine/bevy/pull/13366/files#diff-2de8c0a8d3028d0059a3d80ae31b2bbc1cde2595ce2d317ea378fe3e0cf6ef2d) shows this behavior.

The internal `UpdateState` has been removed and replaced internally by the AppLifecycle. When changed, the AppLifecycle is sent as an event.

The `UpdateMode` now accepts only two values: `Continuous` and `Reactive`, but the latter exposes 3 new properties to enable reactive to device, user or window events. The previous `UpdateMode::Reactive` is now equivalent to `UpdateMode::reactive()`, while `UpdateMode::ReactiveLowPower` to `UpdateMode::reactive_low_power()`.

The `ApplicationLifecycle` has been renamed as `AppLifecycle`, and now contains the possible values of the application state inside the event loop: 

- `Idle`: the loop has not started yet
- `Running` (previously called `Started`): the loop is running
- `WillSuspend`: the loop is going to be suspended
- `Suspended`: the loop is suspended
- `WillResume`: the loop is going to be resumed

Note: the `Resumed` state has been removed since the resumed app is just running.

Finally, now that `winit` enables this, it extends the `WinitPlugin` to support custom events.


--- END FILE `release-content/0.14/migration-guides/13366_fix_upgrade_to_winit_v030.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13411_Common_MeshBuilder_trait.md` ---


All shape mesh builders (`ConeMeshBuilder`, `PlaneMeshBuilder`, etc.) have a method `build()` for converting into a `Mesh`. This method has been made into a common trait `MeshBuilder`. You will need to import this trait if you use `build()` but do not use the prelude.


--- END FILE `release-content/0.14/migration-guides/13411_Common_MeshBuilder_trait.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13419_Allow_mix_of_hdr_and_nonhdr_cameras_to_same_render_target.md` ---


`CameraOutputMode::Write` now stores a `ClearColorConfig` instead of a `LoadOp<Color>`. Use the following table to convert between the two enums:

|`LoadOp<Color>`|`ClearColorConfig`|
|-|-|
|`Clear(color)`|`Custom(color)`|
|`Load`|`None`|

`ClearColorConfig` has an additional variant, `Default`, which inherits the clear color from the `ClearColor` resource.


--- END FILE `release-content/0.14/migration-guides/13419_Allow_mix_of_hdr_and_nonhdr_cameras_to_same_render_target.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13438_Inconsistent_segmentsresolution_naming.md` ---


All gizmo methods named `segments()` have been rename to `resolution()` in order to be consistent with `bevy::render`.


--- END FILE `release-content/0.14/migration-guides/13438_Inconsistent_segmentsresolution_naming.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13452_Rename_Rect_inset_method_to_inflate.md` ---


`Rect::inset()`, `IRect::inset()`, and `URect::inset()` have been renamed to `inflate()` to fit the actual behavior.


--- END FILE `release-content/0.14/migration-guides/13452_Rename_Rect_inset_method_to_inflate.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13462_Fix_UI_elements_randomly_not_appearing_after_13277.md` ---


The `bevy::ui::render::extract_default_ui_camera_view()` system is now hard-wired to both the `Camera2d` and `Camera3d` components, and is no longer added twice for each type.

This change was made to fix a bug introduced after moving render phases to resources. The first thing this system does is clear out all entities from the previous frame. By having two separate systems, one was always clearing out the other, causing some entities to not be rendered.


--- END FILE `release-content/0.14/migration-guides/13462_Fix_UI_elements_randomly_not_appearing_after_13277.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13465_Make_LoadContext_use_the_builder_pattern_for_loading_depen.md` ---


<!-- Note: This is the migration guide for both #13465 AND #13415. -->

`LoadContext`, used by `AssetLoader`, has been updated so all of its `load_*` methods have been merged into a builder struct.

```rust
// 0.13
load_context.load_direct(path);
// 0.14
load_context.loader().direct().untyped().load(path);

// 0.13
load_context.load_direct_with_reader(reader, path);
// 0.14
load_context.loader().direct().with_reader(reader).untyped().load(path);

// 0.13
load_context.load_untyped(path);
// 0.14
load_context.loader().untyped().load(path);

// 0.13
load_context.load_with_settings(path, settings);
// 0.14
load_context.loader().with_settings(settings).load(path);
```


--- END FILE `release-content/0.14/migration-guides/13465_Make_LoadContext_use_the_builder_pattern_for_loading_depen.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13489_Normalise_matrix_naming.md` ---


All matrices have been renamed to follow the convention `x_from_y` in order to decrease confusion while increasing readability.

- `Frustum`'s `from_view_projection`, `from_view_projection_custom_far` and `from_view_projection_no_far` methods were renamed to `from_clip_from_world`, `from_clip_from_world_custom_far` and `from_clip_from_world_no_far`.
- `ComputedCameraValues::projection_matrix` was renamed to `clip_from_view`.
- `CameraProjection::get_projection_matrix` was renamed to `get_clip_from_view` (this affects implementations on `Projection`, `PerspectiveProjection` and `OrthographicProjection`).
- `ViewRangefinder3d::from_view_matrix` was renamed to `from_world_from_view`.
- `PreviousViewData`'s members were renamed to `view_from_world` and `clip_from_world`.
- `ExtractedView`'s `projection`, `transform` and `view_projection` were renamed to `clip_from_view`, `world_from_view` and `clip_from_world`.
- `ViewUniform`'s `view_proj`, `unjittered_view_proj`, `inverse_view_proj`, `view`, `inverse_view`, `projection` and `inverse_projection` were renamed to `clip_from_world`, `unjittered_clip_from_world`, `world_from_clip`, `world_from_view`, `view_from_world`, `clip_from_view` and `view_from_clip`.
- `GpuDirectionalCascade::view_projection` was renamed to `clip_from_world`.
- `MeshTransforms`' `transform` and `previous_transform` were renamed to `world_from_local` and `previous_world_from_local`.
- `MeshUniform`'s `transform`, `previous_transform`, `inverse_transpose_model_a` and `inverse_transpose_model_b` were renamed to `world_from_local`, `previous_world_from_local`, `local_from_world_transpose_a` and `local_from_world_transpose_b` (the `Mesh` type in WGSL mirrors this, however `transform` and `previous_transform` were named `model` and `previous_model`).
- `Mesh2dTransforms::transform` was renamed to `world_from_local`.
- `Mesh2dUniform`'s `transform`, `inverse_transpose_model_a` and `inverse_transpose_model_b` were renamed to `world_from_local`, `local_from_world_transpose_a` and `local_from_world_transpose_b` (the `Mesh2d` type in WGSL mirrors this).
- In WGSL, `bevy_pbr::mesh_functions`, `get_model_matrix` and `get_previous_model_matrix` were renamed to `get_world_from_local` and `get_previous_world_from_local`.
- In WGSL, `bevy_sprite::mesh2d_functions::get_model_matrix` was renamed to `get_world_from_local`.


--- END FILE `release-content/0.14/migration-guides/13489_Normalise_matrix_naming.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13534_Make_gizmos_take_primitives_by_ref.md` ---


`Gizmos::primitive_2d()` and `Gizmos::primitive_3d()` now take the primitive as a reference so that non-`Copy` primitives do not need to be cloned each time they are drawn.

```rust
// 0.13
fn draw(mut gizmos: Gizmos) {
    let polygon = Polygon {
        vertices: [
            // ...
        ],
    };

    // Since `Polygon` is not `Copy`, you would need to clone it if you use it more than once.
    gizmos.primitive_2d(polygon.clone(), Vec2::ZERO, 0.0, Color::WHITE);
    gizmos.primitive_2d(polygon, Vec2::ONE, 0.0, Color::BLACK);
}

// 0.14
fn draw(mut gizmos: Gizmos) {
    let polygon = Polygon {
        vertices: [
            // ...
        ],
    };

    // No need to clone the polygon anymore!
    gizmos.primitive_2d(&polygon, Vec2::ZERO, 0.0, Color::WHITE);
    gizmos.primitive_2d(&polygon, Vec2::ONE, 0.0, Color::BLACK);
}
```


--- END FILE `release-content/0.14/migration-guides/13534_Make_gizmos_take_primitives_by_ref.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13580_Add_subdivisions_to_PlaneMeshBuilder.md` ---


In 0.13 the `Plane` type was deprecated in favor of `Plane2d` and `Plane3d`. The new plane types did not provide a method for subdivision, which is now amended.

If you used the `Plane::subdivisions` property, you now need to convert a `Plane3d` into a `PlaneMeshBuilder`.

```rust
// 0.13
let plane = Plane {
    subdivisions: 10,
    ..default()
};

// 0.14
let plane = Plane3d::default().mesh().subdivisions(10);
```


--- END FILE `release-content/0.14/migration-guides/13580_Add_subdivisions_to_PlaneMeshBuilder.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13594_Unify_transition_names_to_exited_and_entered.md` ---


`StateTransitionEvent`'s `before` and `after` fields have been renamed to `exited` and `entered` for consistency. You will have to update your usage if you access these fields or construct `StateTransitionEvent`.


--- END FILE `release-content/0.14/migration-guides/13594_Unify_transition_names_to_exited_and_entered.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13603_Updates_default_Text_font_size_to_24px.md` ---


The default font size for `TextStyle` has been increased from 12px to 24px. If you preferred the original size, you can override it using the `TextStyle::font_size` property.


--- END FILE `release-content/0.14/migration-guides/13603_Updates_default_Text_font_size_to_24px.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13605_Additional_options_to_mesh_primitives.md` ---


`TorusMeshBuilder` is no longer `Copy` because it contains a `RangeInclusive` (`x..=y`) for the angle range. You will need to call `clone()` manually in any scenario where it was implicitly copied before.


--- END FILE `release-content/0.14/migration-guides/13605_Additional_options_to_mesh_primitives.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13626_Combine_transition_systems_of_Substates.md` ---


The `apply_state_transition` system is no longer public. The easiest way to migrate your systems that depended on it for ordering is to create a custom schedule.

```rust
// 0.13
App::new()
    .add_plugins(DefaultPlugins)
    .add_systems(StateTransition, my_system.after(apply_state_transition))
    .run()

// 0.14
#[derive(ScheduleLabel, Debug, Hash, PartialEq, Eq, Clone)]
struct AfterStateTransition;

let mut app = App::new();

app.add_plugins(DefaultPlugins)
    .add_systems(AfterStateTransition, my_system);

// Create a new schedule and add it to the app.
let after_state_transition = Schedule::new(AfterStateTransition);
app.add_schedule(after_state_transition);

// Modify the schedule order to make this run after `StateTransition`.
app.world_mut()
    .resource_mut::<MainScheduleOrder>()
    .insert_after(StateTransition, AfterStateTransition);

app.run()
```


--- END FILE `release-content/0.14/migration-guides/13626_Combine_transition_systems_of_Substates.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13637_Move_state_installation_methods_from_bevy_app_to_bevy_stat.md` ---


`State` has been moved to `bevy::state`. With it, `App::init_state` has been moved from a normal method to an extension trait. You may now need to import `AppExtStates` in order to use this method, if you don't use the prelude. (This trait is behind the `bevy_state` feature flag, which you may need to enable.)

```rust
// 0.13
App::new()
    .init_state::<MyState>()
    .run()

// 0.14
use bevy::state::app::AppExtStates as _;

App::new()
    .init_state::<MyState>()
    .run()
```


--- END FILE `release-content/0.14/migration-guides/13637_Move_state_installation_methods_from_bevy_app_to_bevy_stat.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13654_Rename_point_light_to_clusterable_object_in_cluster_contex.md` ---


In the PBR shaders, `point_lights` is now known as `clusterable_objects`, `PointLight` is now known as `ClusterableObject`, and `cluster_light_index_lists` is now known as `clusterable_object_index_lists`. This rename generalizes over clusterable objects, which adds room for light probes and decals in the future.


--- END FILE `release-content/0.14/migration-guides/13654_Rename_point_light_to_clusterable_object_in_cluster_contex.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13660_rename_touchpad_to_gesture_and_add_new_gestures.md` ---


In a recent `winit` update, touchpad events can now be triggered on mobile. To account for this, touchpad-related items have been renamed to gestures:

- `bevy::input::touchpad` has been renamed to `bevy::input::gestures`.
- `TouchpadMagnify` has been renamed to `PinchGesture`.
- `TouchpadRotate` has been renamed to `RotationGesture`.


--- END FILE `release-content/0.14/migration-guides/13660_rename_touchpad_to_gesture_and_add_new_gestures.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13678_flush_key_input_cache_when_Bevy_loses_focus_Adopted.md` ---


`WinitEvent` has a new enum variant: `WinitEvent::KeyboardFocusLost`. This was added as part of a fix where key presses would stick when losing focus of the Bevy window, such as with <kbd>Alt + Tab</kbd>. Please update any `match` statements.


--- END FILE `release-content/0.14/migration-guides/13678_flush_key_input_cache_when_Bevy_loses_focus_Adopted.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/13710_Made_Meshmerge_take_a_reference_of_Mesh.md` ---


`Mesh::merge()` now takes `&Mesh` instead of `Mesh`. Because of this, you can now share the same `Mesh` across multiple `merge()` calls without cloning it.


--- END FILE `release-content/0.14/migration-guides/13710_Made_Meshmerge_take_a_reference_of_Mesh.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/14017_Make_default_behavior_for_BackgroundColor_and_BorderColor_.md` ---


`BackgroundColor` no longer tints the color of images in `ImageBundle` or `ButtonBundle`. Set `UiImage::color` to tint images instead. Furthermore, the new default texture for `UiImage` is now a transparent white square.  Use `UiImage::solid_color` to quickly draw debug images. Finally, the default value for `BackgroundColor` and `BorderColor` is now transparent. Set the color to white manually to return to previous behavior.


--- END FILE `release-content/0.14/migration-guides/14017_Make_default_behavior_for_BackgroundColor_and_BorderColor_.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/5781_bevy_reflect_Recursive_registration.md` ---


It is now possible to recursively register types, but in doing so all (unignored) reflected fields need to implement `GetTypeRegistration`. This is automatically done when `Reflect` is derived, but manual implementations will need to also implement `GetTypeRegistration`.

```rust
#[derive(Reflect)]
struct Foo<T: FromReflect> {
    data: MyCustomType<T>
}

// 0.13
impl<T: FromReflect> Reflect for MyCustomType<T> {
    // ...
}

// 0.14
impl<T: FromReflect + GetTypeRegistration> Reflect for MyCustomType<T> {
    // ...
}

impl<T: FromReflect + GetTypeRegistration> GetTypeRegistration for MyCustomType<T> {
    // ...
}
```


--- END FILE `release-content/0.14/migration-guides/5781_bevy_reflect_Recursive_registration.md` ---


--- BEGIN FILE `release-content/0.14/migration-guides/9202_Refactor_App_and_SubApp_internals_for_better_separation.md` ---


`SubApp` has been separated from `App`, so there are a few larger changes involved when interacting with these types.

#### Constructing a `SubApp`

`SubApp` no longer contains an `App`, so you no longer are able to convert an `App` into a `SubApp`. Furthermore, the extraction function must now be set outside of the constructor.

```rust
// 0.13
#[derive(AppLabel, Clone, Copy, Hash, PartialEq, Eq, Debug)]
struct MySubApp;

let mut app = App::new();
let mut sub_app = App::empty();

sub_app.add_systems(Main, ...);
sub_app.insert_resource(...);

app.insert_sub_app(MySubApp, SubApp::new(sub_app, |main_world, sub_app| {
    // Extraction function.
}));

// 0.14
#[derive(AppLabel, Clone, Copy, Hash, PartialEq, Eq, Debug)]
struct MySubApp;

let mut app = App::new();
// Use `SubApp::new()` instead of `App::new()`.
let mut sub_app = SubApp::new();

// Instead of setting the extraction function when you create the `SubApp`, you must set it
// afterwards. If you do not set an extraction function, it will do nothing.
sub_app.set_extract(|main_world, sub_world| {
    // Extraction function.
});

// You can still add systems and resources like normal.
sub_app.add_systems(Main, ...);
sub_app.insert_resource(...);

app.insert_sub_app(MySubApp, sub_app);
```

#### `App` changes

`App` is not `Send` anymore, but `SubApp` still is.

Due to the separation of `App` and `SubApp`, a few other methods have been changed.

First, `App::world` as a property is no longer directly accessible. Instead use the getters `App::world` and `App::world_mut`.

```rust
#[derive(Component)]
struct MyComponent;

// 0.13
let mut app = App::new();
println!("{:?}", app.world.id());
app.world.spawn(MyComponent);

// 0.14
let mut app = App::new();
println!("{:?}", app.world().id()); // Notice the added paranthesese.
app.world_mut().spawn(MyComponent);
```

Secondly, all getters for the sub app now return a `SubApp` instead of an `App`. This includes `App::sub_app`, `App::sub_app_mut`, `App::get_sub_app`, and `App::get_sub_app_mut`.

```rust
#[derive(AppLabel, Clone, Copy, Hash, PartialEq, Eq, Debug)]
struct MySubApp;

let mut app = App::new();
app.insert_sub_app(MySubApp, SubApp::new());

assert_eq!(app.sub_app(MySubApp).type_id(), TypeId::of::<SubApp>());
```

Finally, `App::runner` and `App::main_schedule_label` are now private. It is no longer possible to get the runner closure, but you can get the main schedule label using `SubApp::update_schedule`.

```rust
let app = App::new();
let label = app.main().update_schedule;
```

#### 3rd-party traits on `App`

If you implemented an extension trait on `App`, consider also implementing it on `SubApp`:

```rust
trait SpawnBundle {
    /// Spawns a new `Bundle` into the `World`.
    fn spawn_bundle<T: Bundle>(&mut self, bundle: T) -> &mut Self;
}

impl SpawnBundle for App {
    fn spawn_bundle<T: Bundle>(&mut self, bundle: T) -> &mut Self {
        self.world_mut().spawn(bundle);
        self
    }
}

/// `SubApp` has a very similar API to `App`, so the code will usually look the same.
impl SpawnBundle for SubApp {
    fn spawn_bundle<T: Bundle>(&mut self, bundle: T) -> &mut Self {
        self.world_mut().spawn(bundle);
        self
    }
}
```


--- END FILE `release-content/0.14/migration-guides/9202_Refactor_App_and_SubApp_internals_for_better_separation.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/10164_Meshlet_rendering_initial_feature.md` ---


After several months of hard work, we're super excited to bring you the experimental release of a new virtual geometry feature!

This new rendering feature works much like Unreal Engine 5's Nanite renderer. You can take a very high-poly mesh, preprocess it to generate a [`MeshletMesh`] during build time, and then at runtime render huge amounts of geometry - much more than Bevy's standard renderer can support. No explicit LODs are needed - it's all automatic, and near seamless.

This feature is still a WIP, and comes with several constraints compared to Bevy's standard renderer, so be sure to read the docs and report any bugs you encounter. We still have a lot left to do, so look forward to more performance improvements (and associated breaking changes) in future releases!

Note that this feature does not use GPU "mesh shaders", so older GPUs are compatible for now. However, they are not recommended, and are likely to become unsupported in the near future.

In addition to the below user guide, checkout:

* [The Bevy example for this feature](https://github.com/bevyengine/bevy/blob/release-0.14.0/examples/3d/meshlet.rs)
* [The technical deep dive article by the main author of this feature](https://jms55.github.io/posts/2024-06-09-virtual-geometry-bevy-0-14)

<video controls loop><source src="many_bunnies.mp4" type="video/mp4"/></video>

Users wanting to use virtual geometry should compile with the `meshlet` cargo feature at runtime, and `meshlet_processor` cargo feature at build time for preprocessing meshes into the special meshlet-specific format ([`MeshletMesh`]) the meshlet renderer uses.

Enabling the meshlet feature unlocks a new module: [`bevy::pbr::experimental::meshlet`].

First step, add [`MeshletPlugin`] to your app:

```rust
app.add_plugins(MeshletPlugin);
```

Next, preprocess your [`Mesh`] into a [`MeshletMesh`]. Currently, this needs to be done manually via `MeshletMesh::from_mesh()`(again, you need the `meshlet_processor` feature enabled). This step is fairly slow, and should be done once ahead of time, and then saved to an asset file. Note that there are limitations on the types of meshes and materials supported, make sure to read the docs.

Automatic GLTF/scene conversions via Bevy's asset preprocessing system is planned, but unfortunately did not make the cut in time for this release. For now, you'll have to come up with your own asset conversion and management system. If you come up with a good system, let us know!

Now, spawn your entities. In the same vein as `MaterialMeshBundle`, there's a `MaterialMeshletMeshBundle`, which uses a [`MeshletMesh`] instead of the typical [`Mesh`].

```rust
commands.spawn(MaterialMeshletMeshBundle {
    meshlet_mesh: meshlet_mesh_handle.clone(),
    material: material_handle.clone(),
    transform,
    ..default()
});
```

Lastly, a note on materials. Meshlet entities use the same [`Material`] trait as regular mesh entities, however, the standard material methods are not used. Instead there are 3 new methods: `meshlet_mesh_fragment_shader`, `meshlet_mesh_prepass_fragment_shader`, and `meshlet_mesh_deferred_fragment_shader`. All 3 methods of forward, forward with prepasses, and deferred rendering are supported.

Notice however that there is no access to vertex shaders. Meshlet rendering uses a hardcoded vertex shader that cannot be changed.

The actual fragment shader code for meshlet materials are mostly the same as fragment shaders for regular mesh entities. The key difference is that instead of this:

```rust
@fragment
fn fragment(vertex_output: VertexOutput) -> @location(0) vec4<f32> {
    // ...
}
```

You should use this:

```rust
#import bevy_pbr::meshlet_visibility_buffer_resolve::resolve_vertex_output

@fragment
fn fragment(@builtin(position) frag_coord: vec4<f32>) -> @location(0) vec4<f32> {
    let vertex_output = resolve_vertex_output(frag_coord);
    // ...
}
```

[`MeshletMesh`]: https://docs.rs/bevy/0.14/bevy/pbr/experimental/meshlet/struct.MeshletMesh.html
[`Mesh`]: https://docs.rs/bevy/0.14/bevy/prelude/struct.Mesh.html
[`bevy::pbr::experimental::meshlet`]: https://docs.rs/bevy/0.14/bevy/pbr/experimental/meshlet/index.html
[`Material`]: https://docs.rs/bevy/0.14/bevy/pbr/trait.Material.html
[`MeshletPlugin`]: https://docs.rs/bevy/0.14/bevy/pbr/experimental/meshlet/struct.MeshletPlugin.html


--- END FILE `release-content/0.14/release-notes/10164_Meshlet_rendering_initial_feature.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/10756_hooks_and_observers.md` ---


<!-- Hooks: https://github.com/bevyengine/bevy/pull/10756 -->
<!-- Observers: https://github.com/bevyengine/bevy/pull/10839 -->

As much as we love churning through homogeneous blocks of data in a tight loop here at Bevy, not every task is a perfect fit for the straightforward ECS model.
Responding to changes and/or processing events are vital tasks in any application, and games are no exception.

Bevy already has a number of distinct tools to handle this:

- **Buffered [`Event`]s**: Multiple-producer, multiple-consumer queues. Flexible and efficient, but requires regular polling as part of a schedule. Events are dropped after two frames.
- **Change detection via [`Added`] and [`Changed`]**: Enable writing queries that can respond to added or changed components. These queries linearly scan the change state of components that match the query to see if they have been added or changed.
- **[`RemovedComponents`]**: A special form of event that is triggered when a component is removed from an entity, or an entity with that component is despawned.

All of these (and systems themselves!) use a ["pull"-style mechanism]: events are sent regardless of whether or not anyone is listening, and listeners must periodically poll to ask if anything has changed.
This is a useful pattern, and one we intend to keep around!
By polling, we can process events in batch, getting more context and improving data locality (which makes the CPU go *brr*).

But it comes with some limitations:

- There is an unavoidable delay between an event being triggered and the response being processed
- Polling introduces a small (but non-zero) overhead every frame

This delay is the critical problem:

- Data (like indexes or hierarchies) can exist, even momentarily, in an invalid state
- We can't process arbitrary chain of events of recursive logic within a single cycle

To overcome these limitations, **Bevy 0.14** introduces **Component Lifecycle Hooks** and **Observers**: two complementary "push"-style mechanisms inspired by the ever-wonderful [flecs] ECS.

#### Component Lifecycle Hooks

[Component Hooks](https://docs.rs/bevy/0.14/bevy/ecs/component/struct.ComponentHooks.html) are functions (capable of interacting with the ECS World) registered for a specific component type (as part of the [`Component`] trait impl), which are run automatically in response to "component lifecycle events", such as when that component is added, overwritten, or removed.

For a given component type, only one hook can be registered for a given lifecycle event, and it cannot be overwritten.

Hooks exist to enforce invariants tied to that component (ex: maintaining indices or hierarchy correctness).
Hooks cannot be removed and always take priority over observers: they run before any on-add / on-insert observers, but after any on-remove observers.
As a result, they can be thought of as something closer to constructors & destructors, and are more suitable for maintaining critical safety or correctness invariants.
Hooks are also somewhat faster than observers, as their reduced flexibility means that fewer lookups are involved.

Let's examine a simple example where we care about maintaining invariants: one entity (with a `Target` component) targeting another entity (with a `Targetable` component).

```rust
#[derive(Component)]
struct Target(Option<Entity>);

#[derive(Component)]
struct Targetable {
    targeted_by: Vec<Entity>
};
```

We want to automatically clear the `Target` when the target entity is despawned: how do we do this?

If we were to use the pull-based approach (`RemovedComponents` in this case), there could be a delay between the entity being despawned and the `Target` component being updated. We can remove that delay with hooks!

Let's see what this looks like with a hook on `Targetable`:

```rust
// Rather than a derive, let's configure the hooks with a custom
// implementation of Component
impl Component for Targetable {
    const STORAGE_TYPE: StorageType = StorageType::Table;

    fn register_component_hooks(hooks: &mut ComponentHooks) {
        // Whenever this component is removed, or an entity with
        // this component is despawned...
        hooks.on_remove(|mut world, targeted_entity, _component_id|{
            // Grab the data that's about to be removed
            let targetable = world.get::<Targetable>(targeted_entity).unwrap();
            for targeting_entity in targetable.targeted_by {
                // Track down the entity that's targeting us
                let mut targeting = world.get_mut::<Target>(targeting_entity).unwrap();
                // And clear its target, cleaning up any dangling references
                targeting.0 = None;
            }
        })
    }
}
```

#### Observers

Observers are on-demand systems that listen to "triggered" events. These events can be triggered for specific entities *or* they can be triggered "globally" (no entity target).

In contrast to hooks, observers are a flexible tool intended for higher level application logic. They can watch for when user-defined events are triggered.

```rust
#[derive(Event)]
struct Message {
    text: String
}

world.observe(|trigger: Trigger<Message>| {
    println!("{}", trigger.event().message.text);
});
```

Observers are run *immediately* when an event they are watching for is triggered:

```rust
// All registered `Message` observers are immediately run here
world.trigger(Message { text: "Hello".to_string() });
```

If an event is triggered via a [`Command`], the observers will run when the [`Command`] is flushed:

```rust
fn send_message(mut commands: Commands) {
    // This will trigger all `Message` observers when this system's commands are flushed
    commands.trigger(Message { text: "Hello".to_string() } );
}
```

Events can also be triggered with an entity target:

```rust
#[derive(Event)]
struct Resize { size: usize }

commands.trigger_targets(Resize { size: 10 }, some_entity);
```

You can trigger an event for more than one entity at the same time:

```rust
commands.trigger_targets(Resize { size: 10 }, [e1, e2]);
```

A "global" observer will be executed when *any* target is triggered:

```rust
fn main() {
    App::new()
        .observe(on_resize)
        .run()
}

fn on_resize(trigger: Trigger<Resize>, query: Query<&mut Size>) {
    let size = query.get_mut(trigger.entity()).unwrap();
    size.value = trigger.event().size;
} 
```

Notice that observers can use system parameters like [`Query`], just like a normal system.

You can also add observers that only run for *specific* entities:

```rust
commands
    .spawn(Widget)
    .observe(|trigger: Trigger<Resize>| {
        println!("This specific widget entity was resized!");
    });
```

Observers are actually just an entity with the [`Observer`](https://docs.rs/bevy/0.14/ecs/observer/struct.Observer.html) component. All of the `observe()` methods used above are just shorthand for spawning a new observer entity. This is what a "global" observer entity looks like:

```rust
commands.spawn(Observer::new(|trigger: Trigger<Message>| {}));
```

Likewise, an observer watching a specific entity looks like this

```rust
commands.spawn(
    Observer::new(|trigger: Trigger<Resize>| {})
        .with_entity(some_entity)
);
```

This API makes it easy to manage and clean up observers. It also enables advanced use cases, such as sharing observers across multiple targets!

Now that we know a bit about observers, lets examine the API through a simple gameplay-flavored example:

<details>
<summary>Click to expand...</summary>

```rust
use bevy::prelude::*;

#[derive(Event)]
struct DealDamage {
    damage: u8,
}

#[derive(Event)]
struct LoseLife {
    life_lost: u8,
}

#[derive(Event)]
struct PlayerDeath;

#[derive(Component)]
struct Player;

#[derive(Component)]
struct Life(u8);

#[derive(Component)]
struct Defense(u8);

#[derive(Component, Deref, DerefMut)]
struct Damage(u8);

#[derive(Component)]
struct Monster;

fn main() {
    App::new()
        .add_systems(Startup, spawn_player)
        .add_systems(Update, attack_player)
        .observe(on_player_death);
}

fn spawn_player(mut commands: Commands) {
    commands
        .spawn((Player, Life(10), Defense(2)))
        .observe(on_damage_taken)
        .observe(on_losing_life);
}

fn attack_player(
    mut commands: Commands,
    monster_query: Query<&Damage, With<Monster>>,
    player_query: Query<Entity, With<Player>>,
) {
    let player_entity = player_query.single();

    for damage in &monster_query {
        commands.trigger_targets(DealDamage { damage: damage.0 }, player_entity);
    }
}

fn on_damage_taken(
    trigger: Trigger<DealDamage>,
    mut commands: Commands,
    query: Query<&Defense>,
) {
    let defense = query.get(trigger.entity()).unwrap();
    let damage = trigger.event().damage;
    let life_lost = damage.saturating_sub(defense.0);
    // Observers can be chained into each other by sending more triggers using commands.
    // This is what makes observers so powerful ... this chain of events is evaluated
    // as a single transaction when the first event is triggered.
    commands.trigger_targets(LoseLife { life_lost }, trigger.entity());
}

fn on_losing_life(
    trigger: Trigger<LoseLife>,
    mut commands: Commands,
    mut life_query: Query<&mut Life>,
    player_query: Query<Entity, With<Player>>,
) {
    let mut life = life_query.get_mut(trigger.entity()).unwrap();
    let life_lost = trigger.event().life_lost;
    life.0 = life.0.saturating_sub(life_lost);

    if life.0 == 0 && player_query.contains(trigger.entity()) {
        commands.trigger(PlayerDeath);
    }
}

fn on_player_death(_trigger: Trigger<PlayerDeath>, mut app_exit: EventWriter<AppExit>) {
    println!("You died. Game over!");
    app_exit.send_default();
}
```

</details>

In the future, we intend to use hooks and observers to [replace `RemovedComponents`], [make our hierarchy management more robust], create a first-party replacement for [`bevy_eventlistener`] as part of our UI work, and [build out relations].
These are powerful, general-purpose tools: we can't wait to see the mad science the community cooks up with them!

When you're ready to get started, check out the [`component hooks`] and [`observers`] examples for more API details.

[`Event`]: https://docs.rs/bevy/0.14/bevy/ecs/event/trait.Event.html
[`Added`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Added.html
[`Changed`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Changed.html
[`RemovedComponents`]: https://docs.rs/bevy/latest/bevy/ecs/prelude/struct.RemovedComponents.html
["pull"-style mechanism]: https://dev.to/anubhavitis/push-vs-pull-api-architecture-1djo
[flecs]: https://www.flecs.dev/flecs/
[replace `RemovedComponents`]: https://github.com/bevyengine/bevy/issues/13928
[make our hierarchy management more robust]: https://github.com/bevyengine/bevy/issues/12235
[`bevy_eventlistener`]: https://github.com/aevyrie/bevy_eventlistener
[build out relations]: https://github.com/bevyengine/rfcs/pull/79
[`component hooks`]: https://github.com/bevyengine/bevy/tree/v0.14.0/examples/ecs/component_hooks.rs
[`observers`]: https://github.com/bevyengine/bevy/tree/v0.14.0/examples/ecs/observers.rs
[`Component`]: https://docs.rs/bevy/0.14/bevy/ecs/component/trait.Component.html
[`Command`]: https://docs.rs/bevy/0.14/bevy/ecs/world/trait.Command.html
[`Query`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html


--- END FILE `release-content/0.14/release-notes/10756_hooks_and_observers.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/10973_Contextually_clearing_gizmos.md` ---


Gizmos are drawn via an immediate mode API. This means that every **update** you draw all gizmos you want to display, and only those will be shown. Previously, update referred to "once every time the `Main` schedule runs". This matches the frame rate, so it usually works great! But when you try to draw gizmos during `FixedMain`, they will flicker or be rendered multiple times. In Bevy 0.14, this now just works!

This can be extended for use with custom schedules. Instead of a single storage, there now are multiple [storages](https://docs.rs/bevy/0.14/bevy/gizmos/gizmos/struct.GizmoStorage.html) differentiated by a context type parameter. You can also set a type parameter on the [`Gizmos`](https://docs.rs/bevy/0.14/bevy/gizmos/gizmos/struct.Gizmos.html) system param to choose what storage to write to. You choose when storages you add get drawn or cleared: Any gizmos in the default storage (the `()` context) during the `Last` schedule will be shown.


--- END FILE `release-content/0.14/release-notes/10973_Contextually_clearing_gizmos.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11165_Decouple_BackgroundColor_from_UiImage.md` ---


UI images can now be given solid background colors:

![UI image with background color](ui_image_background_color.jpg)

The [`BackgroundColor`] component now works for UI images instead of applying a color tint on the image itself. You can still apply a color tint by setting `UiImage::color`. For example:

```rust
commands.spawn((
    ImageBundle {
        image: UiImage {
            handle: assets.load("logo.png"),
            color: DARK_RED.into(),
            ..default()
        },
        ..default()
    },
    BackgroundColor(ANTIQUE_WHITE.into()),
    Outline::new(Val::Px(8.0), Val::ZERO, CRIMSON.into()),
));
```

[`BackgroundColor`]: https://docs.rs/bevy/0.14/bevy/prelude/struct.BackgroundColor.html


--- END FILE `release-content/0.14/release-notes/11165_Decouple_BackgroundColor_from_UiImage.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11237_Add_a_gizmobased_overlay_to_show_UI_node_outlines_Adopted.md` ---


When working with UI on the web, being able to quickly debug the size of all your boxes is wildly useful.
We now have a native [layout tool](https://docs.rs/bevy/0.14/bevy/dev_tools/ui_debug_overlay/struct.DebugUiPlugin.html) which adds gizmos outlines to all [Nodes](https://docs.rs/bevy/0.14/bevy/ui/struct.Node.html)

An example of what the tool looks like after enabled

![Ui example with the overlay tool enabled](bevy_ui_outlines.jpg)

```rust
use bevy::prelude::*;

// You first have to add the DebugUiPlugin to your app
let mut app = App::new()
    .add_plugins(bevy::dev_tools::ui_debug_overlay::DebugUiPlugin);

// In order to enable the tool at runtime, you can add a system to toggle it
fn toggle_overlay(
    input: Res<ButtonInput<KeyCode>>,
    mut options: ResMut<bevy::dev_tools::ui_debug_overlay::UiDebugOptions>,
) {
    info_once!("The debug outlines are enabled, press Space to turn them on/off");
    if input.just_pressed(KeyCode::Space) {
        // The toggle method will enable the debug_overlay if disabled and disable if enabled
        options.toggle();
    }

}

// And add the system to the app
app.add_systems(Update, toggle_overlay);
```


--- END FILE `release-content/0.14/release-notes/11237_Add_a_gizmobased_overlay_to_show_UI_node_outlines_Adopted.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11426_Computed_States__Sub_States.md` ---


Bevy's [`States`] are a simple but powerful abstraction for managing the control flow of your app.

But as users' games (and non-game applications!) grew in complexity, their limitations became more apparent.
What happens if we want to capture the notion of "in a menu", but then have different states corresponding to which submenu should be open?
What if we want to ask questions like "is the game paused", but that question only makes sense while we're within a game?

Finding a good abstraction for this required [several](https://github.com/bevyengine/bevy/pull/9957) [attempts](https://github.com/bevyengine/bevy/pull/10088) and a great deal of both experimentation and discussion.

While your existing [`States`] code will work exactly as before, there are now two additional tools you can reach for if you're looking for more expressiveness: **computed states** and **sub states**.

Let's begin with a simple state declaration:

```rust
#[derive(States, Clone, PartialEq, Eq, Hash, Debug, Default)]
enum GameState {
    #[default]
    Menu,
    InGame {
        paused: bool
    },
}
```

The addition of `pause` field means that simply checking for `GameState::InGame` doesn't work ... the states are different depending on its value and we may want to distinguish between game systems that run when the game is paused or not!

#### Computed States

While we can simply do `OnEnter(GameState::InGame{paused: true})`,
we need to be able to reason about "while we're in the game, paused or not".
To this end, we define the `InGame` computed state:

```rust
#[derive(Clone, PartialEq, Eq, Hash, Debug)]
struct InGame;

impl ComputedStates for InGame {
    // Computed states can be calculated from one or many source states.
    type SourceStates = GameState;

    // Now, we define the rule that determines the value of our computed state.
    fn compute(sources: GameState) -> Option<InGame> {
        match sources {
            // We can use pattern matching to express the
            //"I don't care whether or not the game is paused" logic!
            GameState::InGame {..} => Some(InGame),
            _ => None,
        }
    }
}
```

#### Sub-States

In contrast, sub-states should be used when you want to keep manual
control over the value through `NextState`, but still bind their
existence to some parent state.

```rust
#[derive(SubStates, Clone, PartialEq, Eq, Hash, Debug, Default)]
// This macro means that `GamePhase` will only exist when we're in the `InGame` computed state.
// The intermediate computed state is helpful for clarity here, but isn't required:
// you can manually `impl SubStates` for more control, multiple parent states and non-default initial value!
#[source(InGame = InGame)]
enum GamePhase {
    #[default]
    Setup,
    Battle,
    Conclusion
}
```

#### Initialization

Initializing our states is easy: just call the appropriate method on `App`
and all of the required machinery will be set up for you.

```rust
App::new()
   .init_state::<GameState>()
   .add_computed_state::<InGame>()
   .add_sub_state::<GamePhase>()
```

Just like any other state, computed states and substates work with all of the tools you're used to:
the `State` and `NextState` resources, `OnEnter`, `OnExit` and `OnTransition` schedules and the `in_state` run condition.
Make sure to visit [both](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/state/computed_states.rs) [examples](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/state/sub_states.rs) for more information!

The only exception is that, for correctness, computed states *cannot* be mutated through `NextState`.
Instead, they are strictly derived from their parent states; added, removed and updated automatically during state transitions based on the provided `compute` method.

All of Bevy's state tools are now found in a dedicated `bevy_state` crate, which can be controlled via a feature flag.
Yearning for the days of state stacks? Wish that there was a method for re-entering states?
All of the state machinery relies *only* on public ECS tools: resources, schedules, and run conditions, making it easy to build on top of.
We know that state machines are very much a matter of taste; so if our design isn't to your taste consider taking advantage of Bevy's modularity and writing your own abstraction or using one supplied by the community!

[`States`]: https://docs.rs/bevy/0.14/bevy/prelude/trait.States.html


--- END FILE `release-content/0.14/release-notes/11426_Computed_States__Sub_States.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11535_Query_Joins.md` ---


ECS Queries can now be combined, returning the data for entities that are contained in both queries.

```rust
fn helper_function(a: &mut Query<&A>, b: &mut Query<&B>){    
    let a_and_b: QueryLens<(Entity, &A, &B)> = a.join(b);
    assert!(a_and_b.iter().len() <= a.len());
    assert!(a_and_b.iter().len() <= b.len());
}
```

In most cases, you should continue to simply add more parameters to your original query. `Query<&A, &B>` will generally be clearer than joining them later.
But when a complex system or helper function backs you into a corner, query joins are there if you need them.

If you're familiar with database terminology, this is an ["inner join"](https://www.w3schools.com/sql/sql_join.asp).
Other types of query joins are being considered. Maybe you could take a crack at the [follow-up issue](https://github.com/bevyengine/bevy/issues/13633)?


--- END FILE `release-content/0.14/release-notes/11535_Query_Joins.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11658_Add_Rotation2d.md` ---


Ever wanted to work with rotations in 2D and get frustrated with having to choose between quaternions and a raw `f32`?
Us too!

We've added a convenient [`Rot2`] type for you, with plenty of helper methods.
Feel free to replace that helper type you wrote, and submit little PRs for any useful functionality we're missing.

[`Rot2`] is a great complement to the [`Dir2`] type (formerly `Direction2d`).
The former represents an angle, while the latter is a unit vector.
These types are similar but not interchangeable, and the choice of representation depends heavily on the task at hand. You can rotate a direction using `direction = rotation * Dir2::X`. To recover the rotation, use `Dir2::X::rotation_to(direction)` or in this case the helper `Dir2::rotation_from_x(direction)`.

While these types aren't used widely within the engine yet, we *are* aware of your pain
and are evaluating [proposals](https://github.com/bevyengine/rfcs/pull/82) for how we can make working with transforms in 2D more straightforward and pleasant.

[`Rot2`]: https://docs.rs/bevy/0.14/bevy/math/struct.Rot2.html
[`Dir2`]: https://docs.rs/bevy/0.14/bevy/math/struct.Dir2.html


--- END FILE `release-content/0.14/release-notes/11658_Add_Rotation2d.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11659_bevy_reflect_Custom_attributes.md` ---


One of the features of Bevy's reflection system is the ability to attach arbitrary "type data" to a type.
This is most often used to allow trait methods to be called dynamically.
However, some users saw it as an opportunity to do other awesome things.

The amazing [bevy-inspector-egui](https://github.com/jakobhellermann/bevy-inspector-egui) used type data to great effect
in order to allow users to configure their inspector UI per field:

```rust
use bevy_inspector_egui::prelude::*;
use bevy_reflect::Reflect;

#[derive(Reflect, Default, InspectorOptions)]
#[reflect(InspectorOptions)]
struct Slider {
    #[inspector(min = 0.0, max = 1.0)]
    value: f32,
}
```

Taking inspiration from this, Bevy 0.14 adds proper support for custom attributes when deriving `Reflect`,
so users and third-party crates should no longer need to create custom type data specifically for this purpose.
These attributes can be attached to structs, enums, fields, and variants using the `#[reflect(@...)]` syntax,
where the `...` can be any expression that resolves to a type implementing `Reflect`.

For example, we can use Rust's built-in `RangeInclusive` type to specify our own range for a field:

```rust
use std::ops::RangeInclusive;
use bevy_reflect::Reflect;

#[derive(Reflect, Default)]
struct Slider {
    #[reflect(@RangeInclusive<f32>::new(0.0, 1.0))]
    // Since this accepts any expression,
    // we could have also used Rust's shorthand syntax:
    // #[reflect(@0.0..=1.0_f32)]
    value: f32,
}
```

Attributes can then be accessed dynamically using [`TypeInfo`](https://docs.rs/bevy/latest/bevy/reflect/enum.TypeInfo.html):

```rust
let TypeInfo::Struct(type_info) = Slider::type_info() else {
    panic!("expected struct");
};

let field = type_info.field("value").unwrap();

let range = field.get_attribute::<RangeInclusive<f32>>().unwrap();
assert_eq!(*range, 0.0..=1.0);
```

This feature opens up a lot of possibilities for things built on top of Bevy's reflection system.
And by making it agnostic to any particular usage, it allows for a wide range of use cases,
including aiding editor work down the road.

In fact, this feature has already been put to use by [`bevy_reactor`](https://github.com/viridia/bevy_reactor/blob/main/examples/complex/reflect_demo.rs)
to power their custom inspector UI:

```rust
#[derive(Resource, Debug, Reflect, Clone, Default)]
pub struct TestStruct {
    pub selected: bool,

    #[reflect(@ValueRange::<f32>(0.0..1.0))]
    pub scale: f32,

    pub color: Srgba,
    pub position: Vec3,
    pub unlit: Option<bool>,

    #[reflect(@ValueRange::<f32>(0.0..10.0))]
    pub roughness: Option<f32>,

    #[reflect(@Precision(2))]
    pub metalness: Option<f32>,

    #[reflect(@ValueRange::<f32>(0.0..1000.0))]
    pub factors: Vec<f32>,
}
```

![A custom UI inspector built using the code above in bevy_reactor](./custom_attributes_demo.jpg)


--- END FILE `release-content/0.14/release-notes/11659_bevy_reflect_Custom_attributes.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11823_Immediately_apply_deferred_system_params_in_Systemrun.md` ---


Working with [`Commands`] when you have exclusive world access has always been a pain.
Create a [`CommandQueue`], generate a [`Commands`] out of that, send your commands and then apply it?
Not exactly the most intuitive solution.

Now, you can access the [`World`]'s own command queue:

```rust
let mut world = World::new();
let mut commands = world.commands();
commands.spawn(TestComponent);
world.flush_commands();
```

While this isn't the most performant approach (just apply the mutations directly to the world and skip the indirection),
this API can be great for quickly prototyping with or easily testing your custom commands. It is also used internally to power component lifecycle hooks and observers.

As a bonus, one-shot systems now apply their commands (and other deferred system params) immediately when run!
We already have exclusive world access: why introduce delays and subtle bugs?

[`World`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.World.html
[`Commands`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Commands.html
[`CommandQueue`]: https://docs.rs/bevy/0.14/bevy/ecs/world/struct.CommandQueue.html


--- END FILE `release-content/0.14/release-notes/11823_Immediately_apply_deferred_system_params_in_Systemrun.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11904_Add_support_for_KHR_texture_transform.md` ---


The GLTF extension `KHR_texture_transform` is used to transform a texture before applying it. By reading this extension, Bevy can now support a variety of new workflows.
The one we want to highlight here is the ability to easily repeat textures a set number of times. This is useful for creating textures that are meant to be tiled across a surface. We will show how to do this using Blender, but the same principles apply to any 3D modeling software.

Let's look at an example scene that we've prepared in Blender, exported as a GLTF file and loaded into Bevy. We will first use the most basic shader node setup available in Blender:

![Basic shader node setup](basic_nodes.jpg)

The result is the following scene in Bevy:

![Scene with stretched textures](bevy_no_rep.jpg)

Oh no! Everything is stretched! This is because we have set up our UVs in a way that maps the texture exactly once onto the mesh. There are a few ways to deal with this, but the most convenient is to add shader nodes that scale the texture so that it repeats:

![Repeating shader node setup](rep_nodes.jpg)

The data of the `Mapping` node is the one exported to `KHR_texture_transform`. Look at the part in red. These scaling factors determine how often the texture should be repeated in the material. Tweaking this value for all textures results in a much nicer render:

![Scene with repeated textures](bevy_rep.jpg)


--- END FILE `release-content/0.14/release-notes/11904_Add_support_for_KHR_texture_transform.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11906_Run_the_multithreaded_executor_at_the_end_of_each_system_t.md` ---


The largest source of overhead in Bevy's multithreaded system executor is from
[thread context switching](https://en.wikipedia.org/wiki/Context_switch), i.e. starting and stopping threads.
Each time a thread is woken up it can take up to 30us if the cache for the thread is cold.
Minimizing these switches is an important optimization for the executor. In this cycle we landed
two changes that show improvements for this:

#### Run the multi-threaded executor at the end of each system task

The system executor is responsible for checking that the dependencies for a system have run already
and evaluating the run criteria and then running a task for that system.
The old version of the multithreaded executor ran as a separate task that was woken up after each task
completed. This would sometimes cause a new thread to be woken up for the executor to process the system completing.

By changing it so the system task tries to run the multithreaded executor after each system completes, we ensure that the multithreaded executor always runs on a thread that is already awake. This prevents one source of context switches. In practice this reduces the number of context switches per a `Schedule` run by 1-3 times, for an improvement of around 30us per schedule. When an app has many schedules, this can add up!

#### Combined Event update system

There used to be one
instance of the "event update system" for each event type. With just the `DefaultPlugins`, that results in 20+ instances of the system.

Each instance ran very quick, so the overhead of spawning the system tasks and waking up threads to run all these systems dominated the time it took for the `First` schedule to run. So combining all these into one system avoids this overhead and makes the `First` schedule run much faster. In testing this made running the schedule go from 140us to 25us. Again, not a *huge* win, but we're all about saving every microsecond we can!


--- END FILE `release-content/0.14/release-notes/11906_Run_the_multithreaded_executor_at_the_end_of_each_system_t.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/11989_Implement_the_AnimationGraph_allowing_for_multiple_animati.md` ---


Through the eyes of a beginner, handling animation seems simple enough.
Define a series of keyframes which transform the various bits of your model to match those poses.
We slap some interpolation on there to smoothly move between them, and the user tells you when to start and stop the animation. Easy!

But modern animation pipelines (especially in 3D!) are substantially more complex:
animators expect to be able to smoothly blend and programmatically alter different animations dynamically in response to gameplay.
In order to capture this richness, the industry has developed the notion of an **animation graph**, which is used to couple the underlying [state machine] of a game object to the animations that should be playing, and the transitions that should occur between each of the various states.

A player character may be walking, running, slashing a sword, defending with a sword...
to create a polished effect, animators need to be able to change between these animations smoothly, change the speed of the walk cycle to match the movement speed along the ground and even perform multiple animations at once!

In Bevy 0.14, we've implemented the [Animation Composition RFC], providing a low-level API that brings code- and asset-driven animation blending to Bevy.

```rust
#[derive(Resource)]
struct ExampleAnimationGraph(Handle<AnimationGraph>);

fn programmatic_animation_graph(
    mut commands: Commands,
    asset_server: ResMut<AssetServer>,
    animation_graphs: ResMut<Assets<AnimationGraph>>,
) {
    // Create the nodes.
    let mut animation_graph = AnimationGraph::new();
    let blend_node = animation_graph.add_blend(0.5, animation_graph.root);
    animation_graph.add_clip(
        asset_server.load(GltfAssetLabel::Animation(0).from_asset("models/animated/Fox.glb")),
        1.0,
        animation_graph.root,
    );
    animation_graph.add_clip(
        asset_server.load(GltfAssetLabel::Animation(1).from_asset("models/animated/Fox.glb")),
        1.0,
        blend_node,
    );
    animation_graph.add_clip(
        asset_server.load(GltfAssetLabel::Animation(2).from_asset("models/animated/Fox.glb")),
        1.0,
        blend_node,
    );

    // Add the graph to our collection of assets.
    let handle = animation_graphs.add(animation_graph);

    // Hold onto the handle
    commands.insert_resource(ExampleAnimationGraph(handle));
}
```

While it can be used to great effect today, most animators will ultimately prefer editing these graphs with a GUI. We plan to build a GUI on top of this API as part of the fabled Bevy Editor. Today, there are also third party solutions like [`bevy_animation_graph`].

To learn more and see what the asset-driven approach looks like, take a look at the new [`animation_graph` example].

[state machine]: https://en.wikipedia.org/wiki/Finite-state_machine
[Animation Composition RFC]: https://github.com/bevyengine/rfcs/blob/main/rfcs/51-animation-composition.md
[`bevy_animation_graph`]: https://crates.io/crates/bevy_animation_graph
[`animation_graph` example]: https://github.com/bevyengine/bevy/tree/v0.14.0/examples/animation/animation_graph.rs


--- END FILE `release-content/0.14/release-notes/11989_Implement_the_AnimationGraph_allowing_for_multiple_animati.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12013_Upstreaming_bevy_color.md` ---


Colors are a huge part of building a good game: UI, effects, shaders and more all need fully-featured, correct and convenient color tools.

Bevy now supports a broad selection of color spaces, each with their own type (e.g. [`LinearRgba`], [`Hsla`], [`Oklaba`]),
and offers a wide range of fully documented operations on and conversions between them.

The new API is more error-resistant, more idiomatic and allows us to save work by storing the [`LinearRgba`] type in our rendering internals.
This solid foundation has allowed us to implement a wide range of useful operations, clustered into traits like [`Hue`] or [`Alpha`],
allowing you to operate over any color space with the required property.
Critically, color mixing / blending is now supported: perfect for procedurally generating color palettes and working with animations.

```rust
use bevy_color::prelude::*;

// Each color space now corresponds to a specific type
let red = Srgba::rgb(1., 0., 0.);

// All non-standard color space conversions are done through the shortest path between
// the source and target color spaces to avoid a quadratic explosion of generated code.
// This conversion...
let red = Oklcha::from(red);
// ...is implemented using
let red = Oklcha::from(Oklaba::from(LinearRgba::from(red)));

// We've added the `tailwind` palette colors: perfect for quick-but-pretty prototyping!
// And the existing CSS palette is now actually consistent with the industry standard :p
let blue = tailwind::BLUE_500;

// The color space that you're mixing your colors in has a huge impact!
// Consider using the scientifically-motivated `Oklcha` or `Oklaba` for a perceptually uniform effect.
let purple = red.mix(blue, 0.5);
```

Most of the user-facing APIs still accept a colorspace-agnostic [`Color`] (which now wraps our color-space types),
while rendering internals use the physically-based [`LinearRgba`] type.
For an overview of the different color spaces, and what they're each good for, please check out our [color space usage](https://docs.rs/bevy/0.14/bevy/color/index.html#color-space-usage) documentation.

`bevy_color` offers a solid, type-safe foundation, but it's just getting started.
If you'd like another color space or there are more things you'd like to do to your colors, please open an issue or PR and we'd be happy to help!

Also note that `bevy_color` is intended to operate effectively as a stand-alone crate: feel free to take a dependency on it for your non-Bevy projects as well.

[`LinearRgba`]: https://docs.rs/bevy/0.14/bevy/color/struct.LinearRgba.html
[`Hsla`]: https://docs.rs/bevy/0.14/bevy/color/struct.Hsla.html
[`Oklaba`]: https://docs.rs/bevy/0.14/bevy/color/struct.Oklaba.html
[`Hue`]: https://docs.rs/bevy/0.14/bevy/color/trait.Hue.html
[`Alpha`]: https://docs.rs/bevy/0.14/bevy/color/trait.Alpha.html
[`Color`]: https://docs.rs/bevy/0.14/bevy/color/enum.Color.html


--- END FILE `release-content/0.14/release-notes/12013_Upstreaming_bevy_color.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12100_Add_WinitEvent_aggregate_event_for_synchronized_window_eve.md` ---


When handling inputs, the exact ordering of the events received is often very significant, even when the events are not the same type!
Consider a simple drag-and-drop operation. When, exactly, did the user release the mouse button relative to the many tiny movements that they performed?
Getting these details right goes a long way to a responsive, precise user experience.

We now expose the blanket [`WinitEvent`](https://docs.rs/bevy/0.14/bevy/winit/enum.WinitEvent.html) event stream, in addition to the existing separated event streams, which can be read and matched on directly whenever these problems arise.


--- END FILE `release-content/0.14/release-notes/12100_Add_WinitEvent_aggregate_event_for_synchronized_window_eve.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12135_Support_wireframes_for_2D_meshes.md` ---


Wireframe materials are used to render the individual edges and faces of a mesh. They are often used as a debugging tool to visualize geometry, but can also be used for various stylized effects. Bevy supports displaying 3D meshes as wireframes, but lacked the ability to do this for 2D meshes until now.

To render your 2D mesh as a wireframe, add `Wireframe2dPlugin` to your app and a `Wireframe2d` component to your sprite. The color of the wireframe can be configured per-object by adding the `Wireframe2dColor` component, or globally by inserting a `Wireframe2dConfig` resource.

For an example of how to use the feature, have a look at the new [wireframe_2d example](https://github.com/bevyengine/bevy/blob/b17292f9d11cf3d3fb4a2fb3e3324fb80afd8c88/examples/2d/wireframe_2d.rs):

![A screenshot demonstrating the new 2D wireframe material](./12135_Support_wireframes_for_2D_meshes.jpg)


--- END FILE `release-content/0.14/release-notes/12135_Support_wireframes_for_2D_meshes.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12187_Alignment_API_for_Transforms.md` ---


**Bevy 0.14** adds a new [`Transform::align`] function, which is a more general form of [`Transform::look_to`], which allows you to specify any local axis you want to use for the main and secondary axes.

This allows you to do things like point the front of a spaceship at a planet you're heading toward while keeping the right wing pointed in the direction of another ship. or point the top of a ship in the direction of the tractor beam pulling it in, while the front rotates to match the bigger ship's direction.

Lets consider a ship where we're going to use the front of the ship and the right wing as local axes:

![before calling Transform::align](align-before-move.jpg)

```rust
// point the local negative-z axis in the global Y axis direction
// point the local x-axis in the global Z axis direction
transform.align(Vec3::NEG_Z, Vec3::Y, Vec3::X, Vec3::Z)
```

`align` will move it to match the desired positions as closely as possible:

![after calling Transform::align](align-after-move.jpg)

 Note that not all rotations can be constructed and the [documentation](https://docs.rs/bevy/0.14/bevy/transform/components/struct.Transform.html#method.align) explains what happens in such scenarios.

[`Transform::look_to`]: https://docs.rs/bevy/0.14/bevy/transform/components/struct.Transform.html#method.look_to
[`Transform::align`]: https://docs.rs/bevy/0.14/bevy/transform/components/struct.Transform.html#method.align


--- END FILE `release-content/0.14/release-notes/12187_Alignment_API_for_Transforms.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12394_Gizmo_line_styles.md` ---


Previous versions of Bevy supported drawing line gizmos:

```rust
fn draw_gizmos(mut gizmos: Gizmos) {
    gizmos.line_2d(Vec2::ZERO, Vec2::splat(-80.), RED);
}
```

However the only way to customize gizmos was to change their color, which may be limiting for some use cases. Additionally, the meeting points of two lines in a line strip, their *joints*, had little gaps.

As of Bevy 0.14, you can change the style of the lines and their joints for each gizmo config group:

```rust
fn draw_gizmos(mut gizmos: Gizmos) {
    gizmos.line_2d(Vec2::ZERO, Vec2::splat(-80.), RED);
}

fn setup(mut config_store: ResMut<GizmoConfigStore>) {
    // Get the config for you gizmo config group
    let (config, _) = config_store.config_mut::<DefaultGizmoConfigGroup>();
    // Set the line style and joints for this config group
    config.line_style = GizmoLineStyle::Dotted;
    config.line_joints = GizmoLineJoint::Bevel;
}
```

The new line styles can be used in both 2D and 3D and respect the `line_perspective` option of their config groups.

Available line styles are:

- `GizmoLineStyle::Dotted`: draws a dotted line with each dot being a square
- `GizmoLineStyle::Solid`: draws a solid line - this is the default behavior and the only one available before Bevy 0.14

![new gizmos line styles](gizmos_line_styles.jpg)

Similarly, the new line joints offer a variety of options:

- `GizmoLineJoint::Miter`, which extends both lines until they meet at a common miter point,
- `GizmoLineJoint::Round(resolution)`, which will approximate an arc filling the gap between the two lines. The `resolution` determines the amount of triangles used to approximate the geometry of the arc.
- `GizmoLineJoint::Bevel`, which connects the ends of the two joining lines with a straight segment, and
- `GizmoLineJoint::None`, which uses no joints and leaves small gaps - this is the default behavior and the only one available before Bevy 0.14.

![new gizmos line joints](gizmos_line_joints.jpg)

You can check out the [2D gizmos example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/gizmos/2d_gizmos.rs), which demonstrates the use of line styles and joints!


--- END FILE `release-content/0.14/release-notes/12394_Gizmo_line_styles.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12484_Uniform_point_sampling_methods_for_some_primitive_shapes.md` ---


In the context of game development, it's often helpful to have access to random values, whether that's in the interest of driving behavior for NPCs, creating effects, or just trying to create variety. To help support this, a few random sampling features have been added to `bevy_math`, gated behind the `rand` feature. These are primarily geometric in nature, and they come in a couple of flavors.

First, one can sample random points from the boundaries and interiors of a variety of mathematical primitives:
![Image of several primitives side-by-side with points randomly sampled from their interiors][sampling-primitives]

In code, this can be performed in a couple different ways, using either the `sample_interior`/`sample_boundary` or `interior_dist`/`boundary_dist` APIs:

```rust
use bevy::math::prelude::*;
use rand::{Rng, SeedableRng};
use rand_chacha::ChaCha8Rng;

let sphere = Sphere::new(1.5);

// Instantiate an Rng:
let rng = &mut ChaCha8Rng::seed_from_u64(7355608);

// Using these, sample a random point from the interior of this sphere:
let interior_pt: Vec3 = sphere.sample_interior(rng);
// or from the boundary:
let boundary_pt: Vec3 = sphere.sample_boundary(rng);

// Or, if we want a lot of points, we can use a Distribution instead...
// to sample 100000 random points from the interior:
let interior_pts: Vec<Vec3> = sphere.interior_dist().sample_iter(rng).take(100000).collect();
// or 100000 random points from the boundary:
let boundary_pts: Vec<Vec3> = sphere.boundary_dist().sample_iter(rng).take(100000).collect();
```

Note that these methods explicitly require an [`Rng`](https://docs.rs/rand/0.8.5/rand/trait.Rng.html) object, giving you control over the randomization strategy and seed.

The currently supported shapes are as follows:

2D: `Circle`, `Rectangle`, `Triangle2d`, `Annulus`, `Capsule2d`.

3D: `Sphere`, `Cuboid`, `Triangle3d`, `Tetrahedron`, `Cylinder`, `Capsule3d`, and extrusions of sampleable 2D shapes (`Extrusion`).

---

Similarly, the direction types (`Dir2`, `Dir3`, `Dir3A`) and quaternions (`Quat`) can now be constructed randomly using `from_rng`:

```rust
use bevy::math::prelude::*;
use rand::{random, Rng, SeedableRng};
use rand_chacha::ChaCha8Rng;

// Instantiate an Rng:
let rng = &mut ChaCha8Rng::seed_from_u64(7355608);

// Get a random direction:
let direction = Dir3::from_rng(rng);

// Similar, but requires left-hand type annotations or inference:
let another_direction: Dir3 = rng.gen();

// Using `random` to grab a value using implicit thread-local rng:
let yet_another_direction: Dir3 = random();
```

[sampling-primitives]: sampling_primitives.jpg


--- END FILE `release-content/0.14/release-notes/12484_Uniform_point_sampling_methods_for_some_primitive_shapes.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12500_Add_border_radius_to_UI_nodes_adopted.md` ---


Border radius for UI nodes has been a long-requested feature for Bevy. Now it's supported!

To apply border radius to a UI node, there is a new component [`BorderRadius`](https://docs.rs/bevy/0.14/bevy/prelude/struct.BorderRadius.html). [`NodeBundle`](https://docs.rs/bevy/0.14/bevy/prelude/struct.NodeBundle.html) and [`ButtonBundle`](https://docs.rs/bevy/0.14/bevy/prelude/struct.ButtonBundle.html) now have a field for this component called `border_radius`:

```rs
commands.spawn(NodeBundle {
    style: Style {
        width: Val::Px(50.0),
        height: Val::Px(50.0),
        // We need a border to round a border, after all!
        border: UiRect::all(Val::Px(5.0)),
        ..default()
    },
    border_color: BorderColor(Color::BLACK),
    // Apply the radius to all corners. 
    // Optionally, you could use `BorderRadius::all`.
    border_radius: BorderRadius {
        top_left: Val::Px(50.0),
        top_right: Val::Px(50.0),
        bottom_right: Val::Px(50.0),
        bottom_left: Val::Px(50.0),
    },
    ..default()
});
```

There's a [new example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/ui/rounded_borders.rs) showcasing this new API, a screenshot of which can be seen below:

![`rounded_borders` example](./rounded_borders.jpg)


--- END FILE `release-content/0.14/release-notes/12500_Add_border_radius_to_UI_nodes_adopted.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12547_Add_AsyncSeek_trait_to_Reader_to_be_able_to_seek_inside_as.md` ---


<!-- Add AsyncSeek trait to Reader to be able to seek inside asset loaders -->
<!-- https://github.com/bevyengine/bevy/pull/12547 -->

Assets can be huge, and you don't always need all of the data contained in a single file.

Bevy allows you to add your [own asset loaders].
Starting in Bevy 0.14,  you can now seek to an offset of your choice, reading partway through the file.

Perhaps you have the `.celestial` file format which encodes the universe, but you want to only look at lil' asteroids which always appear at some offset:

```rust
#[derive(Default)]
struct UniverseLoader;

#[derive(Asset, TypePath, Debug)]
struct JustALilAsteroid([u8; 128]); // Each lil' asteroid uses this much data

impl AssetLoader for UniverseLoader {
    type Asset = JustALilAsteroid;
    type Settings = ();
    type Error = std::io::Error;
    async fn load<'a>(
        &'a self,
        reader: &'a mut Reader<'_>,
        _settings: &'a (),
        _load_context: &'a mut LoadContext<'_>,
    ) -> Result<JustALilAsteroid, Self::Error> {
        // The universe is big, and our lil' asteroids don't appear until this offset
        // in the celestial file format!
        let offset_of_lil_asteroids = 5_000_000_000_000;

        // Skip vast parts of the universe with the new async seek trait!
        reader
            .seek(SeekFrom::Start(offset_of_lil_asteroids))
            .await?;

        let mut asteroid_buf = [0; 128];
        reader.read_exact(&mut asteroid_buf).await?;

        Ok(JustALilAsteroid(asteroid_buf))
    }

    fn extensions(&self) -> &[&str] {
        &["celestial"]
    }
}
```

This works because Bevy's [`reader`] type passed into the asset loader's `load` function now implements [`AsyncSeek`].

Real world use cases might for example be:

- You have packed several assets in an archive and you wish to skip to an asset within and read that
- You are dealing with big datasets such as map data and you know where to extract some locations of interest

[own asset loaders]: https://github.com/bevyengine/bevy/blob/release-0.14.0/examples/asset/processing/asset_processing.rs
[`reader`]: https://docs.rs/bevy/0.14/bevy/asset/io/type.Reader.html
[`AsyncSeek`]: https://docs.rs/futures-io/latest/futures_io/trait.AsyncSeek.html


--- END FILE `release-content/0.14/release-notes/12547_Add_AsyncSeek_trait_to_Reader_to_be_able_to_seek_inside_as.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12622_Throttle_render_assets.md` ---


<!-- Throttle: https://github.com/bevyengine/bevy/pull/12622 -->

Using a lot of assets? Uploading lots of bytes to the GPU in a short time might cause stutters due to the render world waiting for uploads to finish.

Often it's a more delightful experience if an application runs smoothly than if it stutters, and a few frames worth of delay before seeing an asset appear
is often not even perceptible.

This experience is now possible:

```rust
fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .insert_resource(RenderAssetBytesPerFrame::new(1_000_000_000)) // Tune to your situation by experimenting!
        .run();
}
```

That's it!
The number provided should be chosen by figuring out a nice trade-off between no stuttering and an acceptable delay.

This feature relies on assets knowing how many bytes they will occupy when sent to the GPU.
Currently this is known by images and meshes, with more assets types expected to be able to report this in the future.


--- END FILE `release-content/0.14/release-notes/12622_Throttle_render_assets.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12672_Make_dynamic_linking_a_noop_on_wasm_targets.md` ---


WASM does not support dynamic libraries that can be linked to during runtime. Before, Bevy would fail to compile if you enabled the `dynamic_linking` feature.

```bash
$ cargo build --target wasm32-unknown-unknown --features bevy/dynamic_linking
error: cannot produce dylib for `bevy_dylib v0.13.2` as the target `wasm32-unknown-unknown` does not support these crate types
```

Now, Bevy will fallback to static linking for all WASM targets. If you enable `dynamic_linking` for development, you no longer need to disable it for WASM.


--- END FILE `release-content/0.14/release-notes/12672_Make_dynamic_linking_a_noop_on_wasm_targets.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12709_Error_info_has_been_added_to_LoadStateFailed.md` ---


Rust prides itself on its error handling, and Bevy has been steadily catching up.
Previously, when checking if an asset was loaded using [`AssetServer::get_load_state`](https://docs.rs/bevy/0.14/bevy/asset/struct.AssetServer.html#method.get_load_state),
all you'd get back was a data-less [`LoadState::Failed`](https://docs.rs/bevy/0.14/bevy/asset/enum.LoadState.html) if something went wrong.
Not very useful for debugging!

Now, a full [`AssetLoadError`](https://docs.rs/bevy/0.14/bevy/asset/enum.AssetLoadError.html) is included, with 14 different variants telling you exactly what went wrong.
Great for troubleshooting, and it opens the door to proper error handling in more complex apps.


--- END FILE `release-content/0.14/release-notes/12709_Error_info_has_been_added_to_LoadStateFailed.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12747_Move_Point_out_of_cubic_splines_module_and_expand_it.md` ---


Linear algebra is used everywhere in games, and we want to make sure it's easy to get right. That's why we've added a new `VectorSpace` trait, as part of our work to make `bevy_math` more general, expressive, and mathematically sound. Anything that implements `VectorSpace` behaves like a vector. More formally, the trait requires that implementations satisfy the vector space axioms for vector addition and scalar multiplication. We've also added a `NormedVectorSpace` trait, which includes an api for distance and magnitude.

These traits underpin the new curve and shape sampling apis. `VectorSpace` is implemented for `f32`, the `glam` vector types, and several of the new color-space types. It completely replaces `bevy_math::Point`.

The splines module in Bevy has been lacking some features for a long time. Splines are extremely useful in game development, so improving them would improve everything that uses them.

The biggest addition is NURBS support! It is a variant of a B-Spline with much more parameters that can be tweaked to create specific curve shapes. We also added a `LinearSpline`, which can be used to put straight line segments in a curve. `CubicCurve` now acts as a sequence of curve segments to which you can add new pieces, so you can mix various spline types together to form a single path.


--- END FILE `release-content/0.14/release-notes/12747_Move_Point_out_of_cubic_splines_module_and_expand_it.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12792_Implement_Auto_Exposure_plugin.md` ---


Since **Bevy 0.13**, you can [configure the EV100 of a camera](/news/bevy-0-13/#camera-exposure), which allows you to adjust the exposure of the camera in a physically based way. This also allows you to dynamically change the exposure values for various effects. However, this is a manual process and requires you to adjust the exposure values yourself.

**Bevy 0.14** introduces **Auto Exposure**, which automatically adjusts the exposure of your camera based on the brightness of the scene. This can be useful when you want to create the feeling of a very high dynamic range, since your eyes also adjust to large changes in brightness. Note that this is not a replacement for hand-tuning the exposure values, rather an additional tool that you can use to create dramatic effects when brightness changes rapidly. Check out this video recorded from the [example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/auto_exposure.rs) to see it in action!

<video controls><source src="auto_exposure.mp4" type="video/mp4"/></video>

Bevy's Auto Exposure is implemented by making a **histogram** of the scene's brightness in a post processing step. The exposure is then adjusted based on the average of the histogram. Because the histogram is calculated using a compute shader, Auto Exposure is **not available on WebGL**. It's also not enabled by default, so you need to add the [`AutoExposurePlugin`](https://docs.rs/bevy/0.14/bevy/core_pipeline/auto_exposure/struct.AutoExposurePlugin.html) to your app.

Auto Exposure is controlled by the [`AutoExposureSettings`](https://docs.rs/bevy/0.14/bevy/core_pipeline/auto_exposure/struct.AutoExposureSettings.html) component, which you can add to your camera entity. You can configure a few things:

* A relative *range* of F-stops that the exposure can change by.
* The *speed* at which the exposure changes.
* An optional **metering mask**, which allows you to, for example, give more weight to the center of the image.
* An optional histogram *filter*, which allows you to ignore very bright or very dark pixels.


--- END FILE `release-content/0.14/release-notes/12792_Implement_Auto_Exposure_plugin.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12889_Implement_GPU_frustum_culling.md` ---


<!-- GPU Frustum Culling: https://github.com/bevyengine/bevy/pull/12889-->

Bevy's rendering stack is often CPU-bound: by shifting more work onto the GPU, we can better balance the load and render more shiny things faster.
Frustum culling is an optimization technique that automatically hides objects that are outside of a camera's view (its frustum).
In Bevy 0.14, users can choose to have this work performed on the GPU, depending on the performance characteristics of their project.

Two new components are available to control frustum culling: `GpuCulling` and `NoCpuCulling`. Attach the appropriate combination of these
components to a camera, and you're set.

```rust
commands.spawn((
    Camera3dBundle::default(),
    // Enable GPU frustum culling (does not automatically disable CPU frustum culling).
    GpuCulling,
    // Disable CPU frustum culling.
    NoCpuCulling
));
```


--- END FILE `release-content/0.14/release-notes/12889_Implement_GPU_frustum_culling.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12910_Implement_percentagecloser_filtering_PCF_for_point_lights.md` ---


Percentage-closer filtering is a standard anti-aliasing technique used to get softer, less jagged shadows.
To do so, we sample from the shadow map near the pixel of interest using a Gaussian kernel, averaging the results to reduce sudden transitions as we move in / out of the shadow.

As a result, Bevy's point lights now  look softer and more natural, without any changes to end user code. As before, you can configure the exact strategy used to anti-alias your shadows by setting the [`ShadowFilteringMethod`](https://docs.rs/bevy/0.14/bevy/pbr/enum.ShadowFilteringMethod.html) component on your 3D cameras.

{{ compare_slider(
    path="POST_PATH",
    left_title="Without PCF filtering",
    left_image="before_pcf.jpg",
    right_title="With PCF filtering",
    right_image="after_pcf.jpg"
) }}

Full support for percentage-closer shadows is [in the works](https://github.com/bevyengine/bevy/pull/13497): testing and reviews for this are, like always, extremely welcome.


--- END FILE `release-content/0.14/release-notes/12910_Implement_percentagecloser_filtering_PCF_for_point_lights.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/12916_Implement_visibility_ranges_also_known_as_hierarchical_lev.md` ---


<!-- Implement visibility ranges, also known as hierarchical levels of detail (HLODs). -->
<!-- https://github.com/bevyengine/bevy/pull/12916 -->

When looking at objects far away, it's hard to make out the details!
This obvious fact is just as true in rendering as it is in real life.
As a result, using complex, high-fidelity models for distant objects is a waste: we can replace their meshes with simplified equivalents.

By automatically varying the **level-of-detail** (LOD) of our models in this way, we can render much larger scenes (or the same open world with a higher draw distance), swapping out meshes on the fly based on their proximity to the player.
Bevy now supports one of the most foundational tools for this: **visibility ranges** (sometimes called hierarchical levels of detail, as it allows users to replace multiple meshes with a single object).

By setting the [`VisibilityRange`] component on your mesh entities, developers can automatically control the range from the camera at which their meshes will appear and disappear, automatically fading between the two options using dithering.
Hiding meshes happens early in the rendering pipeline, so this feature can be efficiently used for level of detail optimization.
As a bonus, this feature is properly evaluated per-view, so different views can show different levels of detail.

Note that this feature differs from proper mesh LODs (where the geometry itself is simplified automatically), which will come later.
While mesh LODs are useful for optimization and don't require any additional setup, they're less flexible than visibility ranges.
Games often want to use objects other than meshes to replace distant models, such as octahedral or [billboard](https://github.com/bevyengine/bevy/issues/3688) imposters: implementing visibility ranges first gives users the flexibility to start implementing these solutions today.

You can see how this feature is used in the [`visibility_range` example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/visibility_range.rs).

[`VisibilityRange`]: https://docs.rs/bevy/0.14/bevy/render/view/struct.VisibilityRange.html


--- END FILE `release-content/0.14/release-notes/12916_Implement_visibility_ranges_also_known_as_hierarchical_lev.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13009_Implement_fast_depth_of_field_as_a_postprocessing_effect.md` ---


In rendering, **depth of field** is an effect that mimics the [limitations of physical lenses]((https://en.wikipedia.org/wiki/Depth_of_field)).
By virtue of the way light works, lenses (like that of the human eye or a film camera) can only focus on objects that are within a specific range (depth) from them, causing all others to be blurry and out of focus.

Bevy now ships with this effect, implemented as a post-processing shader.
There are two options available: a fast Gaussian blur or a more physically accurate hexagonal bokeh technique.
The bokeh blur is generally more aesthetically pleasing than the Gaussian blur, as it simulates the effect of a camera more accurately. The shape of the bokeh circles are determined by the number of blades of the aperture. In our case, we use a hexagon, which is usually considered specific to lower-quality cameras.

{{ compare_slider(
    path="POST_PATH",
    left_title="No Depth of Field",
    left_image="no_dof.jpg",
    right_title="Bokeh Depth of Field",
    right_image="bokeh_dof.jpg"
) }}

The blur amount is generally specified by the [f-number](https://en.wikipedia.org/wiki/F-number), which we use to compute the [focal length](https://en.wikipedia.org/wiki/Focal_length) from the film size and [field-of-view](https://en.wikipedia.org/wiki/Field_of_view). By default, we simulate standard cinematic cameras with an f/1 f-number and a film size corresponding to the classic Super 35 film format. The developer can customize these values as desired.

To see how this new API, please check out the dedicated [`depth_of_field` example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/depth_of_field.rs).


--- END FILE `release-content/0.14/release-notes/13009_Implement_fast_depth_of_field_as_a_postprocessing_effect.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13022_Make_AppExit_more_specific_about_exit_reason.md` ---


When running an app, there might be many reasons to trigger an exit. Maybe the user has pressed the quit button, or the render thread has encountered an error and died. You might want to distinguish between these two situations and return an appropriate [exit code](https://doc.rust-lang.org/std/process/struct.ExitCode.html#impl-From%3Cu8%3E-for-ExitCode) from your application.

In **Bevy 0.14**, you can. The `AppExit` event is now an enum with two variants: `Success` and `Error`. The error variant also holds a non-zero code, which you're allowed to use however you wish. Since `AppExit` events now contain useful information, app runners and `App::run` now return the event that resulted in the application exiting.

For plugin developers, `App` has gained a new method, `App::should_exit`, which will check if any `AppExit` events were sent in the last two updates. To make sure `AppExit::Success` events won't drown out useful error information, this method will return any `AppExit::Error` events, even if they were sent after an `AppExit::Success`.

Finally, `AppExit` also implements the [`Termination`](https://doc.rust-lang.org/stable/std/process/trait.Termination.html) trait, so it can be returned from main.

```rust
use bevy::prelude::*;

fn exit_with_a_error_code(mut events: EventWriter<AppExit>) {
    events.send(AppExit::from_code(42));
}

fn main() -> AppExit {
    App::new()
        .add_plugins(MinimalPlugins)
        .add_systems(Update, exit_with_a_error_code)
        .run() // There's no semicolon here, `run()` returns `AppExit`.
}
```

![App returning a 42 exit code](exit_with_a_42.jpg)


--- END FILE `release-content/0.14/release-notes/13022_Make_AppExit_more_specific_about_exit_reason.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13057_Implement_volumetric_fog_and_volumetric_lighting_also_know.md` ---


Not all fog is created equal.
Bevy's existing implementation covers [distance fog](https://en.wikipedia.org/wiki/Distance_fog), which is fast, simple, and not particularly realistic.

In Bevy 0.14, this is supplemented with volumetric fog, based on [volumetric lighting](https://en.wikipedia.org/wiki/Volumetric_lighting), which simulates fog using actual 3D space, rather than simply distance from the camera.
As you might expect, this is both prettier and more computationally expensive!

In particular, this allows for the creation of stunningly beautiful "god rays" (more properly, crepuscular rays) shining through the fog.

{{ compare_slider(
    path="POST_PATH",
    left_title="Without Volumetric Fog",
    left_image="without_volumetric_fog.jpg",
    right_title="With Volumetric Fog",
    right_image="with_volumetric_fog.jpg"
) }}

Bevy's algorithm, which is implemented as a postprocessing effect, is a combination of the techniques described in [Scratchapixel](https://www.scratchapixel.com/lessons/3d-basic-rendering/volume-rendering-for-developers/intro-volume-rendering.html) and [Alexandre Pestana's blog post](https://www.alexandre-pestana.com/volumetric-lights/). It uses raymarching ([ported to WGSL by h3r2tic](https://gist.github.com/h3r2tic/9c8356bdaefbe80b1a22ae0aaee192db)) in screen space, transformed into shadow map space for sampling and combined with physically-based modeling of absorption and scattering. Bevy employs the widely-used Henyey-Greenstein phase function to model asymmetry; this essentially allows light shafts to fade into and out of existence as the user views them.

To add volumetric fog to a scene, add [`VolumetricFogSettings`] to the camera, and add [`VolumetricLight`] to directional lights that you wish to be volumetric. [`VolumetricFogSettings`] has numerous settings that allow you to define the accuracy of the simulation, as well as the look of the fog. Currently, only interaction with directional lights that have shadow maps is supported. Note that the overhead of the effect scales directly with the number of directional lights in use, so apply [`VolumetricLight`] sparingly for the best results.

Try it hands on with our [`volumetric_fog` example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/volumetric_fog.rs).

[`VolumetricFogSettings`]: https://docs.rs/bevy/0.14/bevy/pbr/struct.VolumetricFogSettings.html
[`VolumetricLight`]: https://docs.rs/bevy/0.14/bevy/pbr/struct.VolumetricLight.html


--- END FILE `release-content/0.14/release-notes/13057_Implement_volumetric_fog_and_volumetric_lighting_also_know.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13080_Deprecate_dynamic_plugins.md` ---


`bevy_dynamic_plugin` was a tool added in Bevy's original 0.1 release: intended to serve as a tool for dynamically loading / linking Rust code for use with things like modding.
Unfortunately, this feature didn't see much community uptake, and as a result had a vanishingly small number of contributions to refine and document it over the years.

Combined with a challenging, intrinsically unsafe API that was producing [worrying failures](https://github.com/bevyengine/bevy/issues/13073) for users, we've decided to deprecate `bevy_dynamic_plugin` and will be removing it completely in Bevy 0.15.
If you were a happy user of this, simply copy the rather-small crate into your own project and proceed as before.

We still think that both modding and hot-reloading code for faster development times are valuable use cases that Bevy *should* help support one day.
Our hope is that by removing this as a first-party crate, we can spur on third-party experiments and avoid wasting users' time as they investigate a complex potential solution before concluding that it doesn't yet meet their needs.


--- END FILE `release-content/0.14/release-notes/13080_Deprecate_dynamic_plugins.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13121_Implement_filmic_color_grading.md` ---


<!-- Implement filmic color grading. -->
<!-- https://github.com/bevyengine/bevy/pull/13121 -->

Artists want to get exactly the right look for their game, and color plays a huge role.

To support this, Bevy's [existing tonemapping tools](https://bevy.org/news/bevy-0-10/#more-tonemapping-choices) have been extended to include a complete set of filmic color grading tools. In addition to a [base tonemap](https://docs.rs/bevy/0.14/bevy/core_pipeline/tonemapping/enum.Tonemapping.html), you can now configure:

- White point adjustment. This is inspired by Unity's implementation of the feature, but simplified and optimized. Temperature and tint control the adjustments to the x and y chromaticity values of CIE 1931. Following Unity, the adjustments are made relative to the D65 standard illuminant in the LMS color space.
- Hue rotation: converts the RGB value to HSV, alters the hue, and converts back.
- Color correction: allows the gamma, gain, and lift values to be adjusted according to the standard ASC CDL combined function. This can be done separately for shadows, midtones and highlights To avoid abrupt color changes, a small crossfade is used between the different sections of the image.

We've followed [Blender's](https://www.blender.org/) implementation as closely as possible to ensure that what you see in your modelling software matches what you see in the game.

![A very orange image of a test scene, with controls for exposure, temperature, tint and hue. Saturation, contrast, gamma, gain, and lift can all be configured for the highlights, midtones, and shadows separately.](filmic_color_grading.jpg)

We've provided a new, [`color_grading`](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/color_grading.rs) example, with a shiny GUI to change all the color grading settings.
Perfect for copy-pasting into your own game's dev tools and playing with the settings!
Note that these settings can all be changed at runtime: giving artists control over the exact mood of the scene, or shift it dynamically based on weather or time of day.


--- END FILE `release-content/0.14/release-notes/13121_Implement_filmic_color_grading.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13123_Implement_a_SystemBuilder_for_building_SystemParams.md` ---


Bevy users *love* systems, so we made a builder for their systems so they can build systems from within systems.
At runtime, using dynamically-defined component and resource types!

While you can use [`SystemBuilder`](https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.SystemBuilder.html) as an ergonomic alternative to the [`SystemState`](https://docs.rs/bevy/0.14/bevy/ecs/system/struct.SystemState.html) API for splitting the [`World`](https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.World.html) into disjoint borrows, its true values lies in its dynamic usage.

You can choose to create a different system based on runtime branches or, more intriguingly, the queries and so on can use runtime-defined component IDs.
This is another vital step towards creating an ergonomic and safe API to work with [dynamic queries](https://bevy.org/news/bevy-0-13/#dynamic-queries),
laying the groundwork for the devs who want to integrate scripting languages or bake in sophisticated modding support for their game.

```rust
// Start by creating builder from the world
let system = SystemBuilder::<()>::new(&mut world)
    // Various helper methods exist to add `SystemParam`.
    .resource::<R>()
    .query::<&A>()
    // Alternatively use `.param::<T>()` for any other `SystemParam` types.
    .param::<MyParam>()
    // Finish it all up with a call `.build`
    .build(my_system);
// The parameters the builder is initialized with will appear first in the arguments.
let system = SystemBuilder::<(Res<R>, Query<&A>)>::new(&mut world)
    .param::<MyParam>()
    .build(my_system);
// Parameters like `Query` that implement `BuildableSystemParam` can use
// `.builder::<T>()` to build in place.
let system = SystemBuilder::<()>::new(&mut world)
    .resource::<R>()
    // This turns our query into a `Query<&A, With<B>>`
    .builder::<Query<&A>>(|builder| { builder.with::<B>(); })
    .param::<MyParam>()
    .build(my_system);
world.run_system_once(system);
```


--- END FILE `release-content/0.14/release-notes/13123_Implement_a_SystemBuilder_for_building_SystemParams.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13162_Add_a_process_for_working_groups.md` ---


Bevy has a ton of incredibly talented contributors, so keeping track of what's going on and making informed decisions can be a real challenge.
We're experimenting with [working groups]: ad hoc groups tackling harder issues by creating a design document, getting sign-off from the experts, and then implementing it.
If you'd like to help make complex, high-impact changes to Bevy: join or form a working group!

[working groups]: https://github.com/bevyengine/bevy/blob/main/CONTRIBUTING.md#join-a-working-group


--- END FILE `release-content/0.14/release-notes/13162_Add_a_process_for_working_groups.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13200_Add_UV_channel_selection_to_StandardMaterial.md` ---


Previously, StandardMaterial always defaulted to using ATTRIBUTE_UV_0 for each texture except lightmap, which isn't flexible enough for a lot of gltf files. In **Bevy 0.14**, a new UvChannel enum was added allowing you to select the channel to use for each texture in StandardMaterial.

Here's a before and after showing the support of ATTRIBUTE_UV_1 across textures:

![UV Channel Selection](uv_channel_selection.jpg)


--- END FILE `release-content/0.14/release-notes/13200_Add_UV_channel_selection_to_StandardMaterial.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13233_Add_Annulusgizmos.md` ---


TODO


--- END FILE `release-content/0.14/release-notes/13233_Add_Annulusgizmos.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13270_Extrusion.md` ---


**Bevy 0.14** introduces an entirely new group of primitives: extrusions!

An extrusion is a 2D primitive (the base shape) that is *extruded* into a third dimension by some depth. The resulting shape is a prism (or in the special case of the circle, a cylinder).

```rust
// Create an ellipse with width 2 and height 1.
let my_ellipse = Ellipse::from_size(2.0, 1.0);

// Create an extrusion of this ellipse with a depth of 1.
let my_extrusion = Extrusion::new(my_ellipse, 1.);
```

All extrusions are extruded along the Z-axis. This guarantees that an extrusion of depth 0 and the corresponding base shape are identical, just as one would expect.

#### Measuring and Sampling

Since all extrusions with base shapes that implement [`Measured2d`] implement [`Measured3d`], you can easily get the surface area or volume of an extrusion.
If you have an extrusion of a custom 2D primitive, you can simply implement [`Measured2d`] for your primitive and [`Measured3d`] will be implemented automatically for the extrusion.

Likewise, you can sample the boundary and interior of any extrusion if the base shape of the extrusion implements [`ShapeSample<Output = Vec2>`](https://docs.rs/bevy/0.14/bevy/math/trait.ShapeSample.html) and [`Measured2d`].

```rust
// Create a 2D capsule with radius 1 and length 2, extruded to a depth of 3
let extrusion = Extrusion::new(Capsule2d::new(1.0, 2.0), 3.0);

// Get the volume of the extrusion
let volume = extrusion.volume();

// Get the surface area of the extrusion
let surface_area = extrusion.area();


// Create a random number generator
let mut rng = StdRng::seed_from_u64(4);

// Sample a random point inside the extrusion
let interior_sample = extrusion.sample_interior(&mut rng);

// Sample a random point on the surface of the extrusion
let boundary_sample = extrusion.sample_boundary(&mut rng);
```

#### Bounding

You can also get bounding spheres and Axis Aligned Bounding Boxes (AABBs) for extrusions. If you have a custom 2D primitive that implements [`Bounded2d`], you can simply implement [`BoundedExtrusion`]) for your primitive. The default implementation will give optimal results but may be slower than a solution fitted to your primitive.

#### Meshing

Extrusions do not exist in the world of maths only though. They can also be meshed and displayed on the screen!

And again, adding meshing support for your own primitives is made easy by Bevy! You simply need to implement meshing for your 2D primitive and then implement [`Extrudable`] for your 2D primitive's [`MeshBuilder`].

When implementing [`Extrudable`], you have to provide information about whether segments of the perimeter of the base shape are to be shaded smooth or flat, and what vertices belong to each of these perimeter segments.

![a 2D heart primitive and its extrusion](heart_extrusion.jpg)

The [`Extrudable`] trait allows you to easily implement meshing for extrusions of custom primitives. Of course, you could also implement meshing manually for your extrusion.

If you want to see a full implementation of this, you can check out the [custom primitives example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/math/custom_primitives.rs).

[`Measured2d`]: https://docs.rs/bevy/0.14/bevy/math/prelude/trait.Measured2d.html
[`Measured3d`]: https://docs.rs/bevy/0.14/bevy/math/prelude/trait.Measured3d.html
[`Extrudable`]: https://docs.rs/bevy/0.14/bevy/render/mesh/trait.Extrudable.html
[`Bounded2d`]: https://docs.rs/bevy/0.14/bevy/math/bounding/trait.Bounded2d.html
[`BoundedExtrusion`]: https://docs.rs/bevy/0.14/bevy/math/bounding/trait.BoundedExtrusion.html
[`MeshBuilder`]: https://docs.rs/bevy/0.14/bevy/prelude/trait.MeshBuilder.html


--- END FILE `release-content/0.14/release-notes/13270_Extrusion.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13317_12502_Remove_limit_on_RenderLayers.md` ---


<!-- #12502 Remove limit on RenderLayers. -->
<!-- https://github.com/bevyengine/bevy/pull/13317 -->

Render layers are used to quickly toggle the visibility of sets of objects, and control which objects can be seen by which cameras.
This can be useful for things like debug views, gear preview screens, toggle-able diegetic UI and so on.

Before Bevy 0.14 the membership was defined by a bitmask which had limited slots available.
Now, there is no longer any practical limit to how many layers you can define, which is particularly helpful for creative coding applications like [nannou](https://nannou.cc/)!
We've made sure to keep the common case fast, but now use a growable mask that will allocate space for additional layers as needed. Remember, there's still a cost to check visibility per layer, but this allows for more dynamic uses where layers can be created on demand without worrying about going over a limit.


--- END FILE `release-content/0.14/release-notes/13317_12502_Remove_limit_on_RenderLayers.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13347_Add_on_unimplemented_Diagnostics_to_Most_Public_Traits.md` ---


Bevy takes full advantage of the powerful type system Rust provides, but with that power can often come confusion when even minor mistakes are made.

```rust
use bevy::prelude::*;

struct MyResource;

fn main() {
    App::new()
        .insert_resource(MyResource)
        .run();
}
```

Running the above will produce a compiler error, let's see why...

<details>
<summary>Click to expand...</summary>

```txt
error[E0277]: the trait bound `MyResource: Resource` is not satisfied
   --> example.rs:6:32
    |
6   |     App::new().insert_resource(MyResource).run();
    |                --------------- ^^^^^^^^^^ the trait `Resource` is not implemented for `MyResource`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `Resource`:
              AccessibilityRequested
              ManageAccessibilityUpdates
              bevy::a11y::Focus
              DiagnosticsStore
              FrameCount
              bevy::prelude::Axis<T>
              WinitActionHandlers
              ButtonInput<T>
            and 127 others
note: required by a bound in `bevy::prelude::App::insert_resource`
   --> /bevy/crates/bevy_app/src/app.rs:537:31
    |
537 |     pub fn insert_resource<R: Resource>(&mut self, resource: R) -> &mut Self {
    |                               ^^^^^^^^ required by this bound in `App::insert_resource`
```

</details>

The compiler suggests we use a different type that implements `Resource`, or that we implement the trait on `MyResource`. The former doesn't help us at all, and the latter fails to mention the available derive macro.

With the release of Rust 1.78, Bevy can now provide more direct messages for certain types of errors during compilation using [diagnostic attributes](https://blog.rust-lang.org/2024/05/02/Rust-1.78.0.html#diagnostic-attributes).

```txt
error[E0277]: `MyResource` is not a `Resource`
   --> example.rs:6:32
    |
6   |     App::new().insert_resource(MyResource).run();
    |                --------------- ^^^^^^^^^^ invalid `Resource`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the trait `Resource` is not implemented for `MyResource`
    = note: consider annotating `MyResource` with `#[derive(Resource)]`
    = help: the following other types implement trait `Resource`:
              AccessibilityRequested
...
```

Now, the error message has a more approachable entry point, and a new `note` section pointing to the derive macro for resources. If Bevy's suggestions _aren't_ the solution to your problem, the rest of the compiler error is still included just in case.

These diagnostics have been implemented for various traits across Bevy, and we hope to improve this experience as new features are added to Rust. For example, we'd really like to improve the experience of working with tuples of `Component`'s, but we're not quite there yet. You can read more about this change in the [pull request](https://github.com/bevyengine/bevy/pull/13347) and associated [issue](https://github.com/bevyengine/bevy/issues/12377).


--- END FILE `release-content/0.14/release-notes/13347_Add_on_unimplemented_Diagnostics_to_Most_Public_Traits.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13366_fix_upgrade_to_winit_v030.md` ---


[Winit v0.30] changed its API to support a trait based architecture instead of a plain event-based one. Bevy 0.14 now implements that new architecture, making the event loop handling easier to follow.

[Winit v0.30]: https://docs.rs/winit/0.30.0/winit/changelog/v0_30/index.html

It's now possible to define a custom `winit` user event, that can be used to trigger App updates,
and that can be read inside systems to trigger specific behaviors. This is particularly useful to
send events from outside the `winit` event loop and manage them inside Bevy systems
(see the [`window/custom_user_event.rs`] example).

[`window/custom_user_event.rs`]: https://github.com/bevyengine/bevy/blob/release-0.14.0/examples/window/custom_user_event.rs

The `UpdateMode` enum now accepts only two values: `Continuous` and `Reactive`. The latter exposes 3 new properties to enable reactivity to device, user, or window events. The previous `UpdateMode::Reactive` is now equivalent to `UpdateMode::reactive()`, while `UpdateMode::ReactiveLowPower` maps to `UpdateMode::reactive_low_power()`.

* `Idle`: the loop has not started yet
* `Running` (previously called `Started`): the loop is running
* `WillSuspend`: the loop is going to be suspended
* `Suspended`: the loop is suspended
* `WillResume`: the loop is going to be resumed

Note: the `Resumed` state has been removed since the resumed app is just `Running`.


--- END FILE `release-content/0.14/release-notes/13366_fix_upgrade_to_winit_v030.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13417_implement_the_full_set_of_sort_methods_on_QueryIter.md` ---


Bevy does not make any guarantees about the order of items. So if we wish to work with our query items in a certain order, we need to sort them!
We might want to display the scores of the players in order, or ensure a consistent iteration order for the sake of networking stability.
In 0.13 a sort could look like this:

```rust
#[derive(Component, Copy, Clone, Deref)]
pub struct Attack(pub usize)

fn handle_enemies(enemies: Query<(&Health, &Attack, &Defense)>) {
    // An allocation!
    let mut enemies: Vec<_> = enemies.iter().collect();
    enemies.sort_by_key(|(_, atk, ..)| *atk)
    for enemy in enemies {
        work_with(enemy)
    }
}
```

This can get especially unwieldy and repetitive when sorting within multiple systems.
Even if we always want the same sort, different [`Query`] types make it unreasonably difficult to abstract away as a user!
To solve this, we implemented new sort methods on the [`QueryIter`] type, turning the example into:

```rust
// To be used as a sort key, `Attack` now implements Ord.
#[derive(Component, Copy, Clone, Deref, PartialEq, Eq, PartialOrd, Ord)]
pub struct Attack(pub usize)

fn handle_enemies(enemies: Query<(&Health, &Attack, &Defense)>) {
    // Still an allocation, but undercover.
    for enemy in enemies.iter().sort::<&Attack>() {
        work_with(enemy)
    }
}
```

To sort our query with the `Attack` component, we specify it as the generic parameter to [`sort`].
To sort by more than one [`Component`], we can do so, independent of [`Component`] order in the original [`Query`] type: `enemies.iter().sort::<(&Defense, &Attack)>()`

The generic parameter can be thought of as being a [lens] or "subset" of the original query, on which the underlying sort is actually performed. The result is then internally used to return a new sorted query iterator over the original query items.
With the default [`sort`], the lens has to be fully [`Ord`], like with [`slice::sort`].
If this is not enough, we also have the counterparts to the remaining 6 sort methods from [`slice`]!

The generic lens argument works the same way as with [`Query::transmute_lens`]. We do not use filters, they are inherited from the original query.
The [`transmute_lens`] infrastructure has some nice additional features, which allows for this:

```rust
fn handle_enemies(enemies: Query<(&Health, &Attack, &Defense, &Rarity)>) {
    for enemy in enemies.iter().sort_unstable::<Entity>() {
        work_with(enemy)
    }
}
```

Because we can add [`Entity`] to any lens, we can sort by it without including it in the original query!

These sort methods work with both [`Query::iter`] and [`Query::iter_mut`]! The rest of the of the iterator methods on [`Query`] do not currently support sorting.
The sorts return [`QuerySortedIter`], itself an iterator, enabling the use of further iterator adapters on it.

Keep in mind that the lensing does add some overhead, so these query iterator sorts do not perform the same as a manual sort on average. However, this *strongly* depends on workload, so best test it yourself if relevant!

[`Query`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html
[`QueryIter`]: https://docs.rs/bevy/0.14/bevy/ecs/query/struct.QueryIter.html
[`sort`]: https://docs.rs/bevy/0.14/bevy/ecs/query/struct.QueryIter.html?search=Component#method.sort
[`Component`]: https://docs.rs/bevy/0.14/bevy/ecs/component/trait.Component.html
[lens]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html#method.transmute_lens
[`Ord`]: https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html
[`slice::sort`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.sort
[`slice`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html
[`Query::transmute_lens`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html#method.transmute_lens
[`transmute_lens`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html#method.transmute_lens
[`Entity`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Entity.html
[`Query::iter`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html#method.iter
[`Query::iter_mut`]: https://docs.rs/bevy/0.14/bevy/ecs/prelude/struct.Query.html#method.iter_mut
[`QuerySortedIter`]: https://docs.rs/bevy/0.14/bevy/ecs/query/struct.QuerySortedIter.html


--- END FILE `release-content/0.14/release-notes/13417_implement_the_full_set_of_sort_methods_on_QueryIter.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13418_Implement_optin_sharp_screenspace_reflections_for_the_defe.md` ---


<!-- Implement opt-in sharp screen-space reflections for the deferred renderer, with improved raymarching code. -->
<!-- https://github.com/bevyengine/bevy/pull/13418 -->

{{ compare_slider(
    path="POST_PATH",
    left_title="No SSR",
    left_image="no_ssr.jpg",
    right_title="SSR",
    right_image="ssr.jpg"
) }}

[Screen-space reflections](https://lettier.github.io/3d-game-shaders-for-beginners/screen-space-reflection.html) (SSR) approximate real-time reflections by raymarching through the depth buffer and copying samples from the final rendered frame.
Our initial implementation is relatively minimal, to provide a flexible base to build on, but is based on the production-quality [raymarching code by Tomasz Stachowiak](https://gist.github.com/h3r2tic/9c8356bdaefbe80b1a22ae0aaee192db), one of the creators of the indie darling Bevy game [Tiny Glade](https://store.steampowered.com/app/2198150/Tiny_Glade/).
As a result, there are a few caveats to bear in mind:

1. Currently, this feature is built on top of the deferred renderer and is currently only supported in that mode. Forward screen-space reflections are possible albeit uncommon (though e.g. Doom Eternal uses them); however, they require tracing from the previous frame, which would add complexity. This patch leaves the door open to implementing SSR in the forward rendering path but doesn't itself have such an implementation.
2. Screen-space reflections aren't supported in WebGL 2, because they require sampling from the depth buffer, which `naga` can't do because of a bug (`sampler2DShadow` is incorrectly generated instead of `sampler2D`; this is the same reason why depth of field is disabled on that platform).
3. No temporal filtering or blurring is performed at all. For this reason, SSR currently only operates on very low-roughness / smooth surfaces.
4. We don't perform acceleration via the hierarchical Z-buffer and reflections are traced at full resolution. As a result, you may notice performance issues depending on your scene and hardware.

To add screen-space reflections to a camera, insert the [`ScreenSpaceReflectionsSettings`] component.
In addition to [`ScreenSpaceReflectionsSettings`], [`DepthPrepass`], and [`DeferredPrepass`] must also be present for the reflections to show up.
Conveniently, the [`ScreenSpaceReflectionsBundle`] bundles these all up for you!
While the [`ScreenSpaceReflectionsSettings`] comes with sensible defaults, it also contains several settings that artists can tweak.

[`ScreenSpaceReflectionsBundle`]: https://docs.rs/bevy/0.14/bevy/pbr/struct.ScreenSpaceReflectionsBundle.html
[`ScreenSpaceReflectionsSettings`]:https://docs.rs/bevy/0.14/bevy/pbr/struct.ScreenSpaceReflectionsSettings.html
[`DepthPrepass`]: https://docs.rs/bevy/0.14/bevy/core_pipeline/prepass/struct.DepthPrepass.html
[`DeferredPrepass`]: https://docs.rs/bevy/0.14/bevy/core_pipeline/prepass/struct.DeferredPrepass.html


--- END FILE `release-content/0.14/release-notes/13418_Implement_optin_sharp_screenspace_reflections_for_the_defe.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13423_Implement_subpixel_morphological_antialiasing_or_SMAA.md` ---


<!-- Implement subpixel morphological antialiasing, or SMAA. -->
<!-- https://github.com/bevyengine/bevy/pull/13423 -->

Jagged edges are the bane of game developers' existence: a wide variety of anti-aliasing techniques have been invented and are still in use to fix them without degrading image quality.
In addition to [MSAA](https://en.wikipedia.org/wiki/Multisample_anti-aliasing), [FXAA](https://en.wikipedia.org/wiki/Fast_approximate_anti-aliasing), and [TAA](https://en.wikipedia.org/wiki/Temporal_anti-aliasing), Bevy now implements [SMAA](https://en.wikipedia.org/wiki/Morphological_antialiasing): subpixel morphological antialiasing.

SMAA is a 2011 antialiasing technique that detects borders in the image, then averages nearby border pixels, eliminating the dreaded jaggies.
Despite its age, it's been a continual staple of games for over a decade. Four quality presets are available: low, medium, high, and ultra. Due to advancements in consumer hardware, Bevy's default is high.

You can see how it compares to no anti-aliasing in the pair of images below:

{{ compare_slider(
    path="POST_PATH",
    left_title="No AA",
    left_image="no_aa.jpg",
    right_title="SMAA",
    right_image="smaa.jpg"
) }}

The best way to get a sense for the tradeoffs of the various anti-aliasing methods is to experiment with a test scene using the [`anti_aliasing` example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/anti_aliasing.rs) or by simply trying it out in your own game.


--- END FILE `release-content/0.14/release-notes/13423_Implement_subpixel_morphological_antialiasing_or_SMAA.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13450_Implement_PBR_anisotropy_per_KHR_materials_anisotropy.md` ---


<!-- Implement PBR anisotropy per `KHR_materials_anisotropy`. -->
<!-- https://github.com/bevyengine/bevy/pull/13450 -->

[Anisotropic materials](https://en.wikipedia.org/wiki/Anisotropy) change based on the axis of motion, such as how wood behaves very differently when working with versus against the grain.
But in the context of physically-based rendering, **anisotropy** refers specifically to a feature that allows roughness to vary along the tangent and bitangent directions of a mesh.
In effect, this causes the specular light to stretch out into lines instead of a round lobe. This is useful for modeling brushed metal, hair, and similar surfaces.
Support for anisotropy is a common feature in major game and graphics engines; Unity, Unreal, Godot, three.js, and Blender all support it to varying degrees.

{{ compare_slider(
    path="POST_PATH",
    left_title="Without Anisotropy",
    left_image="without_anisotropy.jpg",
    right_title="With Anisotropy",
    right_image="with_anisotropy.jpg"
) }}

Two new parameters have been added to [`StandardMaterial`](https://docs.rs/bevy/0.14/bevy/pbr/struct.StandardMaterial.html): `anisotropy_strength` and `anisotropy_rotation`.
Anisotropy strength, which ranges from 0 to 1, represents how much the roughness differs between the tangent and the bitangent of the mesh.
In effect, it controls how stretched the specular highlight is. Anisotropy rotation allows the roughness direction to differ from the tangent of the model.

In addition to these two fixed parameters, an anisotropy texture can be supplied, in the linear texture format specified by `KHR_materials_anisotropy`.

Like always, give it a spin at the corresponding [`anisotropy` example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/anisotropy.rs).


--- END FILE `release-content/0.14/release-notes/13450_Implement_PBR_anisotropy_per_KHR_materials_anisotropy.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13453_add_handling_of_all_missing_gltf_extras_scene_mesh__materi.md` ---



The glTF 3D model file format allows passing additional user defined metadata in the *extras* properties, and
in addition to the glTF extras at the primitive/node level , Bevy now has specific GltfExtras for:

- scenes: **SceneGltfExtras** injected at the scene level if any
- meshes: **MeshGltfExtras**, injected at the mesh level if any
- materials: **MaterialGltfExtras**, injected at the mesh level if any: ie if a mesh has a material that has gltf extras, the component will be injected there.

You can now easily query for these specific extras

```rust
fn check_for_gltf_extras(
    gltf_extras_per_entity: Query<(
        Entity,
        Option<&Name>,
        Option<&GltfSceneExtras>,
        Option<&GltfExtras>,
        Option<&GltfMeshExtras>,
        Option<&GltfMaterialExtras>,
    )>,
) {
    // use the extras' data 
    for (id, name, scene_extras, extras, mesh_extras, material_extras) in
        gltf_extras_per_entity.iter()
    {

    }
}

```

This makes passing information from programs such as Blender to Bevy via gltf files more spec compliant, and more practical!


--- END FILE `release-content/0.14/release-notes/13453_add_handling_of_all_missing_gltf_extras_scene_mesh__materi.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13489_Normalise_matrix_naming.md` ---


<!-- Normalize matrix naming -->
<!-- https://github.com/bevyengine/bevy/pull/13489 -->

Game engines generally provide a set of matrices to perform space transformations in the game world. Commonly, the following spaces are used:

- **Normalized Device Coordinates**: used by the graphics API directly
- **Clip Space**: coordinates after projection but before perspective divide
- **View Space**: coordinates in the camera's view
- **World Space**: global coordinates (this is the one we most often talk about!)
- **Model Space**: (or local space) coordinates relative to an entity

A common example is the 'model view projection matrix', which is the transformation from model space to NDC space (peculiarly in this shorthand,
the view matrix is often a transformation from world _to view_ space, but the model matrix is a transformation _from model_ (or local) space to world space).
Usually, matrices are referred to as part of that shorthand, so for example, the projection matrix transforms from view coordinates to NDC coordinates.

In a couple of places, Bevy had a view matrix, which was the transformation from view to world space (rather than from world to view space as above).
Additionally, even when used consistently, the single-word shorthands are ambiguous and can cause confusion. We felt that a clearer convention was needed.

From now on, matrices in Bevy are named `y_from_x`, for example `world_from_local`, which would denote the transformation from local to world-space coordinates.
One tidy benefit of this is that the inverse matrices are named `x_from_y`, and when multiplying between spaces, it's easy to see that it's correct.

For example, instead of writing:

```rust
let model_view_projection = projection * view * model;
```

You would now write:

```rust
let clip_from_local = clip_from_view * view_from_world * world_from_local;
```


--- END FILE `release-content/0.14/release-notes/13489_Normalise_matrix_naming.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13572_Implement_motion_vectors_and_TAA_for_skinned_meshes_and_me.md` ---


<!-- Implement motion vectors and TAA for skinned meshes and meshes with morph targets. -->
<!-- https://github.com/bevyengine/bevy/pull/13572 -->

Back in **Bevy 0.11** we added [Temporal Anti Aliasing (TAA)](/news/bevy-0-11/#temporal-anti-aliasing), which uses Motion Vectors to determine how fast an object is moving. However, in **Bevy 0.11** we only added Motion Vector support for "static" meshes, meaning TAA did not work for animated meshes using skeletal animation or morph targets.

In **Bevy 0.14**, we implemented [Per-Object Motion Blur](#per-object-motion-blur), which _also_ uses Motion Vectors and therefore would have that same limitation.

Fortunately in **Bevy 0.14** we implemented Motion Vectors for skinned meshes and meshes with morph targets, closing this gap and enabling TAA, Per-Object Motion Blur, and future Motion Vector features to work with animated meshes.


--- END FILE `release-content/0.14/release-notes/13572_Implement_motion_vectors_and_TAA_for_skinned_meshes_and_me.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13579_State_Identity_Transitions.md` ---


Users have sometimes asked for us to trigger exit and entry steps when moving from a state to itself.
While this has its uses (refreshing is the core idea), it can be surprising and unwanted in other cases.
We've found a compromise that lets users hook into this type of transition if it's something they need.

`StateEventTransition` events will now include transitions from a state to itself,
which will also propagate to all dependent `ComputedStates` and `SubStates`.

Because it is a niche feature, `OnExit` and `OnEnter` schedules will ignore the new identity transitions by default,
but you can visit the new [`custom_transitions`](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/state/custom_transitions.rs) example to see how you can bypass or change that behavior!


--- END FILE `release-content/0.14/release-notes/13579_State_Identity_Transitions.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13586_glTF_labels_add_enum_to_avoid_misspelling_and_keep_uptodat.md` ---


<!-- glTF labels: add enum to avoid misspelling and keep up-to-date list documented -->
<!-- https://github.com/bevyengine/bevy/pull/13586 -->

If you've been using [`glTF`] files for your scenes or looked at an example that does you've might have seen the _labels_ at the end of the asset path:

```rust
let model_pine = asset_server.load("models/trees/pine.gltf#Scene0");
let model_hen = asset_server.load("models/animals/hen.gltf#Scene0");
let animation_hen = asset_server.load("models/animals/hen.gltf#Aniamtion1"); // Oh no!
```

Notice the `#Scene0` syntax at the end. The glTF format is able to contain many things in a single file, including several scenes, animations, lights, and more.

These labels are a way of telling Bevy which part of the file we're loading.

However this is prone to user-error, and it looks like an error snuck in! The hen animation got the label `Aniamtion1` instead of `Animation1`.

No more! The above can now be re-written like so:

```rust
let hen = "models/animals/hen.gltf"; // Can re-use this more easily too
let model_pine = asset_server.load(GltfAssetLabel::Scene(0).from_asset("models/trees/pine.gltf"));
let model_hen = asset_server.load(GltfAssetLabel::Scene(0).from_asset(hen));
let animation_hen = asset_server.load(GltfAssetLabel::Animation(0).from_asset(hen)); // No typo!
```

Check out [`glTF label docs`] to know which parts you can query for.

[`glTF`]: https://www.khronos.org/gltf/
[`glTF label docs`]: https://docs.rs/bevy/0.14/bevy/gltf/enum.GltfAssetLabel.html


--- END FILE `release-content/0.14/release-notes/13586_glTF_labels_add_enum_to_avoid_misspelling_and_keep_uptodat.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13649_State_Scoped_Entities.md` ---


State scoped entities is a pattern that naturally emerged in community projects. **Bevy 0.14** has embraced it!

```rust
#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default, States)]
enum GameState {
 #[default]
  Menu,
  InGame,
}

fn spawn_player(mut commands: Commands) {
    commands.spawn((
        // We mark this entity with the `StateScoped` component.
        // When the provided state is exited, the entity will be
        // deleted recursively with all children.
        StateScoped(GameState::InGame)
        SpriteBundle { ... }
    ))
}

App::new()
    .init_state::<GameState>()
    // We need to install the appropriate machinery for the cleanup code
    // to run, once for each state type.
    .enable_state_scoped_entities::<GameState>()
    .add_systems(OnEnter(GameState::InGame), spawn_player);
```

By binding entity lifetime to a state during setup, we can dramatically reduce the amount of cleanup code we have to write!


--- END FILE `release-content/0.14/release-notes/13649_State_Scoped_Entities.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13650_Map_entities_from_a_resource_when_written_to_the_world.md` ---


Bevy's `DynamicScene` is a collection of resources and entities that can be serialized to create collections like prefabs or savegame data. When a DynamicScene is deserialized and written into a World - such as when a saved game is loaded - the dynamic entity identifiers inside the scene must be mapped to their newly spawned counterparts.

Previously, this mapping was only available to Entity identifiers stored on Components. In Bevy 0.14, Resources can reflect `MapEntitiesResource` and implement the `MapEntities` trait to get access to the `EntityMapper`.

```rust
    // This resource reflects MapEntitiesResource and implements the MapEntities trait.
    #[derive(Resource, Reflect, Debug)]
    #[reflect(Resource, MapEntitiesResource)]
    struct TestResource {
        entity_a: Entity,
        entity_b: Entity,
    }

    // A simple and common use is a straight mapping of the old entity to the new.
    impl MapEntities for TestResource {
        fn map_entities<M: EntityMapper>(&mut self, entity_mapper: &mut M) {
            self.entity_a = entity_mapper.map_entity(self.entity_a);
            self.entity_b = entity_mapper.map_entity(self.entity_b);
        }
    }
```


--- END FILE `release-content/0.14/release-notes/13650_Map_entities_from_a_resource_when_written_to_the_world.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/13653_Added_CompassQuadrant_and_CompassOctant_as_per_13647.md` ---


<!-- Added CompassQuadrant and CompassOctant as per #13647 -->
<!-- https://github.com/bevyengine/bevy/pull/13653 -->

There are many instances in game development where its important to know the compass facing for a given direction. This is particularly true in 2D games that use four or eight direction sprites, or want to map analog input into discrete movement directions.

In order to make this easier the enums `CompassQuadrant` (for a four-way division) and `CompassOctant` (for an eight-way division) have been added with implementations to and `From<Dir2>` for ease of use.


--- END FILE `release-content/0.14/release-notes/13653_Added_CompassQuadrant_and_CompassOctant_as_per_13647.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/5781_bevy_reflect_Recursive_registration.md` ---


Bevy uses [reflection](https://docs.rs/bevy_reflect/latest/bevy_reflect/) in order to dynamically process data for things like serialization and deserialization.
A Bevy app has a `TypeRegistry` to keep track of which types exist.
Users can register their custom types when initializing the app or plugin.

```rust
#[derive(Reflect)]
struct Data<T> {
  value: T,
}

#[derive(Reflect)]
struct Blob {
  contents: Vec<u8>,
}

app
  .register_type::<Data<Blob>>()
  .register_type::<Blob>()
  .register_type::<Vec<u8>>()
```

In the code above, `Data<Blob>` depends on `Blob` which depends on `Vec<u8>`,
which means that all three types need to be manually registered—
even if we only care about `Data<Blob>`.

This is both tedious and error-prone, especially when these type dependencies are only
used in the context of other types (i.e. they aren't used as standalone types).

In 0.14, any type that derives `Reflect` will automatically register all of its type dependencies.
So when we register `Data<Blob>`, `Blob` will be registered as well (which will register `Vec<u8>`),
thus simplifying our registration down to a single line:

```rust
app.register_type::<Data<Blob>>()
```

Note that removing the registration for `Data<Blob>` now also means that `Blob` and `Vec<u8>` may
not be registered either, unless they were registered some other way.
If those types are needed as standalone types, they should be registered separately.


--- END FILE `release-content/0.14/release-notes/5781_bevy_reflect_Recursive_registration.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/9135_Add_pipeline_statistics.md` ---


While [Tracy](https://github.com/bevyengine/bevy/blob/main/docs/profiling.md) already lets us measure CPU time per system, our GPU diagnostics are much weaker.
In Bevy 0.14 we've added support for two classes of rendering-focused statistics via the [`RenderDiagnosticsPlugin`](https://docs.rs/bevy/0.14/bevy/render/diagnostic/struct.RenderDiagnosticsPlugin.html):

1. **Timestamp queries:** how long did specific bits of work take on the GPU?
2. **Pipeline statistics:** information about the quantity of work sent to the GPU.

While it may sound like timestamp queries are the ultimate diagnostic tool, they come with several caveats.
Firstly, they vary quite heavily from frame-to-frame as GPUs dynamically ramp up and down clock speed due to workload (idle gaps in GPU work, e.g., a bunch of consecutive barriers, or the tail end of a large dispatch) or the physical temperature of the GPU.
To get an accurate measurement, you need to look at summary statistics: mean, median, 75th percentile and so on.

Secondly, while timestamp queries will tell you how long something takes, but it will not tell you why things are slow.
For finding bottlenecks, you want to use a GPU profiler from your GPU vendor (Nvidia's NSight, AMD's RGP, Intel's GPA or Apple's XCode).
These tools will give you much more detailed stats about cache hit rate, warp occupancy, and so on.
On the other hand they lock your GPU's clock to base speeds for stable results, so they won't give you a good indicator of real world performance.

[`RenderDiagnosticsPlugin`] tracks the following pipeline statistics, recorded in Bevy's [`DiagnosticsStore`](https://docs.rs/bevy/0.14/bevy/diagnostic/struct.DiagnosticsStore.html): Elapsed CPU time, Elapsed GPU time, [Vertex shader](https://www.khronos.org/opengl/wiki/Vertex_Shader) invocations, [Fragment shader](https://www.khronos.org/opengl/wiki/Fragment_Shader) invocations, [Compute shader](https://www.khronos.org/opengl/wiki/Compute_Shader) invocations, [Clipper invocations](http://gpa.helpmax.net/en/intel-graphics-performance-analyzers-help/metrics-descriptions/extended-metrics-description/rasterizer-metrics/clipper-invocations/), and [Clipper primitives](http://gpa.helpmax.net/en/intel-graphics-performance-analyzers-help/metrics-descriptions/extended-metrics-description/rasterizer-metrics/post-clip-primitives/).

You can also track individual render/compute passes, groups of passes (e.g. all shadow passes), and individual commands inside passes (like draw calls).
 To do so, instrument them using methods from the [`RecordDiagnostics`](https://docs.rs/bevy/0.14/bevy/render/diagnostic/trait.RecordDiagnostics.html) trait.

[`RenderDiagnosticsPlugin`]: https://docs.rs/bevy/0.14/bevy/render/diagnostic/struct.RenderDiagnosticsPlugin.html

--- END FILE `release-content/0.14/release-notes/9135_Add_pipeline_statistics.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/9924_PerObject_Motion_Blur.md` ---


We've added a post-processing effect that blurs fast-moving objects in the direction of motion.
Our implementation uses motion vectors, which means it works with Bevy's built in PBR materials, skinned meshes, or anything else that writes motion vectors and depth.
The effect is used to convey high speed motion, which can otherwise look like flickering or teleporting when the image is perfectly sharp.

Blur scales with the motion of objects relative to the camera.
If the camera is tracking a fast moving object, like a vehicle, the vehicle will remain sharp, while stationary objects will be blurred.
Conversely, if the camera is pointing at a stationary object, and a fast moving vehicle moves through the frame, only the fast moving object will be blurred.

The implementation is configured with [camera shutter angle](https://en.wikipedia.org/wiki/Rotary_disc_shutter), which corresponds to how long the virtual shutter is open during a frame.
In practice, this means the effect scales with framerate, so users running at high refresh rates aren't subjected to over-blurring.

<video controls loop><source src="motion_blur_cars.mp4" type="video/mp4"/></video>

You can enable motion blur by adding [`MotionBlurBundle`](https://docs.rs/bevy/0.14/bevy/core_pipeline/motion_blur/struct.MotionBlurBundle.html) to your camera entity, as shown in our [`motion blur` example](https://github.com/bevyengine/bevy/tree/v0.14.0/examples/3d/motion_blur.rs).


--- END FILE `release-content/0.14/release-notes/9924_PerObject_Motion_Blur.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/New_gizmos_types.md` ---


Gizmos in Bevy allow developers to easily draw arbitrary shapes to help debugging or authoring content, but also to visualize specific properties of your scene, such has the AABB of your meshes.

In 0.14, several new gizmos have been added to [`bevy::gizmos`]:

#### Rounded box gizmos

Rounded boxes and cubes are great for visualizing regions and colliders.

If you set the `corner_radius` or `edge_radius` to a positive value, the corners will be rounded outwards. However, if you provide a negative value, the corners will flip and curve inwards.

![rounded gizmos cuboids](gizmos_rounded_cuboid.jpg)
![rounded gizmos rectangles](gizmos_rounded_rect.jpg)

#### Grid Gizmos

New grid gizmo types were added with [`Gizmos::grid_2d`] and [`Gizmos::grid`] to draw a plane grid in either 2D or 3D, alongside [`Gizmos::grid_3d`] to draw a 3D grid.

Each grid type can be skewed, scaled and subdivided along its axis, and you can separately control which outer edges to draw.

![Grid gizmos screenshot](grid_gizmos.jpg)

#### Coordinate Axes Gizmo

The new [`Gizmos::axes`] add a simple way to show the position, orientation and scale of any object from its [`Transform`] plus a base size.
The size of each axis arrow is proportional to the corresponding axis scale in the provided [`Transform`].

![Axes gizmo screenshot](axes_gizmo.jpg)

#### Light Gizmos

The new [`ShowLightGizmo`] component implements a retained gizmo to visualize lights for [`SpotLight`], [`PointLight`] and [`DirectionalLight`].
Most light properties are visually represented by the gizmos, and the gizmo color can be set to match the light instance or use a variety of other behaviors.

Similar to other retained gizmos, [`ShowLightGizmo`] can be configured per-instance or globally with [`LightGizmoConfigGroup`].

![Light gizmos screenshot](light_gizmos.jpg)

[`bevy::gizmos`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/index.html
[`Gizmos::grid_2d`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/prelude/struct.Gizmos.html#method.grid_2d
[`Gizmos::grid`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/prelude/struct.Gizmos.html#method.grid
[`Gizmos::grid_3d`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/prelude/struct.Gizmos.html#method.grid_3d
[`Gizmos::axes`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/prelude/struct.Gizmos.html#method.axes
[`Transform`]: https://docs.rs/bevy/0.14.0/bevy/prelude/struct.Transform.html
[`ShowLightGizmo`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/light/struct.ShowLightGizmo.html
[`SpotLight`]: https://docs.rs/bevy/0.14.0/bevy/pbr/struct.SpotLight.html
[`PointLight`]: https://docs.rs/bevy/0.14.0/bevy/pbr/struct.PointLight.html
[`DirectionalLight`]: https://docs.rs/bevy/0.14.0/bevy/pbr/struct.DirectionalLight.html
[`LightGizmoConfigGroup`]: https://docs.rs/bevy/0.14.0/bevy/gizmos/light/struct.LightGizmoConfigGroup.html


--- END FILE `release-content/0.14/release-notes/New_gizmos_types.md` ---


--- BEGIN FILE `release-content/0.14/release-notes/new_math_primitives.md` ---


Geometric shapes find a variety of applications in game development, ranging from rendering simple items to the screen for display / debugging to use in
colliders, physics, raycasting, and more.

For this, geometric shape primitives were [introduced in Bevy 0.13](https://bevy.org/news/bevy-0-13/#primitive-shapes), and work on this area has continued with Bevy 0.14, which brings the addition of 
[`Triangle3d`] and [`Tetrahedron`] 3D primitives, along with [`Rhombus`], [`Annulus`], [`Arc2d`], [`CircularSegment`], and [`CircularSector`] 2D 
primitives. As usual, these each have methods for querying geometric information like perimeter, area, and volume, and they all support meshing (where 
applicable) as well as gizmo display. 

[`Triangle3d`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.Triangle3d.html
[`Tetrahedron`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.Tetrahedron.html
[`Rhombus`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.Rhombus.html
[`Annulus`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.Annulus.html
[`Arc2d`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.Arc2d.html
[`CircularSegment`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.CircularSegment.html
[`CircularSector`]: https://docs.rs/bevy/0.14.0/bevy/math/primitives/struct.CircularSector.html


--- END FILE `release-content/0.14/release-notes/new_math_primitives.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/10193_Cosmic_text.md` ---


- `Text2dBounds` has been replaced with `TextBounds`, and it now accepts `Option`s to the bounds, instead of using `f32::INFINITY` to indicate lack of bounds
- Textsizes should be changed, dividing the current size with 1.2 will result in the same size as before.
- `TextSettings` struct is removed
- Feature `subpixel_glyph_atlas` has been removed since cosmic-text already does this automatically
- TextBundles and things rendering texts requires the `CosmicBuffer` Component on them as well


--- END FILE `release-content/0.15/migration-guides/10193_Cosmic_text.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/10823_Generalized_IntoAssetSourceId_and_IntoAssetPath_Implementa.md` ---


In areas where these implementations where being used, you can now add `from_static` in order to get the original specialised implementation which avoids creating an `Arc` internally.

```rust
// Before
let asset_path = AssetPath::from("my/path/to/an/asset.ext");

// After
let asset_path = AssetPath::from_static("my/path/to/an/asset.ext");
```

To be clear, this is only required if you wish to maintain the performance benefit that came with the specialisation. Existing code is _not_ broken by this change.


--- END FILE `release-content/0.15/migration-guides/10823_Generalized_IntoAssetSourceId_and_IntoAssetPath_Implementa.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/11741_Send_SceneInstanceReady_when_spawning_any_kind_of_scene.md` ---


- `SceneInstanceReady { parent: Entity }` is now `SceneInstanceReady { id: InstanceId, parent: Option<Entity> }`.


--- END FILE `release-content/0.15/migration-guides/11741_Send_SceneInstanceReady_when_spawning_any_kind_of_scene.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/12095_Add_features_to_switch_NativeActivity_and_GameActivity_usa.md` ---


`GameActivity` is now the default activity for Android projects, replacing `NativeActivity`.
`cargo-apk` has been replaced with `cargo-ndk` since the former is not compatible with
`GameActivity`.

Before:

```shell
rustup target add aarch64-linux-android armv7-linux-androideabi
cargo install cargo-apk
```

After:

```shell
rustup target add aarch64-linux-android
cargo install cargo-ndk
```

Shared object files must be now built for the target architecture before launching package builds
with the Gradle wrapper.

Before:

```shell
cargo apk build --package bevy_mobile_example
```

After:

```shell
cargo ndk -t arm64-v8a -o android_example/app/src/main/jniLibs build --package bevy_mobile_example
./android_example/gradlew build
```

(replace target and project name as required). Note that build output paths have changed. APK builds
can be found under `app/build/outputs/apk`).

Android Studio may also be used.

Bevy may require the `libc++_shared.so` library to run on Android. This can be manually obtained
from NDK source, or NDK describes a
[`build.rs`](https://github.com/bbqsrc/cargo-ndk?tab=readme-ov-file#linking-against-and-copying-libc_sharedso-into-the-relevant-places-in-the-output-directory)
approach. A suggested solution is also presented in the Bevy mobile example.

Applications that still require `NativeActivity` should:
1. disable default features in `Cargo.toml`
2. re-enable all default features _except_ `android-game-activity`
3. enable the `android-native-activity` feature


--- END FILE `release-content/0.15/migration-guides/12095_Add_features_to_switch_NativeActivity_and_GameActivity_usa.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/12637_check_sampler_type_in_as_bind_group_derives.md` ---


Instead of panicking, the `AsBindGroup` derive can now fail.
To accommodate this, `PrepareAssetError` now has another arm: `PrepareAssetError::AsBindGroupError`.
If you were exhaustively matching, you now need to handle this failure mode.


--- END FILE `release-content/0.15/migration-guides/12637_check_sampler_type_in_as_bind_group_derives.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/12770_Implement_gamepads_as_entities.md` ---


Gamepad input is no longer accessed using resources, instead they are entities and are accessible using the Gamepad component as long as the gamepad is connected.

Gamepads resource has been deleted, instead of using an internal id to identify gamepads you can use its Entity. Disconnected gamepads will **NOT** be despawned. Gamepad components that don’t need to preserve their state will be removed i.e. Gamepad component is removed, but GamepadSettings is kept.
Reconnected gamepads will try to preserve their Entity id and necessary components will be re-inserted.

GamepadSettings is no longer a resource, instead it is a component attached to the Gamepad entity.

Axis<GamepadButton>, Axis<GamepadAxis> and ButtonInput<GamepadButton> methods are accessible via Gamepad component.

```diff
fn gamepad_system(
-   gamepads: Res<Gamepads>,
-   button_inputs: Res<ButtonInput<GamepadButton>>,
-   button_axes: Res<Axis<GamepadButton>>,
-   axes: Res<Axis<GamepadAxis>>,
+   gamepads: Query<&Gamepad>
) {
    for gamepad in gamepads.iter() {
-      if button_inputs.just_pressed(GamepadButton::new(gamepad, GamepadButtonType::South)) {
+      if gamepad.just_pressed(GamepadButton::South) {
            println!("just pressed South");
        } 
         
-      let right_trigger = button_axes
-           .get(GamepadButton::new(
-               gamepad,
-               GamepadButtonType::RightTrigger2,
-           ))
-           .unwrap();
+      let right_trigger = gamepad.get(GamepadButton::RightTrigger2).unwrap();
        if right_trigger.abs() > 0.01 {
            info!("RightTrigger2 value is {}", right_trigger);      
        }

-        let left_stick_x = axes
-           .get(GamepadAxis::new(gamepad, GamepadAxisType::LeftStickX))
-           .unwrap();
+       let left_stick_x = gamepad.get(GamepadAxis::LeftStickX).unwrap();
        if left_stick_x.abs() > 0.01 {
            info!("LeftStickX value is {}", left_stick_x);        
        }
    }
}
```


--- END FILE `release-content/0.15/migration-guides/12770_Implement_gamepads_as_entities.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/12929_Remove_redundant_information_and_optimize_dynamic_allocati.md` ---


`Table` now uses `ThinColumn` instead of `Column`. That means that methods that previously returned `Column`, will now return `ThinColumn` instead.

`ThinColumn` has a much more limited and low-level API, but you can still achieve the same things in `ThinColumn` as you did in `Column`. For example, instead of calling `Column::get_added_tick`, you’d call `ThinColumn::get_added_ticks_slice` and index it to get the specific added tick.


--- END FILE `release-content/0.15/migration-guides/12929_Remove_redundant_information_and_optimize_dynamic_allocati.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13014_Dedicated_Reflect_implementation_for_Setlike_things.md` ---


- The new `Set` variants on the enums listed in the change section should probably be considered by people working with this level of the lib

__Help wanted!__

I’m not sure if this change is able to break code. From my understanding it shouldn’t since we just add functionality but I’m not sure yet if theres anything missing from my impl that would be normally provided by `impl_reflect_value!`


--- END FILE `release-content/0.15/migration-guides/13014_Dedicated_Reflect_implementation_for_Setlike_things.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13045_Support_on_thread_spawn_and_on_thread_destroy_for_TaskPool.md` ---


- `TaskPooolThreadAssignmentPolicy` now has two additional fields: `on_thread_spawn` and `on_thread_destroy`. Please consider defaulting them to `None`.


--- END FILE `release-content/0.15/migration-guides/13045_Support_on_thread_spawn_and_on_thread_destroy_for_TaskPool.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13069_Add_2d_opaque_phase_with_depth_buffer.md` ---


- `ColorMaterial` now contains `AlphaMode2d`. To keep previous behaviour, use `AlphaMode::BLEND`. If you know your sprite is opaque, use `AlphaMode::OPAQUE`


--- END FILE `release-content/0.15/migration-guides/13069_Add_2d_opaque_phase_with_depth_buffer.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13186_Wgpu_020.md` ---


- Updated to `wgpu` 0.20, `naga` 0.20, and `naga_oil` 0.14
- All of Naga’s [`Capabilities`](https://docs.rs/naga/latest/naga/valid/struct.Capabilities.html) should now be properly detected and supported.
- Timestamps inside encoders are now disallowed on WebGPU to follow the spec (they still work on native). Use the `TIMESTAMP_QUERY_INSIDE_ENCODERS ` wgpu feature to check for support.
- You can now use many numeric built-ins in `const` contexts (eg. `abs`, `cos`, `floor`, `max`, etc, see https://github.com/gfx-rs/wgpu/blob/v0.20/CHANGELOG.md#wgsl-const-evaluation-for-many-more-built-ins for the whole list)
- You can now use Subgroup operations in shaders on supported hardware (see https://github.com/gfx-rs/wgpu/blob/v0.20/CHANGELOG.md#subgroup-operations for limitations and which features to check)
- `u64` and `i64` are now supported in shaders on supported hardware (requires the `SHADER_INT64 ` feature, supported on desktop Vulkan, DX12 with DXC, and Metal with MSL 2.3+)


--- END FILE `release-content/0.15/migration-guides/13186_Wgpu_020.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13240_Dont_ignore_draw_errors.md` ---


If you were using `RenderCommandResult::Failure` to just ignore an error and retry later, use `RenderCommandResult::Skip` instead.

This wasn’t intentional, but this PR should also help with https://github.com/bevyengine/bevy/issues/12660 since we can turn a few unwraps into error messages now.


--- END FILE `release-content/0.15/migration-guides/13240_Dont_ignore_draw_errors.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13321_bevy_reflect_Nested_TypeInfo_getters.md` ---


All active fields for reflected types (including lists, maps, tuples, etc.), must implement `Typed`. For the majority of users this won’t have any visible impact.

However, users implementing `Reflect` manually may need to update their types to implement `Typed` if they weren’t already.

Additionally, custom dynamic types will need to implement the new hidden `MaybeTyped` trait.


--- END FILE `release-content/0.15/migration-guides/13321_bevy_reflect_Nested_TypeInfo_getters.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13419_Allow_mix_of_hdr_and_nonhdr_cameras_to_same_render_target.md` ---


Change `CameraOutputMode` to use `ClearColorConfig` instead of `LoadOp`.


--- END FILE `release-content/0.15/migration-guides/13419_Allow_mix_of_hdr_and_nonhdr_cameras_to_same_render_target.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13454_Added_visibility_bitmask_as_an_alternative_SSAO_method.md` ---


SSAO algorithm was changed from GTAO to VBAO (visibility bitmasks). A new field, `constant_object_thickness`, was added to `ScreenSpaceAmbientOcclusion`. `ScreenSpaceAmbientOcclusion` also lost its `Eq` and `Hash` implementations.


--- END FILE `release-content/0.15/migration-guides/13454_Added_visibility_bitmask_as_an_alternative_SSAO_method.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13620_Fix_UI_texture_atlas_with_offset.md` ---


```diff
let ui_node = ExtractedUiNode {
                    stack_index,
                    transform,
                    color,
                    rect,
                    image,
-                   atlas_size: Some(atlas_size * scale_factor),      
+                   atlas_scaling: Some(Vec2::splat(scale_factor)),
                    clip,
                    flip_x,
                    flip_y,
                    camera_entity,
                    border,
                    border_radius,
                    node_type,
                },
```

```diff
let computed_slices = ComputedTextureSlices {
    slices,
-    image_size,
}
```


--- END FILE `release-content/0.15/migration-guides/13620_Fix_UI_texture_atlas_with_offset.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13669_Expose_winits_MonitorHandle.md` ---


- `WindowMode` variants now take a `MonitorSelection`, which can be set to `MonitorSelection::Primary` to mirror the old behavior.


--- END FILE `release-content/0.15/migration-guides/13669_Expose_winits_MonitorHandle.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13707_Make_gLTF_node_children_Handle_instead_of_objects.md` ---


If accessing children, use `Assets<GltfNode>` resource to get the actual child object.

__Before__

```rs
fn gltf_print_first_node_children_system(gltf_component_query: Query<Handle<Gltf>>, gltf_assets: Res<Assets<Gltf>>, gltf_nodes: Res<Assets<GltfNode>>) {
    for gltf_handle in gltf_component_query.iter() {
        let gltf_root = gltf_assets.get(gltf_handle).unwrap();
        let first_node_handle = gltf_root.nodes.get(0).unwrap();
        let first_node = gltf_nodes.get(first_node_handle).unwrap();
        let first_child = first_node.children.get(0).unwrap();
        println!("First nodes child node name is {:?)", first_child.name);
    }
}
```

__After__

```rs
fn gltf_print_first_node_children_system(gltf_component_query: Query<Handle<Gltf>>, gltf_assets: Res<Assets<Gltf>>, gltf_nodes: Res<Assets<GltfNode>>) {
    for gltf_handle in gltf_component_query.iter() {
        let gltf_root = gltf_assets.get(gltf_handle).unwrap();
        let first_node_handle = gltf_root.nodes.get(0).unwrap();
        let first_node = gltf_nodes.get(first_node_handle).unwrap();
        let first_child_handle = first_node.children.get(0).unwrap();
        let first_child = gltf_nodes.get(first_child_handle).unwrap();
        println!("First nodes child node name is {:?)", first_child.name);
    }
}
```


--- END FILE `release-content/0.15/migration-guides/13707_Make_gLTF_node_children_Handle_instead_of_objects.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13712_Add_feature_requirement_info_to_image_loading_docs.md` ---


Image format related entities are feature gated, if there are compilation errors about unknown names there are some of features in list (`exr`, `hdr`, `basis-universal`, `png`, `dds`, `tga`, `jpeg`, `bmp`, `ktx2`, `webp` and `pnm`) should be added.


--- END FILE `release-content/0.15/migration-guides/13712_Add_feature_requirement_info_to_image_loading_docs.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13717_Uncouple_DynamicTextureAtlasBuilder_from_assets.md` ---


- Replace the `glyph_id` and `subpixel_offset` of a few text atlas APIs by a single `place_glyph: PlacedGlyph` parameter trivially combining the two.
- `DynamicTextureAtlasBuilder::add_texture` now takes a `&mut Image`, rather than a `Handle<Image>`. To access this, fetch the underlying image using `Assets<Image>::get_mut`.


--- END FILE `release-content/0.15/migration-guides/13717_Uncouple_DynamicTextureAtlasBuilder_from_assets.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13727_Add_mappings_to_EntityMapper.md` ---


- If you are implementing `EntityMapper` yourself, you can use the below as a stub implementation:

```rust
fn mappings(&self) -> impl Iterator<Item = (Entity, Entity)> {
    unimplemented!()
}
```

- If you were using `EntityMapper` as a trait object (`dyn EntityMapper`), instead use `dyn DynEntityMapper` and its associated methods.


--- END FILE `release-content/0.15/migration-guides/13727_Add_mappings_to_EntityMapper.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13745_Improve_error_handling_for_AssetServeradd_async.md` ---


`AssetServer::add_async` can now return a custom error type in its future.
To return to the previous behavior, pass in an `E` generic of `AssetLoadError`.

To support these changes, `AssetLoadError` now has an additional arm that will need to be exhaustively matched against.


--- END FILE `release-content/0.15/migration-guides/13745_Improve_error_handling_for_AssetServeradd_async.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13759_Adds_back_in_way_to_convert_color_to_u8_array_implemented_.md` ---


`Color::linear` has been renamed to `Color::to_linear` for consistency.


--- END FILE `release-content/0.15/migration-guides/13759_Adds_back_in_way_to_convert_color_to_u8_array_implemented_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13760_Add_Display_implementation_to_DebugName.md` ---


- In code which uses DebugName you should now use the Display implementation rather than the Debug implementation (ie {} instead of {:?} if you were printing it out).


--- END FILE `release-content/0.15/migration-guides/13760_Add_Display_implementation_to_DebugName.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13784_Rename_and_Extend_Run_Conditions_API.md` ---


- The `and_then` run condition method has been replaced with the `and` run condition method.
- The `or_else` run condition method has been replaced with the `or` run condition method.


--- END FILE `release-content/0.15/migration-guides/13784_Rename_and_Extend_Run_Conditions_API.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13818_Created_an_EventMutator_for_when_you_want_to_mutate_an_eve.md` ---


Users currently using `ManualEventReader` should use `EventCursor` instead. `ManualEventReader` will be removed in Bevy 0.16. Additionally, `Events::get_reader` has been replaced by `Events::get_cursor`.

Users currently directly accessing the `Events` resource for mutation should move to `EventMutator` if possible.


--- END FILE `release-content/0.15/migration-guides/13818_Created_an_EventMutator_for_when_you_want_to_mutate_an_eve.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13837_Use_a_well_defined_type_for_sides_in_RegularPolygon.md` ---


- `RegularPolygon` now uses `u32` instead of `usize` for the number of sides


--- END FILE `release-content/0.15/migration-guides/13837_Use_a_well_defined_type_for_sides_in_RegularPolygon.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13855_Align_Scenewrite_to_world_with_to_match_DynamicScenewrite_.md` ---


`Scene::write_to_world_with` no longer returns an `InstanceInfo`. 

Before

```rust
scene.write_to_world_with(world, &registry)
```

After

```rust
let mut entity_map = EntityHashMap::default();
scene.write_to_world_with(world, &mut entity_map, &registry)
```


--- END FILE `release-content/0.15/migration-guides/13855_Align_Scenewrite_to_world_with_to_match_DynamicScenewrite_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13859_Change_SceneInstanceReady_to_trigger_an_observer.md` ---


If you have a system which reads `SceneInstanceReady` events, it must be rewritten as an observer or entity observer.

```rust
// 0.14
fn ready_system(ready_events: EventReader<'_, '_, SceneInstanceReady>) {
    // ...
}

// 0.15
commands.observe(|trigger: Trigger<SceneInstanceReady>| {
    // ...
});
commands.entity(entity).observe(|trigger: Trigger<SceneInstanceReady>| {
    // ...
});
```


--- END FILE `release-content/0.15/migration-guides/13859_Change_SceneInstanceReady_to_trigger_an_observer.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13871_Replaced_implicit_emissive_weight_with_default.md` ---


The behaviour of emissive materials when using deferred rendering has been changed to match forward rendering.
Tweak the emissive values of your materials to achieve the desired efffect.


--- END FILE `release-content/0.15/migration-guides/13871_Replaced_implicit_emissive_weight_with_default.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13919_IntoSystemConfigschain_ignore_deferreds_return_type_fix.md` ---


`IntoSystemConfigs::chain_ignore_deferred` now correctly returns a `SystemSetConfig`.


--- END FILE `release-content/0.15/migration-guides/13919_IntoSystemConfigschain_ignore_deferreds_return_type_fix.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13927_Use_u32_for_all_resolutionsubdivision_fields_in_bevy_gizmo.md` ---


- All gizmos now take `u32` instead of `usize` for their resolution/subdivision/segment counts


--- END FILE `release-content/0.15/migration-guides/13927_Use_u32_for_all_resolutionsubdivision_fields_in_bevy_gizmo.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13930_Use_u32_for_resolutionsubdivision_in_primitive_meshing.md` ---


- All primitive mesh builders now take `u32` instead of `usize` for their resolution/subdivision/segment counts


--- END FILE `release-content/0.15/migration-guides/13930_Use_u32_for_resolutionsubdivision_in_primitive_meshing.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13934_Change_Worldinspect_entity_to_return_an_Iterator_instead_o.md` ---


- `World::inspect_entity` now returns an `Iterator` instead of a `Vec`. If you need a `Vec`, immediately collect the iterator: `world.inspect_entity(entity).collect<Vec<_>>()`


--- END FILE `release-content/0.15/migration-guides/13934_Change_Worldinspect_entity_to_return_an_Iterator_instead_o.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/13991_Minimal_Bubbling_Observers.md` ---


- Manual implementations of `Event` should add associated type `Traverse = TraverseNone` and associated constant `AUTO_PROPAGATE = false`;
- `Trigger::new` has new field `propagation: &mut Propagation` which provides the bubbling state.
- `ObserverRunner` now takes the same `&mut Propagation` as a final parameter.


--- END FILE `release-content/0.15/migration-guides/13991_Minimal_Bubbling_Observers.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14001_Handle_CtrlC_in_the_terminal_properly.md` ---


If you are overriding the `Ctrl+C` handler then you should call `TerminalCtrlCHandlerPlugin::gracefully_exit` from your handler. It will tell the app to exit.


--- END FILE `release-content/0.15/migration-guides/14001_Handle_CtrlC_in_the_terminal_properly.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14017_Make_default_behavior_for_BackgroundColor_and_BorderColor_.md` ---


- `BackgroundColor` no longer tints the color of images in `ImageBundle` or `ButtonBundle`. Set `UiImage::color` to tint images instead.
- The default texture for `UiImage` is now a transparent white square.  Use `UiImage::solid_color` to quickly draw debug images.
- The default value for `BackgroundColor` and `BorderColor` is now transparent. Set the color to white manually to return to previous behavior.


--- END FILE `release-content/0.15/migration-guides/14017_Make_default_behavior_for_BackgroundColor_and_BorderColor_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14034_Track_source_location_in_change_detection.md` ---


- Added `changed_by` field to many internal ECS functions used with change detection when the `track_change_detection` feature flag is enabled. Use Location::caller() to provide the source of the function call.


--- END FILE `release-content/0.15/migration-guides/14034_Track_source_location_in_change_detection.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14048_Added_feature_switch_to_default_Standard_Materials_new_ani.md` ---


- Add feature pbr_anisotropy_texture if you are using that texture in any standard materials.


--- END FILE `release-content/0.15/migration-guides/14048_Added_feature_switch_to_default_Standard_Materials_new_ani.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14050_Support_more_kinds_of_system_params_in_buildable_systems.md` ---


The API for `SystemBuilder` has changed.  Instead of constructing a builder with a world and then adding params, you first create a tuple of param builders and then supply the world.

```rust
// Before
let system = SystemBuilder::<()>::new(&mut world)
    .local::<u64>()
    .builder::<Local<u64>>(|x| *x = 10)
    .builder::<Query<&A>>(|builder| { builder.with::<B>(); })
    .build(system);

// After
let system = (
    ParamBuilder,
    LocalBuilder(10),
    QueryParamBuilder::new(|builder| { builder.with::<B>(); }),
)
    .build_state(&mut world)
    .build_system(system);
```


--- END FILE `release-content/0.15/migration-guides/14050_Support_more_kinds_of_system_params_in_buildable_systems.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14073_Lighting_Should_Only_hold_VecEntity_instead_of_TypeIdVecEn.md` ---


`SpotLight`, `CascadesVisibleEntities` and `CubemapVisibleEntities` now use `VisibleMeshEntities` instead of `VisibleEntities`


--- END FILE `release-content/0.15/migration-guides/14073_Lighting_Should_Only_hold_VecEntity_instead_of_TypeIdVecEn.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14082_AssetReader_read_now_returns_an_opaque_type.md` ---


The trait method `bevy_asset::io::AssetReader::read` (and `read_meta`) now return an opaque type instead of a boxed trait object. Implementors of these methods should change the type signatures appropriately:

```rust
impl AssetReader for MyReader {
    // Before
    async fn read<'a>(&'a self, path: &'a Path) -> Result<Box<Reader<'a>>, AssetReaderError> {
        let reader = // construct a reader
        Box::new(reader) as Box<Reader<'a>>
    }

    // After
    async fn read<'a>(&'a self, path: &'a Path) -> Result<impl Reader + 'a, AssetReaderError> {
        // create a reader
    }
}
```

`bevy::asset::io::Reader` is now a trait, rather than a type alias for a trait object. Implementors of `AssetLoader::load` will need to adjust the method signature accordingly:

```rust
impl AssetLoader for MyLoader {
    async fn load<'a>(
        &'a self,
        // Before:
        reader: &'a mut bevy::asset::io::Reader,
        // After:
        reader: &'a mut dyn bevy::asset::io::Reader,
        _: &'a Self::Settings,
        load_context: &'a mut LoadContext<'_>,
    ) -> Result<Self::Asset, Self::Error> {
}
```

Additionally, implementors of `AssetReader` that return a type implementing `futures_io::AsyncRead` and `AsyncSeek` might need to explicitly implement `bevy::asset::io::Reader` for that type.

```rust
impl bevy::asset::io::Reader for MyAsyncReadAndSeek {}
```

--- END FILE `release-content/0.15/migration-guides/14082_AssetReader_read_now_returns_an_opaque_type.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14091_Bump_accesskit_to_016.md` ---


`accesskit`’s `Role::StaticText` variant has been renamed to `Role::Label`.


--- END FILE `release-content/0.15/migration-guides/14091_Bump_accesskit_to_016.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14099_Allow_volumetric_fog_to_be_localized_to_specific_optionally.md` ---


- A `FogVolume` is now necessary in order to enable volumetric fog, in addition to `VolumetricFogSettings` on the camera. Existing uses of volumetric fog can be migrated by placing a large `FogVolume` surrounding the scene.


--- END FILE `release-content/0.15/migration-guides/14099_Allow_volumetric_fog_to_be_localized_to_specific_optionally.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14178_Remove_unused_type_parameter_in_Paralleldrain.md` ---


The type parameter of `Parallel::drain()` was unused, so it is now removed. If you were manually specifying it, you can remove the bounds.

```rust
// 0.14
// Create a `Parallel` and give it a value.
let mut parallel: Parallel<Vec<u8>> = Parallel::default();
*parallel.borrow_local_mut() = vec![1, 2, 3];

for v in parallel.drain::<u8>() {
    // ...
}

// 0.15
let mut parallel: Parallel<Vec<u8>> = Parallel::default();
*parallel.borrow_local_mut() = vec![1, 2, 3];

// Remove the type parameter.
for v in parallel.drain() {
    // ...
}
```


--- END FILE `release-content/0.15/migration-guides/14178_Remove_unused_type_parameter_in_Paralleldrain.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14194_Replace_AsyncSeek_trait_by_AsyncSeekForward_for_Reader_to_.md` ---


Replace all instances of `AsyncSeek` with `AsyncSeekForward` in your asset reader implementations.


--- END FILE `release-content/0.15/migration-guides/14194_Replace_AsyncSeek_trait_by_AsyncSeekForward_for_Reader_to_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14198_Remove_need_for_EventLoopProxy_to_be_NonSend.md` ---


`EventLoopProxy` has been renamed to `EventLoopProxyWrapper` and is now `Send`, making it an ordinary resource.

Before:

```rust
event_loop_system(event_loop: NonSend<EventLoopProxy<MyEvent>>) {
    event_loop.send_event(MyEvent);
}
```

After:

```rust
event_loop_system(event_loop: Res<EventLoopProxy<MyEvent>>) {
    event_loop.send_event(MyEvent);
}
```


--- END FILE `release-content/0.15/migration-guides/14198_Remove_need_for_EventLoopProxy_to_be_NonSend.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14211_Rename_bevy_corenameDebugName_to_bevy_corenameNameOrEntity.md` ---


- Rename usages of `bevy_core::name::DebugName` to `bevy_core::name::NameOrEntity`


--- END FILE `release-content/0.15/migration-guides/14211_Rename_bevy_corenameDebugName_to_bevy_corenameNameOrEntity.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14228_Clean_up_UiSystem_system_sets.md` ---


`UiSystem` system set adjustments.

- The `UiSystem::Outline` system set is now strictly ordered after `UiSystem::Layout`, rather than overlapping it.


--- END FILE `release-content/0.15/migration-guides/14228_Clean_up_UiSystem_system_sets.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14250_Implement_FromIteratorIntoIterator_for_dynamic_types.md` ---


- Change `DynamicArray::from_vec` to `DynamicArray::from_iter`


--- END FILE `release-content/0.15/migration-guides/14250_Implement_FromIteratorIntoIterator_for_dynamic_types.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14257_Pack_multiple_vertex_and_index_arrays_together_into_growab.md` ---


- Vertex and index buffers for meshes may now be packed alongside other buffers, for performance.
- `GpuMesh` has been renamed to `RenderMesh`, to reflect the fact that it no longer directly stores handles to GPU objects.
- Because meshes no longer have their own vertex and index buffers, the responsibility for the buffers has moved from `GpuMesh` (now called `RenderMesh`) to the `MeshAllocator` resource. To access the vertex data for a mesh, use `MeshAllocator::mesh_vertex_slice`. To access the index data for a mesh, use `MeshAllocator::mesh_index_slice`.


--- END FILE `release-content/0.15/migration-guides/14257_Pack_multiple_vertex_and_index_arrays_together_into_growab.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14267_Add_support_for_skybox_transformation.md` ---


- Since we have added a new filed to the Skybox struct, users will need to include `..Default::default()` or some rotation value in their initialization code.


--- END FILE `release-content/0.15/migration-guides/14267_Add_support_for_skybox_transformation.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14273_Move_Msaa_to_component.md` ---


`Msaa` is no longer configured as a global resource, and should be specified on each spawned camera if a non-default setting is desired.


--- END FILE `release-content/0.15/migration-guides/14273_Move_Msaa_to_component.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14284_Add_custom_cursors.md` ---


- `CursorIcon` is no longer a field in `Window`, but a separate component can be inserted to a window entity. It has been changed to an enum that can hold custom images in addition to system icons.
- `Cursor` is renamed to `CursorOptions` and `cursor` field of `Window` is renamed to `cursor_options`
- `CursorIcon` is renamed to `SystemCursorIcon`


--- END FILE `release-content/0.15/migration-guides/14284_Add_custom_cursors.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14285_Remove_second_generic_from_add_before_add_after.md` ---


Removed second generic from `PluginGroupBuilder` methods: `add_before` and `add_after`.

```rust
// Before:
DefaultPlugins
    .build()
    .add_before::<WindowPlugin, _>(FooPlugin)
    .add_after::<WindowPlugin, _>(BarPlugin)

// After:
DefaultPlugins
    .build()
    .add_before::<WindowPlugin>(FooPlugin)
    .add_after::<WindowPlugin>(BarPlugin)
```


--- END FILE `release-content/0.15/migration-guides/14285_Remove_second_generic_from_add_before_add_after.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14290_Add_support_for_environment_map_transformation.md` ---


- Since we have added a new filed to the `EnvironmentMapLight` struct, users will need to include `..default()` or some rotation value in their initialization code.


--- END FILE `release-content/0.15/migration-guides/14290_Add_support_for_environment_map_transformation.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14313_Remove_unused_default_feature_from_bevy_window.md` ---


`bevy_window` had an empty default feature flag that did not do anything, so it was removed. You may have to remove any references to it if you specified it manually.

```toml
# 0.14
[dependencies]
bevy_window = { version = "0.14", default-features = false, features = ["default"] }

# 0.15
[dependencies]
bevy_window = { version = "0.15", default-features = false }
```


--- END FILE `release-content/0.15/migration-guides/14313_Remove_unused_default_feature_from_bevy_window.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14325_Added_new_method_to_Cone_3D_primitive.md` ---


- Addition of `new` method to the 3D primitive Cone struct.


--- END FILE `release-content/0.15/migration-guides/14325_Added_new_method_to_Cone_3D_primitive.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14343_Export_glTF_skins_as_a_Gltf_struct.md` ---


- Change `GltfAssetLabel::Skin(..)` to `GltfAssetLabel::InverseBindMatrices(..)`.


--- END FILE `release-content/0.15/migration-guides/14343_Export_glTF_skins_as_a_Gltf_struct.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14352_Add_FilteredAccessempty_and_simplify_the_implementation_of_.md` ---


- The behaviour of `AnyOf<()>` and `Or<()>` has been changed to match no archetypes rather than all archetypes to naturally match the corresponding logical operation. Consider replacing them with `()` instead.


--- END FILE `release-content/0.15/migration-guides/14352_Add_FilteredAccessempty_and_simplify_the_implementation_of_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14354_Update_trigger_observers_to_operate_over_slices_of_data.md` ---


The `trigger_observers` method now operates on `&[ComponentId]` rather than `impl Iterator<Item=ComponentId`>.

Try replacing `bundle_info.iter_components()` with `bundle_info.components()` or collect the iterator of component ids into a `Vec`.


--- END FILE `release-content/0.15/migration-guides/14354_Update_trigger_observers_to_operate_over_slices_of_data.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14357_Using_Cas_instead_of_CAS_14341.md` ---


`CASNode`, `DenoiseCAS` `CASPipeline`, and `CASUniform` have been renamed to `CasNode` (and so on) to follow standard Rust naming conventions.


--- END FILE `release-content/0.15/migration-guides/14357_Using_Cas_instead_of_CAS_14341.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14382_Disallow_empty_cubic_and_rational_curves.md` ---


The `to_curve` method on Bevy’s cubic splines is now fallible (returning a `Result`), meaning that any existing calls will need to be updated by handling the possibility of an error variant. 

Similarly, any custom implementation of `CubicGenerator` or `RationalGenerator` will need to be amended to include an `Error` type and be made fallible itself. 

Finally, the fields of `CubicCurve` and `RationalCurve` are now private, so any direct constructions of these structs from segments will need to be replaced with the new `CubicCurve::from_segments` and `RationalCurve::from_segments` methods.


--- END FILE `release-content/0.15/migration-guides/14382_Disallow_empty_cubic_and_rational_curves.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14384_Only_propagate_transforms_entities_with_GlobalTransforms.md` ---


- To avoid surprising performance pitfalls, `Transform` / `GlobalTransform` propagation is no longer performed down through hierarchies where intermediate parent are missing a `GlobalTransform`. To restore the previous behavior, add `GlobalTransform::default` to intermediate entities.


--- END FILE `release-content/0.15/migration-guides/14384_Only_propagate_transforms_entities_with_GlobalTransforms.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14387_Deprecate_is_playing_animation.md` ---


The user will just need to replace functions named `is_playing_animation` with `animation_is_playing`.


--- END FILE `release-content/0.15/migration-guides/14387_Deprecate_is_playing_animation.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14394_Changed_Meshattributes_functions_to_return_MeshVertexAttri.md` ---


- When using the iterator returned by `Mesh::attributes` or `Mesh::attributes_mut` the first value of the tuple is not the `MeshVertexAttribute` instead of `MeshVertexAttributeId`. To access the `MeshVertexAttributeId` use the `MeshVertexAttribute.id` field.


--- END FILE `release-content/0.15/migration-guides/14394_Changed_Meshattributes_functions_to_return_MeshVertexAttri.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14441_Simplify_run_conditions.md` ---


Some run conditions have been simplified.

```rust
// Before:
app.add_systems(Update, (
    system_0.run_if(run_once()),
    system_1.run_if(resource_changed_or_removed::<T>()),
    system_2.run_if(resource_removed::<T>()),
    system_3.run_if(on_event::<T>()),
    system_4.run_if(any_component_removed::<T>()),
));

// After:
app.add_systems(Update, (
    system_0.run_if(run_once),
    system_1.run_if(resource_changed_or_removed::<T>),
    system_2.run_if(resource_removed::<T>),
    system_3.run_if(on_event::<T>),
    system_4.run_if(any_component_removed::<T>),
));
```


--- END FILE `release-content/0.15/migration-guides/14441_Simplify_run_conditions.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14448_Making_bevy_render_an_optional_dependency_for_bevy_gizmos.md` ---


No user-visible changes needed from the users.


--- END FILE `release-content/0.15/migration-guides/14448_Making_bevy_render_an_optional_dependency_for_bevy_gizmos.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14459_Require_mut_self_for_Worldincrement_change_tick.md` ---


The method `World::increment_change_tick` now requires `&mut self` instead of `&self`. If you need to call this method but do not have mutable access to the world, consider using `world.as_unsafe_world_cell_readonly().increment_change_tick()`, which does the same thing, but is less efficient than the method on `World` due to requiring atomic synchronization.

```rust
fn my_system(world: &World) {
    // Before
    world.increment_change_tick();

    // After
    world.as_unsafe_world_cell_readonly().increment_change_tick();
}
```


--- END FILE `release-content/0.15/migration-guides/14459_Require_mut_self_for_Worldincrement_change_tick.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14485_Refactor_Bounded2dBounded3d_to_use_isometries.md` ---


The `Bounded2d` and `Bounded3d` traits now take `Isometry2d` and `Isometry3d` parameters (respectively) instead of separate translation and rotation arguments. Existing calls to `aabb_2d`, `bounding_circle`, `aabb_3d`, and `bounding_sphere` will have to be changed to use isometries instead. A straightforward conversion is to refactor just by calling `Isometry2d/3d::new`, as follows:

```rust
// Old:
let aabb = my_shape.aabb_2d(my_translation, my_rotation);

// New:
let aabb = my_shape.aabb_2d(Isometry2d::new(my_translation, my_rotation));
```

However, if the old translation and rotation are 3d translation/rotations originating from a `Transform` or `GlobalTransform`, then `to_isometry` may be used instead. For example:

```rust
// Old:
let bounding_sphere = my_shape.bounding_sphere(shape_transform.translation, shape_transform.rotation);

// New:
let bounding_sphere = my_shape.bounding_sphere(shape_transform.to_isometry());
```

This discussion also applies to the `from_point_cloud` construction method of `Aabb2d`/`BoundingCircle`/`Aabb3d`/`BoundingSphere`, which has similarly been altered to use isometries.


--- END FILE `release-content/0.15/migration-guides/14485_Refactor_Bounded2dBounded3d_to_use_isometries.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14534_Remove_deprecated_bevy_dynamic_plugin.md` ---


Dynamic plugins were deprecated in 0.14 for being unsound, and they have now been fully removed. Please consider using the alternatives listed in the `bevy_dynamic_plugin` crate documentation, or worst-case scenario you may copy the code from 0.14.


--- END FILE `release-content/0.15/migration-guides/14534_Remove_deprecated_bevy_dynamic_plugin.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14546_Make_AnimationPlayerstart_and_play_work_accordingly_to_doc.md` ---


`AnimationPlayer::start` now correspondingly to its docs restarts a running animation.
`AnimationPlayer::play` doesn’t reset the weight anymore.


--- END FILE `release-content/0.15/migration-guides/14546_Make_AnimationPlayerstart_and_play_work_accordingly_to_doc.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14579_Fix_soudness_issue_with_Conflicts_involving_read_all_and_w.md` ---


The `get_conflicts` method of `Access` now returns an `AccessConflict` enum instead of simply a `Vec` of `ComponentId`s that are causing the access conflict. This can be useful in cases where there are no particular `ComponentId`s conflicting, but instead **all** of them are; for example `fn system(q1: Query<EntityMut>, q2: Query<EntityRef>)`


--- END FILE `release-content/0.15/migration-guides/14579_Fix_soudness_issue_with_Conflicts_involving_read_all_and_w.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14609_Explicitly_order_CameraUpdateSystem_before_UiSystemPrepare.md` ---


`CameraUpdateSystem` is now explicitly ordered before `UiSystem::Prepare` instead of being ambiguous with it.


--- END FILE `release-content/0.15/migration-guides/14609_Explicitly_order_CameraUpdateSystem_before_UiSystemPrepare.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14631_Make_QueryStatetransmuteco_validate_the_world_of_the_Compo.md` ---


- `QueryState::transmute`, `QueryState::transmute_filtered`, `QueryState::join` and `QueryState::join_filtered` now take a `impl Into<UnsafeWorldCell>` instead of a `&Components`


--- END FILE `release-content/0.15/migration-guides/14631_Make_QueryStatetransmuteco_validate_the_world_of_the_Compo.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14650_Improve_the_gizmo_for_Plane3d_reusing_grid.md` ---


The optional builder methods on 

```rust

gizmos.primitive_3d(&Plane3d { }, ...);

```

changed from

- `segment_length`
- `segment_count`
- `axis_count`

to 

- `cell_count`
- `spacing`


--- END FILE `release-content/0.15/migration-guides/14650_Improve_the_gizmo_for_Plane3d_reusing_grid.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14656_Switch_rotation__translation_in_grid_gizmos.md` ---


- Users might have to double check their already existing calls to all the `grid` methods. It should be more intuitive now though.


--- END FILE `release-content/0.15/migration-guides/14656_Switch_rotation__translation_in_grid_gizmos.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14663_Adds_ShaderStorageBuffer_asset.md` ---


The `AsBindGroup` `storage` attribute has been modified to reference the new `Handle<Storage>` asset instead. Usages of Vec` should be converted into assets instead.


--- END FILE `release-content/0.15/migration-guides/14663_Adds_ShaderStorageBuffer_asset.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14676_Use_Isometry_in_bevy_gizmos_wherever_we_can.md` ---


The gizmos methods function signature changes as follows:

- 2D
  - if it took `position` & `rotation_angle` before -> `Isometry2d::new(position, Rot2::radians(rotation_angle))`
  - if it just took `position` before -> `Isometry2d::from_translation(position)`

- 3D
  - if it took `position` & `rotation` before -> `Isometry3d::new(position, rotation)`
  - if it just took `position` before -> `Isometry3d::from_translation(position)`


--- END FILE `release-content/0.15/migration-guides/14676_Use_Isometry_in_bevy_gizmos_wherever_we_can.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14690_Add_query_reborrowing.md` ---


- `WorldQuery` now has an additional `shrink_fetch` method you have to implement if you were implementing `WorldQuery` manually.


--- END FILE `release-content/0.15/migration-guides/14690_Add_query_reborrowing.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14720_Consistency_between_Wireframe2d_and_Wireframe.md` ---


- `Wireframe2dConfig`.`default_color` type is now `Color` instead of `Srgba`. Use `.into()` to convert between them.
- `Wireframe2dColor`.`color` type is now `Color` instead of `Srgba`. Use `.into()` to convert between them.


--- END FILE `release-content/0.15/migration-guides/14720_Consistency_between_Wireframe2d_and_Wireframe.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14731_Fix_arc_2d_Gizmos.md` ---


- users have to adjust their usages of `arc_2d`:
  - before: 

```rust
arc_2d(
  pos,
  angle,
  arc_angle,
  radius,
  color
)
```

  - after: 

```rust
arc_2d(
  // this `+ arc_angle * 0.5` quirk is only if you want to preserve the previous behavior 
  // with the new API.
  // feel free to try to fix this though since your current calls to this function most likely
  // involve some computations to counter-act that quirk in the first place
  Isometry2d::new(pos, Rot2::radians(angle + arc_angle * 0.5),
  arc_angle,
  radius,
  color
)
```


--- END FILE `release-content/0.15/migration-guides/14731_Fix_arc_2d_Gizmos.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14764_Add_RenderSetFinalCleanup_for_Worldclear_entities.md` ---


`World::clear_entities` is now part of `RenderSet::PostCleanup` rather than `RenderSet::Cleanup`. Your cleanup systems should likely stay in `RenderSet::Cleanup`.


--- END FILE `release-content/0.15/migration-guides/14764_Add_RenderSetFinalCleanup_for_Worldclear_entities.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14790_Make_QueryFilter_an_unsafe_trait.md` ---


`QueryFilter` is now an `unsafe trait`.  If you were manually implementing it, you will need to verify that the `WorldQuery` implementation is read-only and then add the `unsafe` keyword to the `impl`.


--- END FILE `release-content/0.15/migration-guides/14790_Make_QueryFilter_an_unsafe_trait.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14793_Remove_useless_Direction_field.md` ---


`Style` no longer has a `direction` field, and `Direction` has been deleted. They didn’t do anything, so you can delete any references to them as well.


--- END FILE `release-content/0.15/migration-guides/14793_Remove_useless_Direction_field.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14833_Rewrite_screenshots.md` ---


`ScreenshotManager` has been removed. To take a screenshot, spawn a `Screenshot` entity with the specified render target and provide an observer targeting the `ScreenshotCaptured` event. See the `window/screenshot` example to see an example.


--- END FILE `release-content/0.15/migration-guides/14833_Rewrite_screenshots.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14838_bevy_reflect_Add_Type_type.md` ---


Certain type info structs now only return their item types as `Type` instead of exposing direct methods on them.

The following methods have been removed:

- `ArrayInfo::item_type_path_table`
- `ArrayInfo::item_type_id`
- `ArrayInfo::item_is`
- `ListInfo::item_type_path_table`
- `ListInfo::item_type_id`
- `ListInfo::item_is`
- `SetInfo::value_type_path_table`
- `SetInfo::value_type_id`
- `SetInfo::value_is`
- `MapInfo::key_type_path_table`
- `MapInfo::key_type_id`
- `MapInfo::key_is`
- `MapInfo::value_type_path_table`
- `MapInfo::value_type_id`
- `MapInfo::value_is`

Instead, access the `Type` directly using one of the new methods:

- `ArrayInfo::item_ty`
- `ListInfo::item_ty`
- `SetInfo::value_ty`
- `MapInfo::key_ty`
- `MapInfo::value_ty`

For example:

```rust
// BEFORE
let type_id = array_info.item_type_id();

// AFTER
let type_id = array_info.item_ty().id();
```


--- END FILE `release-content/0.15/migration-guides/14838_bevy_reflect_Add_Type_type.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14842_Replace_the_wgpu_trace_feature_with_a_field_in_bevy_render.md` ---


The `bevy/wgpu_trace` and `bevy_render/wgpu_trace` features have been removed, as WGPU tracing is now enabled during the creation of `bevy_render::RenderPlugin`.

Note: At the time of writing, WGPU has not reimplemented tracing support, so WGPU tracing will not currently work. However, once WGPU has reimplemented tracing support, the steps below should be sufficient to continue generating WGPU traces.

You can track the progress of WGPU tracing being reimplemented at [gfx-rs/wgpu#5974](https://github.com/gfx-rs/wgpu/issues/5974).

To continue generating WGPU traces:

1. Remove any instance of the `bevy/wgpu_trace` or `bevy_render/wgpu_trace` features you may have in any of your `Cargo.toml` files.
2. Follow the instructions in [`docs/debugging.md`, under the WGPU Tracing section](https://github.com/bevyengine/bevy/blob/release-0.15.0/docs/debugging.md#wgpu-tracing).


--- END FILE `release-content/0.15/migration-guides/14842_Replace_the_wgpu_trace_feature_with_a_field_in_bevy_render.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14862_Picking_event_ordering.md` ---


For users switching from `bevy_mod_picking` to `bevy_picking`:

- Instead of adding an `On<T>` component, use `.observe(|trigger: Trigger<T>|)`. You may now apply multiple handlers to the same entity using this command.
- Note that you need to add the non-default `MeshPickingPlugin` if you're using picking on meshes.
- Pointer interaction events now have semi-deterministic ordering which (more or less) aligns with the order of the raw input stream. Consult the docs on `bevy_picking::event::pointer_events` for current information. You may need to adjust your event handling logic accordingly.
- `PointerCancel` has been replaced with `Pointer<Canceled>`, which now has the semantics of an OS touch pointer cancel event.
- `InputMove` and `InputPress` have been merged into `PointerInput`. The use remains exactly the same.
- Picking interaction events are now only accessible through observers, and no `EventReader`. This functionality may be re-implemented later.

For users of `bevy_winit`:

- The event `bevy_winit::WinitEvent` has moved to `bevy_window::WindowEvent`. If this was the only thing you depended on `bevy_winit` for, you should switch your dependency to `bevy_window`.
- `bevy_window` now depends on `bevy_input`. The dependencies of `bevy_input` are a subset of the existing dependencies for `bevy_window` so this should be non-breaking.


--- END FILE `release-content/0.15/migration-guides/14862_Picking_event_ordering.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14881_Allow_ordering_variable_timesteps_around_fixed_timesteps.md` ---


[run_fixed_main_schedule](https://docs.rs/bevy/latest/bevy/time/fn.run_fixed_main_schedule.html) is no longer public. If you used to order against it, use the new dedicated `RunFixedMainLoopSystem` system set instead. You can replace your usage of `run_fixed_main_schedule` one for one by `RunFixedMainLoopSystem::FixedMainLoop`, but it is now more idiomatic to place your systems in either `RunFixedMainLoopSystem::BeforeFixedMainLoop` or `RunFixedMainLoopSystem::AfterFixedMainLoop`

Old:

```rust
app.add_systems(
    RunFixedMainLoop,
    some_system.before(run_fixed_main_schedule)
);
```

New:

```rust
app.add_systems(
    RunFixedMainLoop,
    some_system.in_set(RunFixedMainLoopSystem::BeforeFixedMainLoop)
);
```


--- END FILE `release-content/0.15/migration-guides/14881_Allow_ordering_variable_timesteps_around_fixed_timesteps.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14886_Update_Grid_Gizmo_to_use_Color.md` ---


This shouldn’t be adding anything that isn’t already in a migration guide? I assume as it uses `impl Into<...>` in the public interfaces that any users of these APIs shouldn’t have to make any code changes.


--- END FILE `release-content/0.15/migration-guides/14886_Update_Grid_Gizmo_to_use_Color.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14887_Fix_Gizmos_warnings_and_doc_errors_when_a_subset_of_features.md` ---


There shouldn’t be any reason to migrate, although if for some reason you use `GizmoMeshConfig` and `bevy_render`  but not `bevy_pbr` or `bevy_sprite` (such that it does nothing), then you will get an error that it no longer exists.


--- END FILE `release-content/0.15/migration-guides/14887_Fix_Gizmos_warnings_and_doc_errors_when_a_subset_of_features.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14909_Refactor_AsBindGroup_to_use_a_associated_SystemParam.md` ---


`AsBindGroup` now allows the user to specify a `SystemParam` to be used for creating bind groups.


--- END FILE `release-content/0.15/migration-guides/14909_Refactor_AsBindGroup_to_use_a_associated_SystemParam.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14910_Rename_Commandsregister_one_shot_system__register_system.md` ---


`Commands::register_one_shot_system` has been renamed to `register_system`.


--- END FILE `release-content/0.15/migration-guides/14910_Rename_Commandsregister_one_shot_system__register_system.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14916_Make_TrackedRenderPassset_vertex_buffer_aware_of_slice_size.md` ---


- `TrackedRenderPass::set_vertex_buffer` function has been modified to update vertex buffers when the same buffer with the same offset is provided, but its size has changed. Some existing code may rely on the previous behavior, which did not update the vertex buffer in this scenario.


--- END FILE `release-content/0.15/migration-guides/14916_Make_TrackedRenderPassset_vertex_buffer_aware_of_slice_size.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14926_rename_Drop_to_bevypickingeventsDragDrop_to_unclash_stdops.md` ---


- Rename `Drop` to `DragDrop`
  - `bevy::picking::events::Drop`  is now `bevy::picking::events::DragDrop`


--- END FILE `release-content/0.15/migration-guides/14926_rename_Drop_to_bevypickingeventsDragDrop_to_unclash_stdops.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14964_Migrate_bevy_transform_to_required_components.md` ---


Replace all insertions of `GlobalTransform` and/or `TransformBundle` with `Transform` alone.


--- END FILE `release-content/0.15/migration-guides/14964_Migrate_bevy_transform_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14977_Replace_bevy_utilsCowArc_with_atomicow.md` ---


`bevy_utils::CowArc` has moved to a new crate called [atomicow](https://crates.io/crates/atomicow).


--- END FILE `release-content/0.15/migration-guides/14977_Replace_bevy_utilsCowArc_with_atomicow.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/14989_Return_Results_from_Cameras_worldviewport_conversion_metho.md` ---


The following methods on `Camera` now return a `Result` instead of an `Option` so that they can provide more information about failures:

- `world_to_viewport`
- `world_to_viewport_with_depth`
- `viewport_to_world`
- `viewport_to_world_2d`

Call `.ok()` on the `Result` to turn it back into an `Option`, or handle the `Result` directly.


--- END FILE `release-content/0.15/migration-guides/14989_Return_Results_from_Cameras_worldviewport_conversion_metho.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15013_Implement_animation_masks_allowing_fine_control_of_the_tar.md` ---


- The serialized format of animation graphs has changed with the addition of animation masks. To upgrade animation graph RON files, add `mask` and `mask_groups` fields as appropriate. (They can be safely set to zero.)


--- END FILE `release-content/0.15/migration-guides/15013_Implement_animation_masks_allowing_fine_control_of_the_tar.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15035_Rename_rendering_components_for_improved_consistency_and_c.md` ---


Many rendering components have been renamed for improved consistency and clarity.

- `AutoExposureSettings` → `AutoExposure`
- `BloomSettings` → `Bloom`
- `BloomPrefilterSettings` → `BloomPrefilter`
- `ContrastAdaptiveSharpeningSettings` → `ContrastAdaptiveSharpening`
- `DepthOfFieldSettings` → `DepthOfField`
- `FogSettings` → `DistanceFog`
- `SmaaSettings` → `Smaa`
- `TemporalAntiAliasSettings` → `TemporalAntiAliasing`
- `ScreenSpaceAmbientOcclusionSettings` → `ScreenSpaceAmbientOcclusion`
- `ScreenSpaceReflectionsSettings` → `ScreenSpaceReflections`
- `VolumetricFogSettings` → `VolumetricFog`


--- END FILE `release-content/0.15/migration-guides/15035_Rename_rendering_components_for_improved_consistency_and_c.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15039_Remove_remnant_EntityHash_and_related_types_from_bevy_util.md` ---


- Uses of `bevy::utils::{EntityHash, EntityHasher, EntityHashMap, EntityHashSet}` now have to be imported from `bevy::ecs::entity`.


--- END FILE `release-content/0.15/migration-guides/15039_Remove_remnant_EntityHash_and_related_types_from_bevy_util.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15073_Split_OrthographicProjectiondefault_into_2d__3d_Adopted.md` ---


- In initialization of `OrthographicProjection`, change `..default()` to `..OrthographicProjection::default_2d()` or `..OrthographicProjection::default_3d()`

Example:

```diff
--- a/examples/3d/orthographic.rs
+++ b/examples/3d/orthographic.rs
@@ -20,7 +20,7 @@ fn setup(
         projection: OrthographicProjection {
             scale: 3.0,
             scaling_mode: ScalingMode::FixedVertical(2.0),
-            ..default()
+            ..OrthographicProjection::default_3d()
         }
         .into(),
         transform: Transform::from_xyz(5.0, 5.0, 5.0).looking_at(Vec3::ZERO, Vec3::Y),
```


--- END FILE `release-content/0.15/migration-guides/15073_Split_OrthographicProjectiondefault_into_2d__3d_Adopted.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15075_Remove_OrthographicProjectionscale_adopted.md` ---


Replace all uses of `scale` with `scaling_mode`, keeping in mind that `scale` is (was) a multiplier. For example, replace

```rust
    scale: 2.0,
    scaling_mode: ScalingMode::FixedHorizontal(4.0),

```

with

```rust
    scaling_mode: ScalingMode::FixedHorizontal(8.0),
```


--- END FILE `release-content/0.15/migration-guides/15075_Remove_OrthographicProjectionscale_adopted.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15089__EntityRefMut_get_components_immutable_variants_only.md` ---


- Renamed `FilteredEntityRef::components` to `FilteredEntityRef::accessed_components` and `FilteredEntityMut::components` to `FilteredEntityMut::accessed_components`.


--- END FILE `release-content/0.15/migration-guides/15089__EntityRefMut_get_components_immutable_variants_only.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15090_Deprecate_LoadAndSave_Asset_Processor.md` ---


- Replace `LoadAndSave<L, S>` with `LoadTransformAndSave<L, IdentityAssetTransformer<<L as AssetLoader>::Asset>, S>`
- Replace `LoadAndSaveSettings<L, S>` with `LoadTransformAndSaveSettings<L, (), S>`


--- END FILE `release-content/0.15/migration-guides/15090_Deprecate_LoadAndSave_Asset_Processor.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15107_bevy_reflect_Refactor_serde_module.md` ---


The fields on `ReflectSerializer` and `TypedReflectSerializer` are now private. To instantiate, the corresponding constructor must be used:

```rust
// BEFORE
let serializer = ReflectSerializer {
    value: &my_value,
    registry: &type_registry,
};

// AFTER
let serializer = ReflectSerializer::new(&my_value, &type_registry);
```

Additionally, the following types are no longer public:

- `ArraySerializer`
- `EnumSerializer`
- `ListSerializer`
- `MapSerializer`
- `ReflectValueSerializer` (fully removed)
- `StructSerializer`
- `TupleSerializer`
- `TupleStructSerializer`

As well as the following traits:

- `DeserializeValue` (fully removed)


--- END FILE `release-content/0.15/migration-guides/15107_bevy_reflect_Refactor_serde_module.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15108_bevy_reflect_Add_DynamicTyped_trait.md` ---


`Reflect` now has a supertrait of `DynamicTyped`. If you were manually implementing `Reflect` and did not implement `Typed`, you will now need to do so.


--- END FILE `release-content/0.15/migration-guides/15108_bevy_reflect_Add_DynamicTyped_trait.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15126_Remove_ReceivedCharacter.md` ---


`ReceivedCharacter` was deprecated in 0.14 due to `winit` reworking their keyboard system. It has now been fully removed. Switch to using `KeyboardInput` instead.

```rust
// 0.14
fn listen_characters(events: EventReader<ReceivedCharacter>) {
    for event in events.read() {
        info!("{}", event.char);
    }
}

// 0.15
fn listen_characters(events: EventReader<KeyboardInput>) {
    for event in events.read() {
        // Only check for characters when the key is pressed.
        if !event.state.is_pressed() {
            continue;
        }

        // Note that some keys such as `Space` and `Tab` won't be detected as a character.
        // Instead, check for them as separate enum variants.
        match &event.logical_key {
            Key::Character(character) => {
                info!("{} pressed.", character);
            },
            Key::Space => {
                info!("Space pressed.");
            },
            _ => {},
        }
    }
}
```


--- END FILE `release-content/0.15/migration-guides/15126_Remove_ReceivedCharacter.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15151_Removed_Type_Parameters_from_Observer.md` ---


If you filtered for observers using `Observer<A, B>`, instead filter for an `Observer`.


--- END FILE `release-content/0.15/migration-guides/15151_Removed_Type_Parameters_from_Observer.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15163_use_precomputed_border_values.md` ---


The `logical_rect` and `physical_rect` methods have been removed from `Node`. Use `Rect::from_center_size` with the translation and node size instead.

The types of the fields border and border_radius of `ExtractedUiNode` have been changed to `BorderRect` and `ResolvedBorderRadius` respectively.


--- END FILE `release-content/0.15/migration-guides/15163_use_precomputed_border_values.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15174_Use_FromReflect_when_extracting_entities_in_dynamic_scenes.md` ---


The `DynamicScene` format is changed to use custom serialize impls so old scene files will need updating:

Old: 

```ron
(
  resources: {},
  entities: {
    4294967299: (
      components: {
        "bevy_render::camera::projection::OrthographicProjection": (
          near: 0.0,
          far: 1000.0,
          viewport_origin: (
            x: 0.5,
            y: 0.5,
          ),
          scaling_mode: WindowSize(1.0),
          scale: 1.0,
          area: (
            min: (
              x: -1.0,
              y: -1.0,
            ),
            max: (
              x: 1.0,
              y: 1.0,
            ),
          ),
        ),
      },
    ),
  },
)
```

New:

```ron
(
  resources: {},
  entities: {
    4294967299: (
      components: {
        "bevy_render::camera::projection::OrthographicProjection": (
          near: 0.0,
          far: 1000.0,
          viewport_origin: (0.5, 0.5),
          scaling_mode: WindowSize(1.0),
          scale: 1.0,
          area: (
            min: (-1.0, -1.0),
            max: (1.0, 1.0),
          ),
        ),
      },
    ),
  },
)
```


--- END FILE `release-content/0.15/migration-guides/15174_Use_FromReflect_when_extracting_entities_in_dynamic_scenes.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15184_Support_systems_that_take_references_as_input.md` ---


- All current explicit usages of the following types must be changed in the way specified:
  - `SystemId<I, O>` to `SystemId<In<I>, O>`
  - `System<In = T>` to `System<In = In<T>>`
  - `IntoSystem<I, O, M>` to `IntoSystem<In<I>, O, M>`
  - `Condition<M, T>` to `Condition<M, In<T>>`

- `In<Trigger<E, B>>` is no longer a valid input parameter type. Use `Trigger<E, B>` directly, instead.


--- END FILE `release-content/0.15/migration-guides/15184_Support_systems_that_take_references_as_input.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15196_Rename_push_children_to_add_children.md` ---


Some commands and methods for adding children to an entity were renamed for consistency.

|0.14|0.15|
|-|-|
|`EntityCommands::push_children`|`add_children`|
|`PushChild`|`AddChild`|
|`PushChildren`|`AddChildren`|


--- END FILE `release-content/0.15/migration-guides/15196_Rename_push_children_to_add_children.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15210_explicitly_mention_component_in_methods_on_DynamicSceneBuilder.md` ---


`DynamicSceneBuilder::allow_all` and `deny_all` now set resource accesses, not just components. To return to the previous behavior, use the new `allow_all_components` or `deny_all_components` methods.

The following methods for `DynamicSceneBuilder` have been renamed:

- `with_filter` -> `with_component_filter`
- `allow` -> `allow_component`
- `deny` -> `deny_component`


--- END FILE `release-content/0.15/migration-guides/15210_explicitly_mention_component_in_methods_on_DynamicSceneBuilder.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15234_Rename_Add_to_Queue_for_methods_with_deferred_semantics.md` ---


- `Commands::add` and `Commands::push` have been replaced with `Commands::queue`.
- `ChildBuilder::add_command` has been renamed to `ChildBuilder::queue_command`.


--- END FILE `release-content/0.15/migration-guides/15234_Rename_Add_to_Queue_for_methods_with_deferred_semantics.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15237_AssetServer_LoadState_API_consistency.md` ---


`RecursiveDependencyLoadState::Failed` now stores error information about the first encountered error, rather than being a unit struct.

--- END FILE `release-content/0.15/migration-guides/15237_AssetServer_LoadState_API_consistency.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15239_Fix_floating_point_math.md` ---


- Not a breaking change
- Projects should use bevy math where applicable


--- END FILE `release-content/0.15/migration-guides/15239_Fix_floating_point_math.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15240_bevy_reflect_Replace_value_terminology_with_opaque.md` ---


The reflection concept of “value type” has been replaced with a clearer “opaque type”. The following renames have been made to account for this:

- `ReflectKind::Value` → `ReflectKind::Opaque`
- `ReflectRef::Value` → `ReflectRef::Opaque`
- `ReflectMut::Value` → `ReflectMut::Opaque`
- `ReflectOwned::Value` → `ReflectOwned::Opaque`
- `TypeInfo::Value` → `TypeInfo::Opaque`
- `ValueInfo` → `OpaqueInfo`
- `impl_reflect_value!` → `impl_reflect_opaque!`
- `impl_from_reflect_value!` → `impl_from_reflect_opaque!`

Additionally, declaring your own opaque types no longer uses `#[reflect_value]`. This attribute has been replaced by `#[reflect(opaque)]`:

```rust
// BEFORE
#[derive(Reflect)]
#[reflect_value(Default)]
struct MyOpaqueType(u32);

// AFTER
#[derive(Reflect)]
#[reflect(opaque)]
#[reflect(Default)]
struct MyOpaqueType(u32);
```

Note that the order in which `#[reflect(opaque)]` appears does not matter.


--- END FILE `release-content/0.15/migration-guides/15240_bevy_reflect_Replace_value_terminology_with_opaque.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15263_change_return_type_of_Worldresource_ref_to_Ref.md` ---


Previously `World::get_resource_ref::<T>` and `World::resource_ref::<T>` would return a `Res<T>` which was inconsistent with the rest of the `World` API (notably `resource_scope`). This has been fixed and the methods now return `Ref<T>`. 

This means it is no longer possible to get `Res<T>` from `World`. If you were relying on this, you should try using `Ref<T>` instead since it has the same functionality.

__Before__

```rust
let my_resource: Res<MyResource> = world.resource_ref();
function_taking_resource(my_resource);

fn function_taking_resource(resource: Res<MyResource>) { /* ... */ }
```

__After__

```rust
let my_resource: Ref<MyResource> = world.resource_ref();
function_taking_resource(my_resource);

fn function_taking_resource(resource: Ref<MyResource>) { /* ... */ }
```


--- END FILE `release-content/0.15/migration-guides/15263_change_return_type_of_Worldresource_ref_to_Ref.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15279_Allow_bevy_utils_in_no_std_Contexts.md` ---


If you were importing `bevy_utils` and setting `default_features` to `false`, but relying on elements which are now gated behind the `std` or `alloc` features, include the relevant feature in your `Cargo.toml`.


--- END FILE `release-content/0.15/migration-guides/15279_Allow_bevy_utils_in_no_std_Contexts.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15282_Allow_animation_clips_to_animate_arbitrary_properties.md` ---


- Animation keyframes are now an extensible trait, not an enum. Replace `Keyframes::Translation(...)`, `Keyframes::Scale(...)`, `Keyframes::Rotation(...)`, and `Keyframes::Weights(...)` with `Box::new(TranslationKeyframes(...))`, `Box::new(ScaleKeyframes(...))`, `Box::new(RotationKeyframes(...))`, and `Box::new(MorphWeightsKeyframes(...))` respectively.


--- END FILE `release-content/0.15/migration-guides/15282_Allow_animation_clips_to_animate_arbitrary_properties.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15294_Remove_allocation_in_get_short_name.md` ---


__For `format!`, `dbg!`, `panic!`, etc.__

```rust
// Before
panic!("{} is too short!", get_short_name(name));

// After
panic!("{} is too short!", ShortName(name));
```

__Need a `String` Value__

```rust
// Before
let short: String = get_short_name(name);

// After
let short: String = ShortName(name).to_string();
```


--- END FILE `release-content/0.15/migration-guides/15294_Remove_allocation_in_get_short_name.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15320_Retained_Rendering.md` ---


<!-- Retained Rendering -->
<!-- https://github.com/bevyengine/bevy/pull/14449 Original PR -->
<!-- https://github.com/bevyengine/bevy/pull/15320 Adopted PR -->
<!-- https://github.com/bevyengine/bevy/pull/15582 Synchronized Removed Components -->
<!-- https://github.com/bevyengine/bevy/pull/15756 Type Safe Retained Render World -->

With the advent of the retained render world, entities are no longer despawned at the end of every frame in the render world.
Extracted entities with the `TemporaryRenderEntity` component will be despawned at the end of every frame like before.

In order to make this possible, the `Entity` identifiers in the main and the extracted version in render world are no longer guaranteed to line up. As a result:

- all tools to spawn entities with a precise `Entity` id are in the process of being deprecated and will be removed
- collections that contain references to `Entity` that are extracted into the render world have been changed to contain `MainEntity` in order to prevent errors where a render world entity id is used to look up an item by accident. Custom rendering code may need to be changed to query for `&MainEntity` in order to look up the correct item from such a collection
  - users who implement their own extraction logic for collections of main world entity should strongly consider extracting into a different collection that uses `MainEntity` as a key.
- render phases now require specifying both the `Entity` and `MainEntity` for a given `PhaseItem`. Custom render phases should ensure `MainEntity` is available when queuing a phase item

Renderers can now check `RenderVisibleEntities` to avoid rendering items that are not visible from a view. `RenderVisibleMeshEntities`, `RenderCubemapVisibleEntities`, and `RenderCascadeVisibleEntities` are also available for more fine-grained control.

To guide you further, let's take a look at a few common patterns.
For every example, we specify in which world the code is run.

#### Spawning entities in the render world

Previously, if you spawned an entity with `world.spawn(...)`, `commands.spawn(...)` or some other method in the rendering world, it would be despawned at the end of each frame. In 0.15, this is no longer the case and so your old code could leak entities. This can be mitigated by either re-architecting your code to no longer continuously spawn entities (like you're used to in the main world), or by adding the `bevy_render::world_sync::TemporaryRenderEntity` component to the entity you're spawning. Entities tagged with `TemporaryRenderEntity` will be removed at the end of each frame (like before).

#### Extract components with `ExtractComponentPlugin`

```rust
// main world
app.add_plugins(ExtractComponentPlugin::<ComponentToExtract>::default());
```

`ExtractComponentPlugin` has been changed to automatically sync entities with `ComponentToExtract`. This is done via the new `WorldSyncPlugin`. Any code using `ExtractComponentPlugin` will not require any changes.

#### Manual extraction using `Extract<Query<(Entity, ...)>>`

```rust
// in render world, inspired by bevy_pbr/src/cluster/mod.rs
pub fn extract_clusters(
    mut commands: Commands,
    views: Extract<Query<(Entity, &Clusters, &Camera)>>,
) {
    for (entity, clusters, camera) in &views {
        // some code
        commands.get_or_spawn(entity).insert(...);
    }
}
```

An extract query in the render world queries for entities and components in the main world. Here `entity` is a main world entity and `get_or_spawn(main_world_entity).insert(...)` potentially inserts components on the wrong entity. Remember, there is no longer a one-to-one correspondence between the main and render world entities. Moreover `get_or_spawn` has been deprecated.

In 0.15, you should use `RenderEntity` in place of `Entity` to get the correct entity in the render world. For entities to have a `RenderEntity` they need to be synced first. This can be done either via `WorldSyncPlugin` or adding the `SyncToRenderWorld` to the main world entity.

This results in the following code:

```rust
// in render world, inspired by bevy_pbr/src/cluster/mod.rs
pub fn extract_clusters(
    mut commands: Commands,
    views: Extract<Query<(RenderEntity, &Clusters, &Camera)>>,
) {
    for (render_entity, clusters, camera) in &views {
        // some code
        // After the sync step, all main world entities with a &RenderEntity have a corresponding (empty) render world entity. This should never panic.
        commands.entity(render_entity).insert(...);
    }
}

// in main world, when spawning
world.spawn((Clusters::default(), Camera::default(), SyncToRenderWorld))
```

#### Looking up main world entities in the render world

In order to get the main world entity from a render world entity. It works much the same. Every synced render world entity has a `MainEntity` component you can query for that returns the correct main world entity.

```rust
// in the render world
pub fn inspect_clusters(
    views: Query<(MainEntity, &Clusters, &Camera)>
) {
    for (main_entity, clusters, camera in &views) {
        // do something
    }
}
```

#### General advice for working with main and render world entities

When working with entities from both worlds it can be confusing. If you are every in a scenario where this isn't entirely clear (for example, when working on custom extraction code in the render world), we advise that you use `RenderEntity` and `MainEntity` as simple wrappers around `Entity`. Mixing these up can become a real headache and lead to some non-obvious errors.

```rust
// render world 0.14
pub instances: Vec<(Entity, RenderLayers, bool)>,

// render world 0.15
pub instances: Vec<(MainEntity, RenderLayers, bool)>,
```

There are also other ways to disambiguate between the two worlds.

```rust
// render world 0.14
pub(crate) render_lightmaps: EntityHashMap<RenderLightmap>,

// render world 0.15
pub(crate) render_lightmaps: MainEntityHashMap<RenderLightmap>,
```


--- END FILE `release-content/0.15/migration-guides/15320_Retained_Rendering.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15340_move_ShortName_to_bevy_reflect.md` ---


- References to `bevy_utils::ShortName` should instead now be `bevy_reflect::ShortName`.


--- END FILE `release-content/0.15/migration-guides/15340_move_ShortName_to_bevy_reflect.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15341_Add_UI_GhostNode.md` ---


Any code that previously relied on `Parent`/`Children` to iterate UI children may now want to use `bevy_ui::UiChildren` to ensure ghost nodes are skipped, and their first descendant Nodes included.

UI root nodes may now be children of ghost nodes, which means `Without<Parent>` might not query all root nodes. Use  `bevy_ui::UiRootNodes` where needed to iterate root nodes instead.


--- END FILE `release-content/0.15/migration-guides/15341_Add_UI_GhostNode.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15344_Split_TextureAtlasSources_out_of_TextureAtlasLayout_and_ma.md` ---


`TextureAtlasBuilder` no longer stores a mapping back to the original images in `TextureAtlasLayout`; that functionality has been added to a new struct, `TextureAtlasSources`, instead. This also means that the signature for `TextureAtlasBuilder::finish` has changed, meaning that calls of the form:

```rust
let (atlas_layout, image) = builder.build()?;
```

Will now change to the form:

```rust
let (atlas_layout, atlas_sources, image) = builder.build()?;
```

And instead of performing a reverse-lookup from the layout, like so:

```rust
let atlas_layout_handle = texture_atlases.add(atlas_layout.clone());
let index = atlas_layout.get_texture_index(&my_handle);
let handle = TextureAtlas {
    layout: atlas_layout_handle,
    index,
};
```

You can perform the lookup from the sources instead:

```rust
let atlas_layout = texture_atlases.add(atlas_layout);
let index = atlas_sources.get_texture_index(&my_handle);
let handle = TextureAtlas {
    layout: atlas_layout,
    index,
};
```

Additionally, `TextureAtlasSources` also has a convenience method, `handle`, which directly combines the index and an existing `TextureAtlasLayout` handle into a new `TextureAtlas`:

```rust
let atlas_layout = texture_atlases.add(atlas_layout);
let handle = atlas_sources.handle(atlas_layout, &my_handle);
```


--- END FILE `release-content/0.15/migration-guides/15344_Split_TextureAtlasSources_out_of_TextureAtlasLayout_and_ma.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15368_Add_the_ability_to_control_font_smoothing.md` ---


- `Text` now contains a `font_smoothing: FontSmoothing` property, make sure to include it or add `..default()` when using the struct directly;
- `FontSizeKey` has been renamed to `FontAtlasKey`, and now also contains the `FontSmoothing` setting;
- The following methods now take an extra `font_smoothing: FontSmoothing` argument:
  - `FontAtlas::new()`
  - `FontAtlasSet::add_glyph_to_atlas()`
  - `FontAtlasSet::get_glyph_atlas_info()`
  - `FontAtlasSet::get_outlined_glyph_texture()`


--- END FILE `release-content/0.15/migration-guides/15368_Add_the_ability_to_control_font_smoothing.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15372_Use_crate_disqualified.md` ---


Replace references to `bevy_utils::ShortName` with `disqualified::ShortName`.


--- END FILE `release-content/0.15/migration-guides/15372_Use_crate_disqualified.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15385_Bubbling_observers_traversal_should_use_query_data.md` ---


Update implementations of `Traversal`.


--- END FILE `release-content/0.15/migration-guides/15385_Bubbling_observers_traversal_should_use_query_data.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15402_bevy_reflect_Update_EulerRot_to_match_glam_029.md` ---


The reflection implementation for `EulerRot` has been updated to align with `glam` 0.29. Please update any reflection-based usages accordingly.


--- END FILE `release-content/0.15/migration-guides/15402_bevy_reflect_Update_EulerRot_to_match_glam_029.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15406_Make_drain_take_a_mutable_borrow_instead_of_BoxSelf_for_re.md` ---


- `reflect::Map`, `reflect::List`, and `reflect::Set` all now take a `&mut self` instead of a `Box<Self>`. Callers of these traits should add `&mut` before their boxes, and implementers of these traits should update to match.


--- END FILE `release-content/0.15/migration-guides/15406_Make_drain_take_a_mutable_borrow_instead_of_BoxSelf_for_re.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15410_Follow_up_to_cached_run_system.md` ---


- `IntoSystem::pipe` and `IntoSystem::map` now return `IntoPipeSystem` and `IntoAdapterSystem` instead of `PipeSystem` and `AdapterSystem`. Most notably these types don’t implement `System` but rather only `IntoSystem`.


--- END FILE `release-content/0.15/migration-guides/15410_Follow_up_to_cached_run_system.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15422_Change_ReflectMapEntities_to_operate_on_components_before_.md` ---


- Consumers of `ReflectMapEntities` will need to call `map_entities` on values prior to inserting them into the world.
- Implementors of `MapEntities` will need to remove the `mappings` method, which is no longer needed for `ReflectMapEntities` and has been removed from the trait.


--- END FILE `release-content/0.15/migration-guides/15422_Change_ReflectMapEntities_to_operate_on_components_before_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15434_Curvebased_animation.md` ---


Most user code that does not directly deal with `AnimationClip` and `VariableCurve` will not need to be changed. On the other hand, `VariableCurve` has been completely overhauled. If you were previously defining animation curves in code using keyframes, you will need to migrate that code to use curve constructors instead. For example, a rotation animation defined using keyframes and added to an animation clip like this:

```rust
animation_clip.add_curve_to_target(
    animation_target_id,
    VariableCurve {
        keyframe_timestamps: vec![0.0, 1.0, 2.0, 3.0, 4.0],
        keyframes: Keyframes::Rotation(vec![
            Quat::IDENTITY,
            Quat::from_axis_angle(Vec3::Y, PI / 2.),
            Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
            Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
            Quat::IDENTITY,
        ]),
        interpolation: Interpolation::Linear,
    },
);
```

would now be added like this:

```rust
animation_clip.add_curve_to_target(
    animation_target_id,
    AnimatableKeyframeCurve::new([0.0, 1.0, 2.0, 3.0, 4.0].into_iter().zip([
        Quat::IDENTITY,
        Quat::from_axis_angle(Vec3::Y, PI / 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 2.),
        Quat::from_axis_angle(Vec3::Y, PI / 2. * 3.),
        Quat::IDENTITY,
    ]))
    .map(RotationCurve)
    .expect("Failed to build rotation curve"),
);
```

Note that the interface of `AnimationClip::add_curve_to_target` has also changed (as this example shows, if subtly), and now takes its curve input as an `impl AnimationCurve`. If you need to add a `VariableCurve` directly, a new method `add_variable_curve_to_target` accommodates that (and serves as a one-to-one migration in this regard).

__For reviewers__

The diff is pretty big, and the structure of some of the changes might not be super-obvious:

- `keyframes.rs` became `animation_curves.rs`, and `AnimationCurve` is based heavily on `Keyframes`, with the adaptors also largely following suite.
- The Curve API adaptor structs were moved from `bevy_math::curve::mod` into their own module `adaptors`. There are no functional changes to how these adaptors work; this is just to make room for the specialized reflection implementations since `mod.rs` was getting kind of cramped.
- The new module `gltf_curves` holds the additional curve constructions that are needed by the glTF loader. Note that the loader uses a mix of these and off-the-shelf `bevy_math` curve stuff.
- `animatable.rs` no longer holds logic related to keyframe interpolation, which is now delegated to the existing abstractions in `bevy_math::curve::cores`.


--- END FILE `release-content/0.15/migration-guides/15434_Curvebased_animation.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15435_List_components_for_QueryEntityErrorQueryDoesNotMatch.md` ---


- `QueryEntityError` now has a lifetime. Convert it to a custom error if you need to store it.


--- END FILE `release-content/0.15/migration-guides/15435_List_components_for_QueryEntityErrorQueryDoesNotMatch.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15454_Rename_init_component__friends.md` ---


- `World::init_component` has been renamed to `register_component`.
- `World::init_component_with_descriptor` has been renamed to `register_component_with_descriptor`.
- `World::init_bundle` has been renamed to `register_bundle`.
- `Components::init_component` has been renamed to `register_component`.
- `Components::init_component_with_descriptor` has been renamed to `register_component_with_descriptor`.
- `Components::init_resource` has been renamed to `register_resource`.
- `Components::init_non_send` had been renamed to `register_non_send`.


--- END FILE `release-content/0.15/migration-guides/15454_Rename_init_component__friends.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15469_Basic_integration_of_cubic_spline_curves_with_the_Curve_AP.md` ---


The `RationalCurve::domain` method has been renamed to `RationalCurve::length`. Calling `.domain()` on a `RationalCurve` now returns its entire domain as an `Interval`.


--- END FILE `release-content/0.15/migration-guides/15469_Basic_integration_of_cubic_spline_curves_with_the_Curve_AP.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15474_Migrate_visibility_to_required_components.md` ---


Replace all insertions of `VisibilityBundle` with the `Visibility` component. The other components required by it will now be inserted automatically.


--- END FILE `release-content/0.15/migration-guides/15474_Migrate_visibility_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15482_bevy_reflect_Add_ReflectDeserializerProcessor.md` ---


(Since I added `P = ()`, I don’t think this is actually a breaking change anymore, but I’ll leave this in)

`bevy_reflect`’s `ReflectDeserializer` and `TypedReflectDeserializer` now take a `ReflectDeserializerProcessor` as the type parameter `P`, which allows you to customize deserialization for specific types when they are found. However, the rest of the API surface (`new`) remains the same.
<details>
<summary>Original implementation</summary>

Add `ReflectDeserializerProcessor`:

```rs
struct ReflectDeserializerProcessor {
    pub can_deserialize: Box<dyn FnMut(&TypeRegistration) -> bool + 'p>,
    pub deserialize: Box<
        dyn FnMut(
                &TypeRegistration,
                &mut dyn erased_serde::Deserializer,
            ) -> Result<Box<dyn PartialReflect>, erased_serde::Error>
            + 'p,
}
```

Along with `ReflectDeserializer::new_with_processor` and `TypedReflectDeserializer::new_with_processor`. This does not touch the public API of the existing `new` fns.

This is stored as an `Option<&mut ReflectDeserializerProcessor>` on the deserializer and any of the private `-Visitor` structs, and when we attempt to deserialize a value, we first pass it through this processor.

Also added a very comprehensive doc test to `ReflectDeserializerProcessor`, which is actually a scaled down version of the code for the `bevy_animation_graph` loader. This should give users a good motivating example for when and why to use this feature.

__Why `Box<dyn ..>`?__

When I originally implemented this, I added a type parameter to `ReflectDeserializer` to determine the processor used, with `()` being “no processor”. However when using this, I kept running into rustc errors where it failed to validate certain type bounds and led to overflows. I then switched to a dynamic dispatch approach.

The dynamic dispatch should not be that expensive, nor should it be a performance regression, since it’s only used if there is `Some` processor. (Note: I have not benchmarked this, I am just speculating.) Also, it means that we don’t infect the rest of the code with an extra type parameter, which is nicer to maintain.

__Why the `'p` on `ReflectDeserializerProcessor<'p>`?__

Without a lifetime here, the `Box`es would automatically become `Box<dyn FnMut(..) + 'static>`. This makes them practically useless, since any local data you would want to pass in must then be `'static`. In the motivating example, you couldn’t pass in that `&mut LoadContext` to the function.

This means that the `'p` infects the rest of the Visitor types, but this is acceptable IMO. This PR also elides the lifetimes in the `impl<'de> Visitor<'de> for -Visitor` blocks where possible.

__Future possibilities__

I think it’s technically possible to turn the processor into a trait, and make the deserializers generic over that trait. This would also open the door to an API like:

```rs
type Seed;

fn seed_deserialize(&mut self, r: &TypeRegistration) -> Option<Self::Seed>;

fn deserialize(&mut self, r: &TypeRegistration, d: &mut dyn erased_serde::Deserializer, s: Self::Seed) -> ...;
```

A similar processor system should also be added to the serialization side, but that’s for another PR. Ideally, both PRs will be in the same release, since one isn’t very useful without the other.
</details>

--- END FILE `release-content/0.15/migration-guides/15482_bevy_reflect_Add_ReflectDeserializerProcessor.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15484_Remove_ReturnUnit_variant.md` ---


- Removed the `Return::Unit` variant; use `Return::unit()` instead.


--- END FILE `release-content/0.15/migration-guides/15484_Remove_ReturnUnit_variant.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15489_Migrate_bevy_sprite_to_required_components.md` ---


Replace all uses of `SpriteBundle` with `Sprite`. There are several new convenience constructors: `Sprite::from_image`, `Sprite::from_atlas_image`, `Sprite::from_color`. 

WARNING: use of `Handle<Image>` and `TextureAtlas` as components on sprite entities will NO LONGER WORK. Use the fields on `Sprite` instead. I would have removed the `Component` impls from `TextureAtlas` and `Handle<Image>` except it is still used within ui. We should fix this moving forward with the migration.


--- END FILE `release-content/0.15/migration-guides/15489_Migrate_bevy_sprite_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15509_bevy_asset_Improve_NestedLoader_API.md` ---


Code which uses `bevy_asset`’s `LoadContext::loader` / `NestedLoader` will see some naming changes:

- `untyped` is replaced by `with_unknown_type`
- `with_asset_type` is replaced by `with_static_type`
- `with_asset_type_id` is replaced by `with_dynamic_type`
- `direct` is replaced by `immediate` (the opposite of “immediate” is “deferred”)


--- END FILE `release-content/0.15/migration-guides/15509_bevy_asset_Improve_NestedLoader_API.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15524_Migrate_meshes_and_materials_to_required_components.md` ---


Asset handles for meshes and mesh materials must now be wrapped in the `Mesh2d` and `MeshMaterial2d` or `Mesh3d` and `MeshMaterial3d` components for 2D and 3D respectively. Raw handles as components no longer render meshes.

Additionally, `MaterialMesh2dBundle`, `MaterialMeshBundle`, and `PbrBundle` have been deprecated. Instead, use the mesh and material components directly.

Previously:

```rust
commands.spawn(MaterialMesh2dBundle {
    mesh: meshes.add(Circle::new(100.0)).into(),
    material: materials.add(Color::srgb(7.5, 0.0, 7.5)),
    transform: Transform::from_translation(Vec3::new(-200., 0., 0.)),
    ..default()
});
```

Now:

```rust
commands.spawn((
    Mesh2d(meshes.add(Circle::new(100.0))),
    MeshMaterial2d(materials.add(Color::srgb(7.5, 0.0, 7.5))),
    Transform::from_translation(Vec3::new(-200., 0., 0.)),
));
```

If the mesh material is missing, a white default material is now used. Previously, nothing was rendered if the material was missing.

The `WithMesh2d` and `WithMesh3d` query filter type aliases have also been removed. Simply use `With<Mesh2d>` or `With<Mesh3d>`.


--- END FILE `release-content/0.15/migration-guides/15524_Migrate_meshes_and_materials_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15526_System_param_validation_for_observers_system_registry_and_.md` ---


- `RunSystemOnce::run_system_once` and `RunSystemOnce::run_system_once_with` now return a `Result<Out>` instead of just `Out`


--- END FILE `release-content/0.15/migration-guides/15526_System_param_validation_for_observers_system_registry_and_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15546_Cleanup_unneeded_lifetimes_in_bevy_asset.md` ---


The traits `AssetLoader`, `AssetSaver` and `Process` traits from `bevy_asset` now use elided lifetimes. If you implement these then remove the named lifetime.


--- END FILE `release-content/0.15/migration-guides/15546_Cleanup_unneeded_lifetimes_in_bevy_asset.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15553_15540_Make_Worldflush_commands_private.md` ---


`World::flush_commands` is now private. Use `World::flush` instead.


--- END FILE `release-content/0.15/migration-guides/15553_15540_Make_Worldflush_commands_private.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15554_Migrate_lights_to_required_components.md` ---


`PointLightBundle`, `SpotLightBundle`, and `DirectionalLightBundle` have been deprecated. Use the `PointLight`, `SpotLight`, and `DirectionalLight` components instead. Adding them will now insert the other components required by them automatically.


--- END FILE `release-content/0.15/migration-guides/15554_Migrate_lights_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15561_Overflow_clip_margin.md` ---


Style has a new field `OverflowClipMargin`.  It allows users to set the visible area for clipped content when using overflow-clip, -hidden, or -scroll and expand it with a margin.

There are three associated constructor functions `content_box`, `padding_box` and `border_box`:

- `content_box`: elements painted outside of the content box area (the innermost part of the node excluding the padding and border) of the node are clipped. This is the new default behaviour.
- `padding_box`: elements painted outside outside of the padding area of the node are clipped. 
- `border_box`:  elements painted outside of the bounds of the node are clipped. This matches the behaviour from Bevy 0.14.

There is also a `with_margin` method that increases the size of the visible area by the given number in logical pixels, negative margin values are clamped to zero.

`OverflowClipMargin` is ignored unless overflow-clip, -hidden or -scroll is also set on at least one axis of the UI node.


--- END FILE `release-content/0.15/migration-guides/15561_Overflow_clip_margin.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15566_Fix_Mesh_allocator_bug_and_reduce_Mesh_data_copies_by_two.md` ---


- `Mesh::get_vertex_buffer_data` has been renamed `Mesh::create_packed_vertex_buffer_data` to reflect the fact that it copies data and allocates.


--- END FILE `release-content/0.15/migration-guides/15566_Fix_Mesh_allocator_bug_and_reduce_Mesh_data_copies_by_two.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15568_Migrate_fog_volumes_to_required_components.md` ---


Replace all insertions of `FogVolumeBundle` with the `Visibility` component. The other components required by it will now be inserted automatically.


--- END FILE `release-content/0.15/migration-guides/15568_Migrate_fog_volumes_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15572_Migrate_motion_blur_TAA_SSAO_and_SSR_to_required_component.md` ---


`MotionBlurBundle`, `TemporalAntiAliasBundle`, `ScreenSpaceAmbientOcclusionBundle`, and `ScreenSpaceReflectionsBundle` have been deprecated in favor of the `MotionBlur`, `TemporalAntiAliasing`, `ScreenSpaceAmbientOcclusion`, and `ScreenSpaceReflections` components instead. Inserting them will now also insert the other components required by them automatically.


--- END FILE `release-content/0.15/migration-guides/15572_Migrate_motion_blur_TAA_SSAO_and_SSR_to_required_component.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15573_Migrate_audio_to_required_components.md` ---


Replace all insertions of `AudioSourceBundle`, `AudioBundle`, and `PitchBundle` with the `AudioPlayer` component. The other components required by it will now be inserted automatically.

In cases where the generics cannot be inferred, you may need to specify them explicitly. For example:

```rust
commands.spawn(AudioPlayer::<AudioSource>(asset_server.load("sounds/sick_beats.ogg")));
```


--- END FILE `release-content/0.15/migration-guides/15573_Migrate_audio_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15579_Migrate_scenes_to_required_components.md` ---


Asset handles for scenes and dynamic scenes must now be wrapped in the `SceneRoot` and `DynamicSceneRoot` components. Raw handles as components no longer spawn scenes.

Additionally, `SceneBundle` and `DynamicSceneBundle` have been deprecated. Instead, use the scene components directly.

Previously:

```rust
let model_scene = asset_server.load(GltfAssetLabel::Scene(0).from_asset("model.gltf"));

commands.spawn(SceneBundle {
    scene: model_scene,
    transform: Transform::from_xyz(-4.0, 0.0, -3.0),
    ..default()
});
```

Now:

```rust
let model_scene = asset_server.load(GltfAssetLabel::Scene(0).from_asset("model.gltf"));

commands.spawn((
    SceneRoot(model_scene),
    Transform::from_xyz(-4.0, 0.0, -3.0),
));
```


--- END FILE `release-content/0.15/migration-guides/15579_Migrate_scenes_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15582_Synchronize_removed_components_with_the_render_world.md` ---


The retained render world notes should be updated to explain this edge case and `SyncComponentPlugin`


--- END FILE `release-content/0.15/migration-guides/15582_Synchronize_removed_components_with_the_render_world.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15583_Rename_BreakLineOn_to_LineBreak.md` ---


`BreakLineOn` was renamed to `LineBreak`, and parameters named `linebreak_behavior` were renamed to `linebreak`.


--- END FILE `release-content/0.15/migration-guides/15583_Rename_BreakLineOn_to_LineBreak.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15585_move_ANDROID_APP_to_bevy_window.md` ---


If you use the `android_activity` reexport from `bevy::winit::android_activity`, it is now in `bevy::window::android_activity`. Same for the `ANDROID_APP` static


--- END FILE `release-content/0.15/migration-guides/15585_move_ANDROID_APP_to_bevy_window.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15586_Featuregate_all_image_formats.md` ---


Image formats that previously weren’t feature-gated are now feature-gated, meaning they will have to be enabled if you use them:

- `avif`
- `ff` (Farbfeld)
- `gif`
- `ico`
- `tiff`

Additionally, the `qoi` feature has been added to support loading QOI format images.

Previously, these formats appeared in the enum by default, but weren’t actually enabled via the `image` crate, potentially resulting in weird bugs. Now, you should be able to add these features to your projects to support them properly.

---

If you were individually configuring the `bevy_render` crate, the feature flags for the general image formats were moved to `bevy_image` instead. For example, `bevy_render/png` no longer exists, and `bevy_image/png` is the new location for this. The texture formats are still available on `bevy_render`, e.g. `bevy_render/ktx2` is needed to fully enable `ktx2` support, and this will automatically enable `bevy_image/ktx2` for loading the textures.


--- END FILE `release-content/0.15/migration-guides/15586_Featuregate_all_image_formats.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15589_Impose_a_more_sensible_ordering_for_animation_graph_evalua.md` ---


The order in which animation graphs are evaluated has been changed to be more intuitive.
Please see the diagram in the linked PR for a detailed explanation.


--- END FILE `release-content/0.15/migration-guides/15589_Impose_a_more_sensible_ordering_for_animation_graph_evalua.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15591_Text_rework.md` ---


The `Text` API in Bevy has been overhauled in several ways as part of Bevy 0.15.
There are several major changes to consider:

- `ab_glyph` has been replaced with `cosmic-text`. These changes are mostly internal and the majority of users will not interact with either text backend directly.
- each text section is now stored as a distinct entity within the standard hierarchy, rather than as a `Vec<TextSection>` on the `Text` component. Children of `Text`/`Text2d` entities with `TextSpan` components will act as additional text sections.
- like other aspects of Bevy's API, required components have replaced bundles

#### `TextBundle` and text styling

`TextBundle` has been removed.
Add the `Text` component to set the string displayed.

`TextLayout`, `TextFont` and `TextColor` are required components for `Text`,
and are automatically added whenever `Text` is.
Set those values to change the text section's style.

Like elsewhere in Bevy, there is no style inheritance. Consider [writing your own abstraction for this](https://github.com/viridia/thorium_ui/blob/main/crates/thorium_ui_controls/src/text_styles.rs) if this is something you'd like to use.

To control the layout of a `Text` section, modify the properties of its `Node`.

#### Accessing text spans by index

Previously, text sections were elements of a vector stored within `Text`.
Now, they are stored as distinct entities under the same `Parent`.
You can use the new `TextUiReader` and `TextUiWriter` system parameters to conveniently access text spans by index.

Before:

```rust
fn refresh_text(mut query: Query<&mut Text, With<TimeText>>, time: Res<Time>) {
    let text = query.single_mut();
    text.sections[1].value = format_time(time.elapsed());
}
```

After:

```rust
fn refresh_text(
    query: Query<Entity, With<TimeText>>,
    mut writer: TextUiWriter,
    time: Res<Time>
) {
    let entity = query.single();
    *writer.text(entity, 1) = format_time(time.elapsed());
}
```

2D equivalents (`Text2dReader` and `Text2dWriter`) also exist.

#### Internal layout information

`TextBundle` additional fields have been moved into the `TextNodeFlags` component,
while `Text2dBundle`'s additional fields turned into the `TextBounds` and `Anchor` components.


--- END FILE `release-content/0.15/migration-guides/15591_Text_rework.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15593_Enable_EntityRefget_by_id_and_friends_to_take_multiple_ids.md` ---


- The following functions now return an `Result<_, EntityComponentError>` instead of a `Option<_>`: `EntityRef::get_by_id`, `EntityMut::get_by_id`, `EntityMut::into_borrow_by_id`, `EntityMut::get_mut_by_id`, `EntityMut::into_mut_by_id`, `EntityWorldMut::get_by_id`, `EntityWorldMut::into_borrow_by_id`, `EntityWorldMut::get_mut_by_id`, `EntityWorldMut::into_mut_by_id`


--- END FILE `release-content/0.15/migration-guides/15593_Enable_EntityRefget_by_id_and_friends_to_take_multiple_ids.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15614_Allow_Worldentity_family_of_functions_to_take_multiple_ent.md` ---


- `World::get_entity` now returns `Result<_, Entity>` instead of `Option<_>`.
  - Use `world.get_entity(..).ok()` to return to the previous behavior.

- `World::get_entity_mut` and `DeferredWorld::get_entity_mut` now return `Result<_, EntityFetchError>` instead of `Option<_>`.
  - Use `world.get_entity_mut(..).ok()` to return to the previous behavior.

- Type inference for `World::entity`, `World::entity_mut`, `World::get_entity`, `World::get_entity_mut`, `DeferredWorld::entity_mut`, and `DeferredWorld::get_entity_mut` has changed, and might now require the input argument’s type to be explicitly written when inside closures.
- The following functions have been deprecated, and should be replaced as such:
  - `World::many_entities` -> `World::entity::<[Entity; N]>`
  - `World::many_entities_mut` -> `World::entity_mut::<[Entity; N]>`
  - `World::get_many_entities` -> `World::get_entity::<[Entity; N]>`
  - `World::get_many_entities_dynamic` -> `World::get_entity::<&[Entity]>`
  - `World::get_many_entities_mut` -> `World::get_entity_mut::<[Entity; N]>`
    - The equivalent return type has changed from `Result<_, QueryEntityError>` to `Result<_, EntityFetchError>`

  - `World::get_many_entities_dynamic_mut` -> `World::get_entity_mut::<&[Entity]>`
    - The equivalent return type has changed from `Result<_, QueryEntityError>` to `Result<_, EntityFetchError>`

  - `World::get_many_entities_from_set_mut` -> `World::get_entity_mut::<&EntityHashSet>`
    - The equivalent return type has changed from `Result<Vec<EntityMut>, QueryEntityError>` to `Result<EntityHashMap<EntityMut>, EntityFetchError>`. If necessary, you can still convert the `EntityHashMap` into a `Vec`.


--- END FILE `release-content/0.15/migration-guides/15614_Allow_Worldentity_family_of_functions_to_take_multiple_ent.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15616_Rename_observe_to_observe_entity_on_EntityWorldMut.md` ---


The `observe()` method on entities has been renamed to `observe_entity()` to prevent confusion about what is being observed in some cases.


--- END FILE `release-content/0.15/migration-guides/15616_Rename_observe_to_observe_entity_on_EntityWorldMut.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15628_Serialize_and_deserialize_tuple_struct_with_one_field_as_n.md` ---


- Reflection now will serialize and deserialize tuple struct with single field as newtype struct. Consider this code.

```rs
#[derive(Reflect, Serialize)]
struct Test(usize);
let reflect = Test(3);
let serializer = TypedReflectSerializer::new(reflect.as_partial_reflect(), &registry);
return serde_json::to_string(&serializer)
```

Old behavior will return `["3"]`. New behavior will return `"3"`. If you were relying on old behavior you need to update your logic. Especially with `serde_json`. `ron` doesn’t affect from this.


--- END FILE `release-content/0.15/migration-guides/15628_Serialize_and_deserialize_tuple_struct_with_one_field_as_n.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15631_Implement_additive_blending_for_animation_graphs.md` ---


- The `animgraph.ron` format has changed to accommodate the new _additive blending_ feature. You’ll need to change `clip` fields to instances of the new `AnimationNodeType` enum.


--- END FILE `release-content/0.15/migration-guides/15631_Implement_additive_blending_for_animation_graphs.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15641_Migrate_cameras_to_required_components.md` ---


`Camera2dBundle` and `Camera3dBundle` have been deprecated in favor of `Camera2d` and `Camera3d`. Inserting them will now also insert the other components required by them automatically.


--- END FILE `release-content/0.15/migration-guides/15641_Migrate_cameras_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15649_Inverse_bevy_render_bevy_winit_dependency_and_move_cursor_.md` ---


`CursorIcon` and `CustomCursor`  previously provided by `bevy::render::view::cursor` is now available from `bevy::winit`.
A new feature `custom_cursor` enables this functionality (default feature).


--- END FILE `release-content/0.15/migration-guides/15649_Inverse_bevy_render_bevy_winit_dependency_and_move_cursor_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15652_Deprecate_get_or_spawn.md` ---


If you are given an `Entity` and you want to do something with it, use `Commands.entity(...)` or `World.entity(...)`. If instead you want to spawn something use `Commands.spawn(...)` or `World.spawn(...)`. If you are not sure if an entity exists, you can always use `get_entity` and match on the `Option<...>` that is returned.


--- END FILE `release-content/0.15/migration-guides/15652_Deprecate_get_or_spawn.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15658_Deprecate_Eventsoldest_id.md` ---


- Change usages of `Events::oldest_id` to `Events::oldest_event_count`
- If `Events::oldest_id` was used to get the actual oldest `EventId::id`, note that the deprecated method never reliably did that in the first place as the buffers may contain no id currently.


--- END FILE `release-content/0.15/migration-guides/15658_Deprecate_Eventsoldest_id.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15662_Fix_additive_blending_of_quaternions.md` ---


This PR changes the implementation of `Quat: Animatable`, which was not used internally by Bevy prior to this release version. If you relied on the old behavior of additive quaternion blending in manual applications, that code will have to be updated, as the old behavior was incorrect.


--- END FILE `release-content/0.15/migration-guides/15662_Fix_additive_blending_of_quaternions.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15666_Split_out_bevy_mesh_from_bevy_render.md` ---


`bevy_render::mesh::morph::inherit_weights` has been moved to `bevy_render::mesh::inherit_weights`.

`Mesh::compute_aabb` has been moved to the new `MeshAabb` trait. You may need to import it.

```rust
use bevy::render::mesh::MeshAabb;
```


--- END FILE `release-content/0.15/migration-guides/15666_Split_out_bevy_mesh_from_bevy_render.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15690_Migrate_bevy_picking.md` ---


This API hasn’t shipped yet, so I didn’t bother with a deprecation. However, for any crates tracking main the changes are as follows: 

Previous api:

```rs
commands.insert(PointerBundle::new(PointerId::Mouse));
commands.insert(PointerBundle::new(PointerId::Mouse).with_location(location));
```

New api:

```rs
commands.insert(PointerId::Mouse);
commands.insert((PointerId::Mouse, PointerLocation::new(location)));
```


--- END FILE `release-content/0.15/migration-guides/15690_Migrate_bevy_picking.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15735_Use_Dir2Dir3_instead_of_Vec2Vec3_for_Ray2dnewRay3dnew.md` ---


`Ray2d::new` and `Ray3d::new` now take a `Dir2` and `Dir3` instead of `Vec2` and `Vec3` respectively for the ray direction.


--- END FILE `release-content/0.15/migration-guides/15735_Use_Dir2Dir3_instead_of_Vec2Vec3_for_Ray2dnewRay3dnew.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15737_Migrate_reflection_probes_to_required_components.md` ---


`ReflectionProbeBundle` has been deprecated in favor of inserting the `LightProbe` and `EnvironmentMapLight` components directly. Inserting them will now automatically insert `Transform` and `Visibility` components.


--- END FILE `release-content/0.15/migration-guides/15737_Migrate_reflection_probes_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15740_Replace_HandleM_UiMaterial_component_with__UiMaterialHandl.md` ---


Let’s defer the migration guide to the required component port. I just want to yeet the `Component` impl on `Handle` in the meantime :)


--- END FILE `release-content/0.15/migration-guides/15740_Replace_HandleM_UiMaterial_component_with__UiMaterialHandl.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15742_Replace_HandleAnimationGraph_component_with_a_wrapper.md` ---


`Handle<AnimationGraph>` is no longer a component. Instead, use the `AnimationGraphHandle` component which contains a `Handle<AnimationGraph>`.


--- END FILE `release-content/0.15/migration-guides/15742_Replace_HandleAnimationGraph_component_with_a_wrapper.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15754_Rename_AppWorldobserve_to_add_observer_EntityWorldMutobser.md` ---


Various observer methods have been renamed for clarity.

- `App::observe` -> `App::add_observer`
- `World::observe` -> `World::add_observer`
- `Commands::observe` -> `Commands::add_observer`
- `EntityWorldMut::observe_entity` -> `EntityWorldMut::observe`


--- END FILE `release-content/0.15/migration-guides/15754_Rename_AppWorldobserve_to_add_observer_EntityWorldMutobser.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15796_Remove_the_Component_trait_implementation_from_Handle.md` ---


`Handle` can no longer be used as a `Component`. All existing Bevy types using this pattern have been wrapped in their own semantically meaningful type. You should do the same for any custom `Handle` components your project needs.

The `Handle<MeshletMesh>` component is now `MeshletMesh3d`.

The `WithMeshletMesh` type alias has been removed. Use `With<MeshletMesh3d>` instead.


--- END FILE `release-content/0.15/migration-guides/15796_Remove_the_Component_trait_implementation_from_Handle.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15812_Move_ImageLoader_and_CompressedImageSaver_to_bevy_image.md` ---


- `ImageLoader` can no longer be initialized directly through `init_asset_loader`. Now you must use `app.register_asset_loader(ImageLoader::new(supported_compressed_formats))` (check out the implementation of `bevy_render::ImagePlugin`). This only affects you if you are initializing the loader manually and does not affect users of `bevy_render::ImagePlugin`.
- The asset loader name must be updated in `.meta` files for images.
Change: `loader: "bevy_render::texture::image_loader::ImageLoader",`
to: `loader: "bevy_image::image_loader::ImageLoader",`

This will fix the following error:

> `no `AssetLoader` found with the name 'bevy_render::texture::image_loader::ImageLoader`


--- END FILE `release-content/0.15/migration-guides/15812_Move_ImageLoader_and_CompressedImageSaver_to_bevy_image.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15820_Add_bevy_windowWindow_options_for_MacOS.md` ---


`bevy_window::Window` now has extra fields for configuring MacOS window settings:

```rs
    pub movable_by_window_background: bool,
    pub fullsize_content_view: bool,
    pub has_shadow: bool,
    pub titlebar_shown: bool,
    pub titlebar_transparent: bool,
    pub titlebar_show_title: bool,
    pub titlebar_show_buttons: bool,
```

Using `Window::default` keeps the same behaviour as before.


--- END FILE `release-content/0.15/migration-guides/15820_Add_bevy_windowWindow_options_for_MacOS.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15830_Deprecate_SpatialBundle.md` ---


`SpatialBundle` is now deprecated, insert `Transform` and `Visibility` instead which will automatically insert all other components that were in the bundle. If you do not specify these values and any other components in your `spawn`/`insert` call already requires either of these components you can leave that one out.

before:

```rust
commands.spawn(SpatialBundle::default());
```

after:

```rust
commands.spawn((Transform::default(), Visibility::default());
```


--- END FILE `release-content/0.15/migration-guides/15830_Deprecate_SpatialBundle.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15839_bevy_ecs_Specialcase_EntityPLACEHOLDER_formatting.md` ---


The `Debug` and `Display` impls for `Entity` now return `PLACEHOLDER` for the `Entity::PLACEHOLDER` constant. If you had any code relying on these values, you may need to account for this change.


--- END FILE `release-content/0.15/migration-guides/15839_bevy_ecs_Specialcase_EntityPLACEHOLDER_formatting.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15857_split_up_TextStyle.md` ---


`TextStyle` has been renamed to `TextFont` and its `color` field has been moved to a separate component named `TextColor` which newtypes `Color`.


--- END FILE `release-content/0.15/migration-guides/15857_split_up_TextStyle.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15887_Text_Rework_cleanup.md` ---


Doubles as #15591 migration guide.

Text bundles (`TextBundle` and `Text2dBundle`) were removed in favor of `Text` and `Text2d`.
Shared configuration fields were replaced with `TextLayout`, `TextFont` and `TextColor` components.
Just `TextBundle`’s additional field turned into `TextNodeFlags` component,
while `Text2dBundle`’s additional fields turned into `TextBounds` and `Anchor` components.

Text sections were removed in favor of hierarchy-based approach.
For root text entities with `Text` or `Text2d` components, child entities with `TextSpan` will act as additional text sections.
To still access text spans by index, use the new `TextUiReader`, `Text2dReader` and `TextUiWriter`, `Text2dWriter` system parameters.


--- END FILE `release-content/0.15/migration-guides/15887_Text_Rework_cleanup.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15890_Remove_incorrect_equality_comparisons_for_asset_load_error.md` ---


The types `bevy_asset::AssetLoadError` and `bevy_asset::LoadState` no longer support equality comparisons. If you need to check for an asset’s load state, consider checking for a specific variant using `LoadState::is_loaded` or the `matches!` macro. Similarly, consider using the `matches!` macro to check for specific variants of the `AssetLoadError` type if you need to inspect the value of an asset load error in your code.

`DependencyLoadState` and `RecursiveDependencyLoadState` are not released yet, so no migration needed,


--- END FILE `release-content/0.15/migration-guides/15890_Remove_incorrect_equality_comparisons_for_asset_load_error.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15898_Migrate_UI_bundles_to_required_components.md` ---


`NodeBundle` has been replaced with `Node` (and its associated required components).
Simultaneously, the fields and behavior of `Style` have been moved to `Node`, and the largely internal values previously stored there are now found on `ComputedNode`.

It will be easiest to migrate if you replace `Node` with `ComputedNode` first, then `Style` with `Node`, and finally `NodeBundle` with `Node`.

#### `Node` -> `ComputedNode`

For any usage of the “computed node properties” that used to live on `Node`, use `ComputedNode` instead.
This is a trivial find-and-replace rename.

If you were ever explicitly adding `Node` (now `ComputedNode`) to your UI bundles, you can remove this, as it is now required by `Node` (previously `Style`).

Before:

```rust
fn system(nodes: Query<&Node>) {
    for node in &nodes {
        let computed_size = node.size();
    }
}
```

After:

```rust
fn system(computed_nodes: Query<&ComputedNode>) {
    for computed_node in &computed_nodes {
        let computed_size = computed_node.size();
    }
}
```

#### `Style` -> `Node`

All of the values of `Style` now live on `Node`. This is a find-and-replace rename.

Before:

```rust
Style {
    width: Val::Px(100.),
    ..default()
}
```

After:

```rust
Node {
    width: Val::Px(100.),
    ..default()
}
```

#### `NodeBundle` -> `Node`

Finally, replace all uses of `NodeBundle` with `Node`.
All other components in `NodeBundle` are now added implicitly via required components.
Adding them to your bundles manually will overwrite the default values.

Before:

```rust
     commands
        .spawn(NodeBundle {
            style: Style {
                 width: Val::Percent(100.),
                 align_items: AlignItems::Center,
                 justify_content: JustifyContent::Center,
                 ..default()
             },
            ..default()
        });
```

After:

```rust
     commands
        .spawn(Node {
            width: Val::Percent(100.),
            align_items: AlignItems::Center,
            justify_content: JustifyContent::Center,
            ..default()
        });
```


--- END FILE `release-content/0.15/migration-guides/15898_Migrate_UI_bundles_to_required_components.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15904_Attempt_to_remove_component_from_render_world_if_not_extra.md` ---


Components that implement `ExtractComponent` and return `None` will cause the extracted component to be removed from the render world.


--- END FILE `release-content/0.15/migration-guides/15904_Attempt_to_remove_component_from_render_world_if_not_extra.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15962_aligning_public_apis_of_TimeTimer_and_Stopwatch.md` ---


The APIs of `Time`, `Timer` and `Stopwatch` have been cleaned up for consistency with each other and the standard library’s `Duration` type. The following methods have been renamed:

- `Stowatch::paused` -> `Stopwatch::is_paused`
- `Time::elapsed_seconds` -> `Time::elapsed_secs` (including `_f64` and `_wrapped` variants)


--- END FILE `release-content/0.15/migration-guides/15962_aligning_public_apis_of_TimeTimer_and_Stopwatch.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15969_Improve_API_for_scaling_orthographic_cameras.md` ---


`ScalingMode` has been refactored for clarity, especially on how to zoom orthographic cameras and their projections:

- `ScalingMode::WindowSize` no longer stores a float, and acts as if its value was 1. Divide your camera’s scale by any previous value to achieve identical results.
- `ScalingMode::FixedVertical` and `FixedHorizontal` now use named fields.


--- END FILE `release-content/0.15/migration-guides/15969_Improve_API_for_scaling_orthographic_cameras.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/15973_Remove_AVIF_feature.md` ---


AVIF images are no longer supported. They never really worked, and require system dependencies (libdav1d) to work correctly, so, it’s better to simply offer this support via an unofficial plugin instead as needed. The corresponding types have been removed from Bevy to account for this.


--- END FILE `release-content/0.15/migration-guides/15973_Remove_AVIF_feature.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16037_Use_enus_locale_for_typos.md` ---


The following methods or fields have been renamed from `*dependants*` to `*dependents*`.

- `ProcessorAssetInfo::dependants`
- `ProcessorAssetInfos::add_dependant`
- `ProcessorAssetInfos::non_existent_dependants`
- `AssetInfo::dependants_waiting_on_load`
- `AssetInfo::dependants_waiting_on_recursive_dep_load`
- `AssetInfos::loader_dependants`
- `AssetInfos::remove_dependants_and_labels`


--- END FILE `release-content/0.15/migration-guides/16037_Use_enus_locale_for_typos.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16069_Reduce_the_clusterable_object_UBO_size_below_16384_for_Web.md` ---


The maximum number of clusterable objects on `WebGL2` is now 204, to keep us within our 16 kB memory budget.
Modify your scenes or use WebGPU if you are running into this.


--- END FILE `release-content/0.15/migration-guides/16069_Reduce_the_clusterable_object_UBO_size_below_16384_for_Web.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16072_Move_TextureAtlas_into_UiImage_and_remove_impl_Component_f.md` ---


Before:

```rust
commands.spawn((
  UiImage::new(image),
  TextureAtlas { index, layout },
));
```

After:

```rust
commands.spawn(UiImage::from_atlas_image(image, TextureAtlas { index, layout }));
```

Before:

```rust
commands.spawn(UiImage {
    texture: some_image,
    ..default()
})
```

After:

```rust
commands.spawn(UiImage {
    image: some_image,
    ..default()
})
```


--- END FILE `release-content/0.15/migration-guides/16072_Move_TextureAtlas_into_UiImage_and_remove_impl_Component_f.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16090_Adding_alpha_threshold_to_OrderIndependentTransparencySett.md` ---


If you previously explicitly initialized OrderIndependentTransparencySettings with your own `layer_count`, you will now have to add either a `..default()` statement or an explicit `alpha_threshold` value:

```rust
fn setup(mut commands: Commands) {
    commands.spawn((
        Camera3d::default(),
        OrderIndependentTransparencySettings {
            layer_count: 16,
            ..default()
        },
    ));
}
```


--- END FILE `release-content/0.15/migration-guides/16090_Adding_alpha_threshold_to_OrderIndependentTransparencySett.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16097_Remove_custom_rounding.md` ---


`UiSurface::get_layout` now also returns the final sizes before rounding. Call `.0` on the `Ok` result to get the previously returned `taffy::Layout` value.


--- END FILE `release-content/0.15/migration-guides/16097_Remove_custom_rounding.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16139_ReflectBundleremove_improvement.md` ---


If you don’t need the returned value from `remove`, discard it.


--- END FILE `release-content/0.15/migration-guides/16139_ReflectBundleremove_improvement.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16163_Dont_reexport_bevy_image_from_bevy_render.md` ---


Various types and traits are no longer re-exported from `bevy_image` in `bevy::render::texture`. Import them directly from `bevy::image` instead.

```rust
// 0.14
use bevy::render::texture::BevyDefault;
// 0.15
use bevy::image::BevyDefault;
```

For searchability, this is a non-comprehensive list of other types may be affected: `CompressedImageFormats`, `ExrTextureLoader`, `HdrTextureLoader`, `Image`, `ImageAddressMode`, `ImageFilterMode`, `ImageLoader`, `ImageLoaderSettings`, `ImageSampler`, `ImageSamplerDescriptor`, `ImageType`, `TextureError`, `TextureFormatPixelInfo`.


--- END FILE `release-content/0.15/migration-guides/16163_Dont_reexport_bevy_image_from_bevy_render.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16222_Gamepad_improvements.md` ---


- `Gamepad` fields are now public.
- Instead of using `Gamepad` delegates like `Gamepad::just_pressed`, call these methods directly on the fields.


--- END FILE `release-content/0.15/migration-guides/16222_Gamepad_improvements.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16233_Use_Name_component_for_gamepad.md` ---


- `GamepadInfo` no longer exists:
  - Name now accessible via `Name` component.
  - Other information available on `Gamepad` component directly.
  - `GamepadConnection::Connected` now stores all info fields directly.


--- END FILE `release-content/0.15/migration-guides/16233_Use_Name_component_for_gamepad.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16257_Remove_accesskit_reexport_from_bevy_a11y.md` ---


```diff
# main.rs
--    use bevy_a11y::{
--        accesskit::{Node, Rect, Role},
--        AccessibilityNode,
--    };
++    use bevy_a11y::AccessibilityNode;
++    use accesskit::{Node, Rect, Role};

# Cargo.toml
++    accesskit = "0.17"
```

- Users will need to add `accesskit = "0.17"` to the dependencies section of their `Cargo.toml` file and update their `accesskit` use statements to come directly from the external crate instead of `bevy_a11y`.
- Make sure to keep the versions of `accesskit` aligned with the versions Bevy uses.


--- END FILE `release-content/0.15/migration-guides/16257_Remove_accesskit_reexport_from_bevy_a11y.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16269_Make_ComponentTicks_field_public.md` ---


- Instead of using `ComponentTicks::last_changed_tick` and `ComponentTicks::added_tick` methods, access fields directly.


--- END FILE `release-content/0.15/migration-guides/16269_Make_ComponentTicks_field_public.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16271_UiImage__ImageNode_UiImageSize__ImageNodeSize.md` ---


Before:

```rust
commands.spawn(UiImage::new(image));
```

After:

```rust
commands.spawn(ImageNode::new(image));
```


--- END FILE `release-content/0.15/migration-guides/16271_UiImage__ImageNode_UiImageSize__ImageNodeSize.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16301_Expose_Pipeline_Compilation_Zero_Initialize_Workgroup_Memo.md` ---


- add `zero_initialize_workgroup_memory: false,` to `ComputePipelineDescriptor` or `RenderPipelineDescriptor` structs to preserve 0.14 functionality, add `zero_initialize_workgroup_memory: true,` to restore bevy 0.13 functionality.


--- END FILE `release-content/0.15/migration-guides/16301_Expose_Pipeline_Compilation_Zero_Initialize_Workgroup_Memo.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16327_Rename_Rot2angle_between_to_Rot2angle_to.md` ---


`Rot2::angle_between` has been deprecated, use `Rot2::angle_to` instead, the semantics of `Rot2::angle_between` will change in the future.


--- END FILE `release-content/0.15/migration-guides/16327_Rename_Rot2angle_between_to_Rot2angle_to.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16375_Only_use_physical_coords_internally_in_bevy_ui.md` ---


`ComputedNode`’s fields and methods now use physical coordinates.
`ComputedNode` has a new field `inverse_scale_factor`. Multiplying the physical coordinates by the `inverse_scale_factor` will give the logical values.


--- END FILE `release-content/0.15/migration-guides/16375_Only_use_physical_coords_internally_in_bevy_ui.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16405_Bind_only_the_written_parts_of_storage_buffers.md` ---


- Fixed a bug with StorageBuffer and DynamicStorageBuffer binding data from the previous frame(s) due to caching GPU buffers between frames.


--- END FILE `release-content/0.15/migration-guides/16405_Bind_only_the_written_parts_of_storage_buffers.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16468_Only_use_the_AABB_center_for_mesh_visibility_range_testing.md` ---


- The `VisibilityRange` component now has an extra field, `use_aabb`. Generally, you can safely set it to false.


--- END FILE `release-content/0.15/migration-guides/16468_Only_use_the_AABB_center_for_mesh_visibility_range_testing.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16473_Add_flags_to_SpritePlugin_and_UiPlugin_to_allow_disabling_.md` ---


- `UiPlugin` now contains an extra `add_picking` field if `bevy_ui_picking_backend` is enabled.
- `SpritePlugin` is no longer a unit struct, and has one field if `bevy_sprite_picking_backend` is enabled (otherwise no fields).


--- END FILE `release-content/0.15/migration-guides/16473_Add_flags_to_SpritePlugin_and_UiPlugin_to_allow_disabling_.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/16481_cleanup_bevy_renderlibrs.md` ---


`RenderCreation::Manual` variant fields are now wrapped in a struct called `RenderResources`


--- END FILE `release-content/0.15/migration-guides/16481_cleanup_bevy_renderlibrs.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/7207_reflect_implement_the_unique_reflect_rfc.md` ---


- Most instances of `dyn Reflect` should be changed to `dyn PartialReflect` which is less restrictive, however trait bounds should generally stay as `T: Reflect`.
- The new `PartialReflect::{as_partial_reflect, as_partial_reflect_mut, into_partial_reflect, try_as_reflect, try_as_reflect_mut, try_into_reflect}` methods as well as `Reflect::{as_reflect, as_reflect_mut, into_reflect}` will need to be implemented for manual implementors of `Reflect`.


--- END FILE `release-content/0.15/migration-guides/7207_reflect_implement_the_unique_reflect_rfc.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/8997_Optional_UI_rendering.md` ---


`UiPlugin` has a new field `enable_rendering`. If set to false, the UI’s rendering systems won’t be added to the `RenderApp` and no UI elements will be drawn. The layout and interaction components will still be updated as normal.


--- END FILE `release-content/0.15/migration-guides/8997_Optional_UI_rendering.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/9889_Simplified_ui_stack_system.md` ---


The `ZIndex` enum has been split into two separate components `ZIndex` (which replaces `ZIndex::Local`) and `GlobalZIndex` (which replaces `ZIndex::Global`). An entity can have both a `ZIndex` and `GlobalZIndex`, in comparisons `ZIndex` breaks ties if two `GlobalZindex` values are equal.


--- END FILE `release-content/0.15/migration-guides/9889_Simplified_ui_stack_system.md` ---


--- BEGIN FILE `release-content/0.15/migration-guides/virtual_geometry.md` ---


- Runtime
    - This feature now requires that your GPU supports `WgpuFeatures::SHADER_INT64_ATOMIC_MIN_MAX`.
    - `MeshletPlugin` now requires a `cluster_buffer_slots` field. Read the rustdoc for more details.
    - `MaterialMeshletMeshBundle` has been deprecated. Instead of using `Handle<MeshletMesh>` and `Handle<M: Material>` as components directly, use the `MeshletMesh3d` and `MeshMaterial3d` components.
- Asset Conversion
    - Regenerate your `MeshletMesh` assets, as the asset format has changed, and `MESHLET_MESH_ASSET_VERSION` has been bumped. Old assets are not compatible.
    - When using `MeshletMesh::from_mesh()`, the provided mesh must no longer have tangents as a vertex attribute.
    - When using `MeshletMesh::from_mesh()`, you must now supply a `vertex_position_quantization_factor` argument. Use `MESHLET_DEFAULT_VERTEX_POSITION_QUANTIZATION_FACTOR`, and adjust as needed. See the docs for more info.
- Misc
    - `MeshletMeshSaverLoad` has been split into `MeshletMeshSaver` and `MeshletMeshLoader`.
    - Renamed `MeshletMeshSaveOrLoadError` to `MeshToMeshletMeshConversionError`.
    - The `MeshletMeshSaveOrLoadError::SerializationOrDeserialization` enum variant has been removed.
    - Added `MeshToMeshletMeshConversionError::WrongFileType`, match on this variant if you match on `MeshToMeshletMeshConversionError`
    - `MeshletMesh` fields are now private.
    - The `Meshlet`, `MeshletBoundingSpheres`, and `MeshletBoundingSphere` types are now private.


--- END FILE `release-content/0.15/migration-guides/virtual_geometry.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/10193_Cosmic_text.md` ---


<!-- Cosmic text -->
<!-- https://github.com/bevyengine/bevy/pull/10193 -->

Historically, Bevy has used the `ab_glyph` library to render text. This handled simple latin text rendering reasonably well. But Bevy aims to be a generic app framework usable with any language, and there were a number of areas where `ab_glyph` wasn't meeting our needs.

The Rust text space has evolved significantly since we selected `ab_glyph`. Fortunately there are a number of good options now. We chose [`cosmic-text`](https://github.com/pop-os/cosmic-text) because of its robust feature set and its use in production applications (Iced, Cosmic Desktop, Zed, Lapce, etc). Notably, `cosmic-text` gives us support for:

* **Font Shaping**: The ability to take a string of character codes and perform layout and transformation rules. This can involve moving, modifying, and combining characters (such as ligatures). This is _extremely_ important for non-Latin-based languages.
* **System Font Loading**: The ability to scan for the available fonts installed on a system and load them.
* **Bidirectional Text**: Not all languages go from left to right! Cosmic Text gives us support for bidirectional text.
* **Text Editing**: Cosmic Text has its own internal text editing model, which we can take advantage of.

In **Bevy 0.15** we ported our text rendering to `cosmic-text`. This was largely an internal change (unlike the other "high level" text API changes this release, such as the port to Required Components).

That being said, you will definitely notice our improved ability to render text! Here is Bevy rendering Arabic text, right-to-left, using the Noto Sans Arabic font:

![arabic text](arabic_text.png)

Note that we haven't yet wired up `cosmic-text`'s "system font loading" features, but we're working on it!


--- END FILE `release-content/0.15/release-notes/10193_Cosmic_text.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/10392_CPU_Drawing.md` ---


There are many situations where you might want to just set the color of pixels
from CPU code.  Procedural assets, certain art styles, or simply because
it is easier. No need to bother with shaders and materials, when you just want
to change a few specific pixels!

In previous versions of Bevy, this was difficult and tedious. Bevy gives you
access to the raw data bytes of an [`Image`], but you had to compute the byte
offset corresponding to your desired pixel coordinate, make sure to encode your
bytes with respect to the [`TextureFormat`], etc. Very low level!

In Bevy 0.15, there are now user-friendly APIs for reading and writing the
colors of pixels in an [`Image`]. The tricky low-level details are dealt with
for you! You can even use `bevy_color`'s fancy color space APIs!

```rust
fn my_system(mut images: ResMut<Assets<Image>>, mut commands: Commands) {
    // Create a new image.
    let mut image = Image::new_fill(
        // 64x64 size
        Extent3d {
            width: 64,
            height: 64,
            depth_or_array_layers: 1,
        },
        TextureDimension::D2,
        &Srgba::WHITE.to_u8_array(),
        TextureFormat::Rgba8UnormSrgb,
        RenderAssetUsages::all(),
    );

    // This is new:

    // Make the pixel at x: 23, y: 32 magenta
    image.set_color_at(23, 32, Color::srgb(1.0, 0.0, 1.0))
        .expect("Error writing color");

    // Set the pixel at 10,10 to a color specified using the Oklch color space:
    image.set_color_at(10, 10, Color::oklch(0.3, 0.2, 0.5))
        .expect("Error writing color");

    // read the bytes of the pixel we just wrote:
    let bytes = image.pixel_bytes(UVec3::new(10, 10, 0)).unwrap();

    // read the (approximate) color back (as sRGB):
    let color = image.get_color_at(10, 10);

    // We could add our new image to Bevy's assets
    // and spawn a sprite to display it:
    commands.spawn(Sprite {
        image: images.add(image),
        ..default()
    });
}
```

Note: The [`Color`]-based methods are lossy. They have to convert to/from the
[`Image`]'s [`TextureFormat`]. If you read back the color you wrote, it will be slightly different.

[`Image`]: https://docs.rs/bevy/0.15/bevy/prelude/struct.Image.html
[`TextureFormat`]: https://docs.rs/bevy/0.15/bevy/render/render_resource/enum.TextureFormat.html
[`Color`]: https://docs.rs/bevy/0.15/bevy/color/enum.Color.html


--- END FILE `release-content/0.15/release-notes/10392_CPU_Drawing.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/12095_Add_features_to_switch_NativeActivity_and_GameActivity_usa.md` ---


<!-- Add features to switch `NativeActivity` and `GameActivity` usage -->
<!-- https://github.com/bevyengine/bevy/pull/12095 -->
Bevy now uses `GameActivity` as the default `Activity` for Android projects, replacing
`NativeActivity`. `NativeActivity` is still available, but has been placed behind a feature flag.

This change updates Bevy to a more modern Android stack, and includes an SDK minimum version bump to
[PlayStore's current version
requirement](https://developer.android.com/distribute/best-practices/develop/target-sdk). We've also
switched to a [`cargo-ndk`](https://docs.rs/crate/cargo-ndk/3.5.4) based build, which gives us more control by default. Gradle projects for both `GameActivity` and
`NativeActivity` are provided.

`GameActivity` brings with it improvements to game interaction (`SurfaceView` rendering, improved
touch and input handling), more frequent updates, and access to other parts of the
[JetPack](https://developer.android.com/jetpack) ecosystem. It is better placed to integrate with
Rust code without excessive JNI wrangling. You can read more about `GameActivity`
[here](https://developer.android.com/games/agdk/game-activity).


--- END FILE `release-content/0.15/release-notes/12095_Add_features_to_switch_NativeActivity_and_GameActivity_usa.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/12770_Implement_gamepads_as_entities.md` ---


<!-- Implement gamepads as entities -->
<!-- https://github.com/bevyengine/bevy/pull/12770 -->

Gamepads are now represented as entities, which makes them easier to work with!
The [`Gamepad`] component provides button and axis state, as well as metadata such as the vendor and product ID.
The [`GamepadSettings`] component provides configurable settings for a given [`Gamepad`], such as deadzones and sensitivity. The name of the gamepad is now stored in Bevy's standard [`Name`] component.

In Bevy 0.14, you might write:

```rust
fn gamepad_system(
   gamepads: Res<Gamepads>,
   button_inputs: Res<ButtonInput<GamepadButton>>,
   button_axes: Res<Axis<GamepadButton>>,
   axes: Res<Axis<GamepadAxis>>,
) {
    for gamepad in &gamepads {
        if button_inputs.just_pressed(
            GamepadButton::new(gamepad, GamepadButtonType::South)
        ) {
            info!("just pressed South");
        }

        let right_trigger = button_axes
           .get(GamepadButton::new(
               gamepad,
               GamepadButtonType::RightTrigger2,
           ))
           .unwrap();
        if right_trigger.abs() > 0.01 {
            info!("RightTrigger2 value is {}", right_trigger);
        }

        let left_stick_x = axes
           .get(GamepadAxis::new(gamepad, GamepadAxisType::LeftStickX))
           .unwrap();
        if left_stick_x.abs() > 0.01 {
            info!("LeftStickX value is {}", left_stick_x);
        }
    }
}
```

In 0.15, we can write this much more simply as:

```rust
fn gamepad_system(gamepads: Query<&Gamepad>) {
    for gamepad in &gamepads {
        if gamepad.just_pressed(GamepadButton::South) {
            println!("just pressed South");
        }

        let right_trigger = gamepad.get(GamepadButton::RightTrigger2).unwrap();
        if right_trigger.abs() > 0.01 {
            info!("RightTrigger2 value is {}", right_trigger);
        }

        let left_stick_x = gamepad.get(GamepadAxis::LeftStickX).unwrap();
        if left_stick_x.abs() > 0.01 {
            info!("LeftStickX value is {}", left_stick_x);
        }
    }
}
```

Much better!

[`Gamepad`]: https://docs.rs/bevy/0.15/bevy/input/gamepad/struct.Gamepad.html
[`GamepadSettings`]: https://docs.rs/bevy/0.15/bevy/input/gamepad/struct.GamepadSettings.html
[`Name`]: https://docs.rs/bevy/0.15/bevy/core/struct.Name.html


--- END FILE `release-content/0.15/release-notes/12770_Implement_gamepads_as_entities.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13014_Dedicated_Reflect_implementation_for_Setlike_things.md` ---


<!-- Dedicated `Reflect` implementation for `Set`-like things -->
<!-- https://github.com/bevyengine/bevy/pull/13014 -->

Inside of `bevy_reflect`, every reflected Rust object ends up being mapped to one of a handful of [`ReflectKind`] variants.

Before Bevy 0.15, sets (like [`HashSet`]) were treated as opaque "values": there was no way to view or modify their contents via reflection.
With these changes, we can now properly represent sets of all kinds, which is particularly handy for runtime debugging tools like [`bevy-inspector-egui`]!

[`ReflectKind`]: https://docs.rs/bevy/0.15.0/bevy/reflect/enum.ReflectKind.html
[`HashSet`]: https://doc.rust-lang.org/stable/std/collections/struct.HashSet.html
[`bevy-inspector-egui`]: https://github.com/jakobhellermann/bevy-inspector-egui


--- END FILE `release-content/0.15/release-notes/13014_Dedicated_Reflect_implementation_for_Setlike_things.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13454_vbao.md` ---


**Bevy 0.15** introduces a new Screen Space Ambient Occlusion (SSAO) algorithm: [Visibility Bitmask Ambient Occlusion](https://arxiv.org/abs/2301.11376) (VBAO). VBAO builds on GTAO by adding a bitmask that allows multiple "sectors" of a considered half circle to be occluded, instead of just one angle. This improves the accuracy of the technique and is particularly important on thin geometry (like the chair legs in the scene below):

{{ compare_slider(
    path="POST_PATH",
    left_title="GTAO",
    left_image="gtao.jpg",
    right_title="VBAO",
    right_image="vbao.jpg"
) }}

VBAO produces a significant enough quality improvement that we have replaced our old GTAO algorithm entirely. Just add the existing [`ScreenSpaceAmbientOcclusion`] component to your camera to enable it.

[`ScreenSpaceAmbientOcclusion`]: https://docs.rs/bevy/0.15/bevy/pbr/struct.ScreenSpaceAmbientOcclusion.html

--- END FILE `release-content/0.15/release-notes/13454_vbao.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13669_Expose_winits_MonitorHandle.md` ---


The new `Monitor` component simplifies the process of working with multi-monitor setups by providing easy access to monitor properties such as resolution, refresh rate, position, and scaling factor. This feature is especially useful for developers who need to spawn windows on specific displays, gather monitor details, or adjust their application based on available hardware. This is especially useful for creative setups like multi-projector installations or LED video walls, where precise control over display environments is critical.

`Monitor` can be queried for and used for things like spawning or resizing Windows:

```rust
fn spawn_windows(
    mut commands: Commands,
    monitors: Query<(Entity, &Monitor)>,
) {
    for (entity, monitor) in monitors_added.iter() {
        commands.spawn(Window {
            mode: WindowMode::Fullscreen(MonitorSelection::Entity(entity)),
            position: WindowPosition::Centered(MonitorSelection::Entity(entity)),
            ..default()
        });
    }
}
```


--- END FILE `release-content/0.15/release-notes/13669_Expose_winits_MonitorHandle.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13695_Start_a_builtin_postprocessing_stack_and_implement_chromat.md` ---


<!-- Start a built-in postprocessing stack, and implement chromatic aberration in it. -->
<!-- https://github.com/bevyengine/bevy/pull/13695 -->

We've added [chromatic aberration](https://en.wikipedia.org/wiki/Chromatic_aberration), which is a common postprocessing effect that simulates lenses that fail to focus all colors of light to a single point. It's often used for impact effects and/or horror games. Our implementation uses the technique from Inside (Gjøl & Svendsen 2016), which allows the developer to customize the particular color pattern to achieve different effects.

![chromatic aberration](chromatic_aberration.png)

To use it, add the [`ChromaticAberration`](https://docs.rs/bevy/0.15/bevy/core_pipeline/post_process/struct.ChromaticAberration.html) component to your camera:

```rust
commands.spawn((Camera3d::default(), ChromaticAberration));
```

--- END FILE `release-content/0.15/release-notes/13695_Start_a_builtin_postprocessing_stack_and_implement_chromat.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13741_Stable_interpolation_and_smooth_following.md` ---


When animating cameras or programming unit AI (not that kind of AI!), moving something continuously towards a target is an essential basic operation.
Simply [lerping] to the target seems easy enough, but as [Freya Holmer explains],
making sure that this interpolation is timestep independent is both vital and surprisingly tricky.

We've done the math for you; you just need to use the [`StableInterpolate`] trait's `interpolate_stable` and `smooth_nudge` methods
and tune the `decay_rate` parameter to really optimize your _game feel_.
Fear not: it even works on quaternions!
Stable, smooth camera controllers have never been easier.

[lerping]: https://en.wikipedia.org/wiki/Linear_interpolation
[Freya Holmer explains]: https://www.youtube.com/watch?v=LSNQuFEDOyQ
[`StableInterpolate`]: https://docs.rs/bevy/0.15/bevy/math/trait.StableInterpolate.html


--- END FILE `release-content/0.15/release-notes/13741_Stable_interpolation_and_smooth_following.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13818_Created_an_EventMutator_for_when_you_want_to_mutate_an_eve.md` ---


<!-- Created an EventMutator for when you want to mutate an event before reading -->
<!-- https://github.com/bevyengine/bevy/pull/13818 -->

<!-- TODO -->

When working with complex event-driven logic, you may find that you want to conditionally modify events without changing their type or re-emitting them.
While this has always been possible, it was quite onerous:

```rust
// We need to manually track which events this system has read
// using a system-local `EventCursor`, previously called `ManualEventReader`.
fn mutate_events(mut events: ResMut<Events<MyEvent>>, mut local_cursor: Local<EventCursor<MyEvent>>){    
    for event in local_cursor.read_mut(&mut *events){
        event.some_mutation();
    }
}
```

Now, you can simply use the new [`EventMutator`] system param, which keeps track of this bookkeeping for you.

```rust
fn mutate_events(mut event_mutator: EventMutator<MyEvent>>){    
    for event in event_mutator.read(){
        event.some_mutation();
    }
}
```

[`EventMutator`]: https://docs.rs/bevy/0.15/bevy/ecs/event/struct.EventMutator.html

--- END FILE `release-content/0.15/release-notes/13818_Created_an_EventMutator_for_when_you_want_to_mutate_an_eve.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13912_featgltf_add_name_component_to_gltf_mesh_primitive.md` ---


The glTF 3D model file format allows a single mesh to be associated with multiple materials. For example, a teapot may consist of a single mesh, yet each part may have a different material. When a single mesh is assigned multiple materials, it is divided into several primitive nodes, with each primitive assigned a unique material.

```json
{
  "meshes": [
    {
      "name": "Cube",
      "primitives": [
        {
          "attributes": { "POSITION": 0, "NORMAL": 1, "TEXCOORD_0": 2 },
          "indices": 3,
          "material": 0
        },
        {
          "attributes": { "POSITION": 4, "NORMAL": 5, "TEXCOORD_0": 6 },
          "indices": 7,
          "material": 1
        },
        {
          "attributes": { "POSITION": 8, "NORMAL": 9, "TEXCOORD_0": 10 },
          "indices": 11,
          "material": 2
        },
        {
          "attributes": { "POSITION": 12, "NORMAL": 13, "TEXCOORD_0": 14 },
          "indices": 15,
          "material": 3
        }
      ]
    }
  ]
}
```

In Bevy 0.14 and before, these primitives are named using the format "Mesh.Index", which complicates querying. A new component [GltfMaterialName](https://docs.rs/bevy/0.15/bevy/gltf/struct.GltfMaterialName.html) is now added to each primitive node that has a material, letting you quickly look up the primitive by using this component with the material name.

```rust
fn find_top_material_and_mesh(
    mut materials: ResMut<Assets<StandardMaterial>>,
    mut meshes: ResMut<Assets<Mesh>>,
    time: Res<Time>,
    mesh_materials: Query<(
        &MeshMaterial3d<StandardMaterial>,
        &Mesh3d,
        &GltfMaterialName,
    )>,
) {
    for (mat_handle, mesh_handle, name) in &mesh_materials {
        // locate the material and associated submesh by name
        if name.0 == "Top" {
            if let Some(material) = materials.get_mut(mat_handle) {
                // ...
            }

            if let Some(mesh) = meshes.get_mut(mesh_handle) {
                // ...
            }
        }
    }
}
```


--- END FILE `release-content/0.15/release-notes/13912_featgltf_add_name_component_to_gltf_mesh_primitive.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/13991_Minimal_Bubbling_Observers.md` ---


<!-- Minimal Bubbling Observers -->
<!-- https://github.com/bevyengine/bevy/pull/13991 -->

Virtually every pointer interaction (like mouse click) is rare (humans are slow!), and often requires a complex response.

This pattern is particularly useful in UI, where unhandled interactions are often intended for the pane that *contains* the entity that's on top, but is also valuable for in-game interactions: clicking on a unit's sword should select the unit!

To support this, we've extended the [`Event`] trait to include an associated `Traversal` type and an associated `AUTO_PROPAGATE` constant.
This behavior is opt-in: when you derive the `Event` type, these are set to `()` and `false` respectively.

For the [`Pointer<E>`] event type, we've chosen to implement this as:

```rust
impl <E> Event for Pointer<E>{
    type Traversal = &Parent;
    const AUTO_PROPAGATE: bool = true;
}
```

This means that, unless you call [`Trigger::propagate(false)`], pointer events will be bubbled up the hierarchy (accessing the `Entity` stored in the [`Parent`] component) until it reaches the entity root.

Any type that implements the [`Traversal`] trait can be used as the associated type and can access arbitrary read-only query data from the world.
While using the standard entity hierarchy is a sensible choice for *many* applications, bubbling can be used for arbitrary event propagation using your own [proto-relations].
Let us know what you cook up: user feedback is indispensable for building a better Bevy!

[`Event`]: https://docs.rs/bevy/0.15.0/bevy/ecs/event/trait.Event.html
[`Pointer<E>`]: https://docs.rs/bevy/0.15.0/bevy/picking/events/struct.Pointer.html
[`Trigger::propagate(false)`]: https://docs.rs/bevy/0.15.0/bevy/ecs/prelude/struct.Trigger.html#method.propagate
[`Parent`]: https://docs.rs/bevy/0.15.0/bevy/hierarchy/struct.Parent.html
[`Traversal`]: https://docs.rs/bevy/0.15.0/bevy/ecs/traversal/trait.Traversal.html
[proto-relations]: https://github.com/bevyengine/bevy/issues/3742


--- END FILE `release-content/0.15/release-notes/13991_Minimal_Bubbling_Observers.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14034_Track_source_location_in_change_detection.md` ---


<!-- Track source location in change detection -->
<!-- https://github.com/bevyengine/bevy/pull/14034 -->

Keeping track of when and where values are changed can be tricky in any complex program, and Bevy applications are no exception.
Thankfully, our unified ECS-backed data model makes it easy for us to add debugging tools that work right out of the box, with no user configuration required.

When you turn on the `track_change_detection` feature flag, Bevy will record the exact line of code that mutated your component or resource side-by-side with the value.
While this is obviously too expensive for ordinary use, it's a godsend for debugging tricky issues, as the value can be logged or read directly via the debugger of your choice.

As shown in the [`change_detection` example],
simply turn on the feature and call `my_component.changed_by()` on any [`Ref`], [`Mut`], [`Res`] or [`ResMut`] smart pointer to get a helpful string pointing you straight to the last line of code that mutated your data!

[`change_detection` example]: https://github.com/bevyengine/bevy/blob/main/examples/ecs/change_detection.rs
[`Ref`]: https://docs.rs/bevy/0.15.0/bevy/ecs/change_detection/struct.Ref.html
[`Mut`]: https://docs.rs/bevy/0.15.0/bevy/ecs/change_detection/struct.Mut.html
[`Res`]: https://docs.rs/bevy/0.15.0/bevy/ecs/change_detection/struct.Res.html
[`ResMut`]: https://docs.rs/bevy/0.15.0/bevy/ecs/change_detection/struct.ResMut.html


--- END FILE `release-content/0.15/release-notes/14034_Track_source_location_in_change_detection.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14044_Accumulated_mouse_inputs.md` ---


<!-- Accumulated mouse inputs -->
<!-- https://github.com/bevyengine/bevy/pull/14044 -->

"How much has the player moved their mouse this frame" is a natural question for games when the player is trying to aim or scroll a map.
Unfortunately, the operating system, and thus [`winit`], only provides us with a stream of events, in the form of individual [`MouseMotion`] events.

To get the summarized information (and the equivalent [`MouseScroll`]) information that most game systems care about, you had to sum them yourself.

```rust
pub fn accumulate_mouse_motion_system(
    mut mouse_motion_event: EventReader<MouseMotion>,
    mut accumulated_mouse_motion: ResMut<AccumulatedMouseMotion>,
) {
    let mut delta = Vec2::ZERO;
    for event in mouse_motion_event.read() {
        delta += event.delta;
    }
    accumulated_mouse_motion.delta = delta;
}
```

Bevy now does this for you, exposed in the new [`AccumulatedMouseMotion`] and [`AccumulatedMouseScroll`] resources.

[`winit`]: https://docs.rs/winit/latest/winit/
[`MouseMotion`]: https://docs.rs/bevy/0.15.0/bevy/input/mouse/struct.MouseMotion.html
[`MouseScroll`]: https://docs.rs/bevy/0.15.0/bevy/input/mouse/struct.MouseScroll.html
[`AccumulatedMouseMotion`]: https://docs.rs/bevy/0.15.0/bevy/input/mouse/struct.AccumulatedMouseMotion.html
[`AccumulatedMouseScroll`]: https://docs.rs/bevy/0.15.0/bevy/input/mouse/struct.AccumulatedMouseScroll.html


--- END FILE `release-content/0.15/release-notes/14044_Accumulated_mouse_inputs.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14049_Opportunistically_use_dense_iteration_for__archetypal_iter.md` ---


<!-- Opportunistically use dense iteration for  archetypal iteration -->
<!-- https://github.com/bevyengine/bevy/pull/14049 -->

In Bevy, components can be [stored] using one of two different mechanisms,
according to the [`StorageType`] set when implementing the [`Component`] trait.

Table storage is the traditional archetypal ECS storage, where component data is densely packed into tables of raw data with other entities who share the same set of components.
By contrast, sparse set storage keeps the component information out of the table, separating entities by archetype (the set of components they have) without fragmenting otherwise shared tables.

As a result of the map-like storage strategy used by sparse set components, they have faster insertion and removal speed, at the cost of slower random-access iteration.
This is a reasonable tradeoff, but historically, one that Bevy developers were unlikely to use.

That's because a long-standing bug caused iteration to use the slower, fallback sparse-style iteration if even one of the components in the query or its filters were sparse sets, regardless of whether or not this was necessary.
The fix has resulted in query iteration speeds that are between 1.8 and 3.5 times faster (when using parallel iteration) for these scenarios!

Iterating over the data in sparse set components is still relatively slow,
but they should finally be a good default choice for any repeatedly inserted or dataless components.

[stored]: https://docs.rs/bevy/0.15/bevy/ecs/component/trait.Component.html#associatedconstant.STORAGE_TYPE
[`StorageType`]: https://docs.rs/bevy/0.15/bevy/ecs/component/enum.StorageType.html
[`Component`]: https://docs.rs/bevy/0.15/bevy/ecs/component/trait.Component.html#associatedconstant.STORAGE_TYPE


--- END FILE `release-content/0.15/release-notes/14049_Opportunistically_use_dense_iteration_for__archetypal_iter.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14071_Uniform_mesh_sampling.md` ---


<!-- Uniform mesh sampling -->
<!-- https://github.com/bevyengine/bevy/pull/14071 -->

The surfaces of meshes can now be randomly sampled. This can be used for things like placing scenery or particle effects.

This consists of:

1. The `Mesh::triangles` method, which allows the extraction of a `Mesh`'s list of 
  triangles (`Triangle3d`).
2. The `UniformMeshSampler` type, which allows the creation of a [`Distribution`] that
  uniformly samples points in space (`Vec3`) from a collection of triangles.

The functionality comes from putting these together:

```rust
let mut rng = StdRng::seed_from_u64(8765309);

// Get an iterator over triangles in the mesh. This can fail if the mesh has
// the wrong format or if its vertex/index data is malformed.
let triangles = my_mesh.triangles().unwrap();

// Construct the distribution. This can fail in some cases - most notably if 
// the mesh surface has zero area.
let distribution = UniformMeshSampler::try_new(triangles).unwrap();

// Get 1000 points uniformly sampled from the surface of the mesh.
let samples: Vec<Vec3> = distribution.sample_iter(&mut rng).take(1000).collect();
```

[`Distribution`]: https://docs.rs/rand/0.8.5/rand/distributions/trait.Distribution.html


--- END FILE `release-content/0.15/release-notes/14071_Uniform_mesh_sampling.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14099_Allow_volumetric_fog_to_be_localized_to_specific_optionally.md` ---


<!-- Allow volumetric fog to be localized to specific, optionally voxelized, regions. -->
<!-- https://github.com/bevyengine/bevy/pull/14099 -->

**Bevy 0.15** adds the concept of "fog volumes". These are entities with the [`FogVolume`] component, which defines a bounding box for fog, which can be scaled and positioned to define where the fog will be rendered.

A camera with the [`VolumetricFog`] component will render any [`FogVolume`] entities in its view. Fog volumes can also define a density texture, which is a 3D texture of voxels that specify the density of the fog at each point:

![fog volume](fog_volume.png)

[`FogVolume`] has a `density_texture_offset`, which allows the 3D texture to be "scrolled". This allows effects such as clouds "passing through" the volume:

<video controls><source src="scrolling_fog.mp4" type="video/mp4"/></video>

[`FogVolume`]: https://docs.rs/bevy/0.15.0/bevy/pbr/struct.FogVolume.html
[`VolumetricFog`]: https://docs.rs/bevy/0.15.0/bevy/pbr/struct.VolumetricFog.html


--- END FILE `release-content/0.15/release-notes/14099_Allow_volumetric_fog_to_be_localized_to_specific_optionally.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14106_Cyclic_splines.md` ---


<!-- Cyclic splines -->
<!-- https://github.com/bevyengine/bevy/pull/14106 -->

Most cubic spline constructions now support creating a closed loop instead of just
a path, if desired. This can be convenient for constructing things like periodic
paths for NPCs or other game entities.

The only difference is that `to_curve_cyclic` must be called in place of `to_curve`.
The supported spline constructions are:
- Hermite splines (`CubicHermite`),
- Cardinal splines (`CubicCardinalSpline`),
- B-splines (`CubicBSpline`),
- Linear splines (`LinearSpline`).

![A closed loop constructed using a cubic cardinal spline][cyclic-spline]

[cyclic-spline]: cyclic-spline.png


--- END FILE `release-content/0.15/release-notes/14106_Cyclic_splines.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14212_Component_Lifecycle_Hook__Observer_Trigger_for_replaced_va.md` ---


<!-- Component Lifecycle Hook & Observer Trigger for replaced values -->
<!-- https://github.com/bevyengine/bevy/pull/14212 -->

Bevy 0.14 introduced [Component Lifecycle Hooks and Observers](https://bevy.org/news/bevy-0-14/#ecs-hooks-and-observers),
and included several built-in observer triggers for each way that components could be added to or removed from entities: `OnAdd`, `OnInsert` and `OnRemove`.
However, there was a hole in this API. While `OnRemove` is a counterpart to `OnAdd`, `OnInsert` had no such counterpart,
meaning certain operations had no corresponding lifecycle hook or observer trigger:

```rust
use bevy::{
    ecs::component::{ComponentHooks, StorageType},
    prelude::{Commands, Component, Deref, DerefMut, Entity, Query, Resource},
    utils::HashMap,
};

#[derive(Hash, PartialEq, Eq, Clone, Copy)]
struct SomeId(u32);

#[derive(Resource, Deref, DerefMut)]
struct EntityLookupById(HashMap<SomeId, Entity>);

impl Component for SomeId {
    const STORAGE_TYPE: StorageType = StorageType::Table;

    fn register_component_hooks(hooks: &mut ComponentHooks) {
        hooks
            .on_insert(|mut world, entity, _| {
                let this = *world.entity(entity).get::<Self>().unwrap();
                world
                    .resource_mut::<EntityLookupById>()
                    .insert(this, entity);
            })
            .on_remove(|mut world, entity, _| {
                let this = *world.entity(entity).get::<Self>().unwrap();
                world.resource_mut::<EntityLookupById>().remove(&this);
            });
    }
}

fn some_system(mut commands: Commands, query: Query<(Entity, &SomeId)>) {
    let mut iter = query.iter();

    let Some((a_entity, _)) = iter.next() else {
        return;
    };

    let Some((_, &b_id)) = iter.next() else {
        return;
    };

    commands.entity(a_entity).insert(b_id);
}
```

In this example, the system inserts a new component value onto an entity that already has one,
which overwrites the previous component value.
This causes the `on_insert` lifecycle hook to run for the new value,
but the `on_remove` hook doesn't run for the previous value.
As a result, the hashmap entry for the previous ID value is still present, even though it has been replaced.

Bevy 0.15 introduces a new component lifecycle hook and observer trigger for this scenario: `on_replace`/`OnReplace`.
This hook runs just before the `on_remove` hook in all cases,
and additionally runs in the aforementioned scenario where a component value is entirely replaced.
The hook runs just before the replacement occurs,
letting you access the soon-to-be-dropped value to perform bookkeeping and cleanup.

The above example would be fixed by simply replacing the `on_remove` hook with the new `on_replace` hook:

```diff
21                     .resource_mut::<EntityLookupById>()                                          
22                     .insert(this, entity);       
23             })                                   
-24             .on_remove(|mut world, entity, _| {  
+24             .on_replace(|mut world, entity, _| {
25                 let this = *world.entity(entity).get::<Self>().unwrap();                         
26                 world.resource_mut::<EntityLookupById>().remove(&this);                          
27             });                                  
```


Note that it *does not* run if a component value is merely *mutated* - in those cases you want to use change detection instead.



--- END FILE `release-content/0.15/release-notes/14212_Component_Lifecycle_Hook__Observer_Trigger_for_replaced_va.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14257_Pack_multiple_vertex_and_index_arrays_together_into_growab.md` ---


<!-- Pack multiple vertex and index arrays together into growable buffers. -->
<!-- https://github.com/bevyengine/bevy/pull/14257 -->

<!-- TODO -->

**Bevy 0.15** changes the way meshes are stored on the GPU to greatly improve CPU performance. Instead of using separate vertex and index buffers for every mesh as is done in Bevy 0.14, now they are coalesced respectively into 'slabs' of configurable size. This cuts down on how frequently we need to change bind groups, winning us up to 2x speedups!

The `MeshAllocatorSettings` resource allows tuning slab sizes, growth rate, and cut-offs to best fit your application's needs. The defaults should already be a significant win for most scenes.

WebGL2 does not support packing vertex buffers together, so only index buffers get combined on this platform.

Some measurements on the [Bistro] scene:

Overall frame time improves from 8.74 ms to 5.53 ms (1.58x speedup)
Render system time improves from 6.57 ms to 3.54 ms (1.86x speedup)
Opaque pass time improves from 4.64 ms to 2.33 ms (1.99x speedup)

[Bistro]: https://github.com/DGriffin91/bevy_bistro_scene
[`MeshAllocatorSettings`]: https://docs.rs/bevy/0.15/bevy/render/mesh/allocator/struct.MeshAllocatorSettings.html


--- END FILE `release-content/0.15/release-notes/14257_Pack_multiple_vertex_and_index_arrays_together_into_growab.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14269_Basic_isometry_types.md` ---


<!-- Basic isometry types -->
<!-- https://github.com/bevyengine/bevy/pull/14269 -->

Vectors and quaternions are commonly used in 3D to describe relative and absolute positions and orientations of objects.
However, when performing more complicated transformations, such as going from a global frame of reference to an object's local space and back,
or composing multiple translations and rotations together, they can get rather unwieldy and difficult to reason about.

The new [`Isometry2d`] and [`Isometry3d`] types introduced in **Bevy 0.15** are a simple yet powerful tool for efficiently describing
these kinds of transformations. An isometry represents a rotation followed by a translation, similar to a [`Transform`] with a scale of 1.

```rust
// Create an isometry from a translation and rotation.
let iso1 = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));

// Transform a point using the isometry.
let point = Vec3::new(4.0, 4.0, 4.0);
let result = iso1.transform_point(point); // or iso1 * point
assert_relative_eq!(result, Vec3::new(-2.0, 5.0, 7.0));

// Create another isometry.
let iso2 = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));

// Compute the relative translation and rotation.
let relative_iso = iso1.inverse_mul(iso2); // or iso1.inverse() * iso2
```

Isometries are most useful in mathematical contexts where scaling is not desired, such as when describing relative positions of objects
for intersection tests and other geometric queries. However, they are now also used in some APIs, including gizmo methods:

```rust
// Specify rectangle position and orientation with an isometry.
gizmos.rect_2d(Isometry2d::new(translation, Rot2::degrees(45.0)), Vec2::splat(250.0), CYAN);

// Many methods take an `impl Into<Isometry3d>`, so it is enough to only provide
// translation or rotation if a full isometry isn't needed.
gizmos.sphere(translation, 1.0, PURPLE);
```

[`Transform`] and [`GlobalTransform`] can also be converted to an [`Isometry3d`] using the [`to_isometry`] method,
providing a convenient way to use these APIs when you already have access to entity transforms.

Note that unlike [`Transform`], these isometry types are *not* components. They are purely convenience types for math.

[`Isometry2d`]: https://docs.rs/bevy/0.15/bevy/math/struct.Isometry2d.html
[`Isometry3d`]: https://docs.rs/bevy/0.15/bevy/math/struct.Isometry3d.html
[`Transform`]: https://docs.rs/bevy/0.15/bevy/transform/components/struct.Transform.html
[`GlobalTransform`]: https://docs.rs/bevy/0.15/bevy/transform/components/struct.GlobalTransform.html
[`to_isometry`]: https://docs.rs/bevy/0.15/bevy/transform/components/struct.Transform.html#method.to_isometry


--- END FILE `release-content/0.15/release-notes/14269_Basic_isometry_types.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14284_Add_custom_cursors.md` ---


<!-- Add custom cursors -->
<!-- https://github.com/bevyengine/bevy/pull/14284 -->

Previously Bevy's native window cursors supported only a fixed set of built-in OS cursors. Bevy now also supports arbitrary images as "custom cursors". Custom cursors still use native facilities of the OS, which allows them to stay perfectly responsive even when the frame rate of the application drops.

Insert the [`CursorIcon`] component with a [`CustomCursor`] to set a [`Window`] entity's cursor:

```rust
commands
    .entity(window)
    .insert(CursorIcon::Custom(CustomCursor::Image {
        handle: asset_server.load("cursor_icon.png"),
        hotspot: (5, 5),
    }));
```

[`CursorIcon`]: https://docs.rs/bevy/0.15/bevy/winit/cursor/enum.CursorIcon.html
[`CustomCursor`]: https://docs.rs/bevy/0.15/bevy/winit/cursor/enum.CustomCursor.html
[`Window`]: https://docs.rs/bevy/0.15/bevy/prelude/struct.Window.html

--- END FILE `release-content/0.15/release-notes/14284_Add_custom_cursors.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14630_A_Curve_trait_for_general_interoperation__Part_I.md` ---


<!-- A Curve trait for general interoperation — Part I -->
<!-- https://github.com/bevyengine/bevy/pull/14630 -->

The new [`Curve<T>`] trait provides a shared interface for curves, describing how values of type `T` change as we vary a `f32` parameter `t` over some domain.

What's changing, and the domain that it's changing *over* are both incredibly flexible.
You might choose to set the generic parameter `T` to anything from position, to damage, to colors (like we did to create a powerful abstraction for [color gradients](https://docs.rs/bevy/0.15.0/bevy/color/struct.ColorCurve.html)).

The progress parameter `t` often represents time (like in animation), but it can also represent things like
a fraction/percentage of progress between a starting and ending value or
distance (such as curves that are mapped into 2D or 3D space),

### Constructing Curves

Each curve may be defined in a variety of ways. For example, a curve may be:

* defined by a function
* interpolated from samples
* constructed using splines
* produced by an easing function

Take a look at the constructors on the [`Curve<T>`] trait for more details.

### Modifying curves

Procedurally modifying curves is a powerful tool for both creating curves with the desired behavior and dynamically altering them.

Bevy 0.15 provides a number of flexible adaptors for taking an existing curve and
modifying its output and/or parametrization.

For example:

```rust
let timed_angles = [
  (0.0, 0.0),
  (1.0, -FRAC_PI_2),
  (2.0, 0.0),
  (3.0, FRAC_PI_2),
  (4.0, 0.0)
];

// A curve interpolating our list of (time, angle)-pairs. At each time, it
// produces the angle, so it is a `Curve<f32>` parametrized over `[0, 4]`.
let angle_curve = UnevenSampleAutoCurve::new(timed_angles).unwrap();

// Interpret these angles as angles of rotation for a `Curve<Rot2>`.
let rotation_curve = angle_curve.map(Rot2::radians);

// Change the parameterizing interval so that the whole loop happens in
// only 1 second instead of 4.
let fast_rotation_curve = rotation_curve.reparametrize_linear(Interval::UNIT).unwrap();
```

A number of other adaptors are available. For instance:

* a curve may be reversed, repeated, or ping-ponged
* two curves may be chained together to form a longer curve
* two curves may be zipped together to form a curve valued in tuples

### Sampling from curves

Sampling is the process of asking "what is the value of this curve at some particular value of `t`".
To do so, just call [`Curve::sample`]!

Much like how vector graphics can be rasterized into pixels, curves can be rasterized into regular, discretized intervals.
By resampling into an approximation derived from sample interpolation
on the original curve, we can make curves of diverse origin
uniform at the level of data.

While this may seem exotic, this technique is critical for serializing curves or
approximating properties via numerical methods.

```rust
// A curve defined by a function, which may be challenging to store as data.
let exponential_curve = FunctionCurve::new(
  interval(0.0, 10.0).unwrap(), 
  |t| f32::exp(2.0 * t)
);

// A curve approximating the original by resampling on 100 segments.
// Internally, this just holds the samples and the parameter interval.
let raster_curve = exponential_curve.resample_auto(100).unwrap();
```

[`Curve<T>`]: https://docs.rs/bevy/0.15.0/bevy/math/trait.Curve.html
[`Curve::sample`]: https://docs.rs/bevy/0.15.0/bevy/math/trait.Curve.html#method.sample


--- END FILE `release-content/0.15/release-notes/14630_A_Curve_trait_for_general_interoperation__Part_I.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14663_shader_storage_buffer.md` ---


A new asset `ShaderStorageBuffer` has been added to simplify working with storage buffers in custom materials and compute shaders. Storage buffers are large, GPU-accessible memory buffers designed for storing data that can be read from or written to by shaders. Unlike smaller, more restricted uniform buffers, storage buffers allow you to store large amounts of data, making them perfect for general purpose tasks where large datasets need to be processed. Examples include managing complex data in physics simulations (like particle systems), holding the transformation data for thousands of objects in a scene, or storing procedural geometry information for dynamic terrain generation. Storage buffers are particularly useful when different stages of the rendering pipeline (such as compute shaders and rendering passes) need to share and update large amounts of data efficiently.

```rust
#[derive(Asset, TypePath, AsBindGroup, Debug, Clone)]
struct CustomMaterial {
    #[storage(0, read_only)]
    colors: Handle<ShaderStorageBuffer>,
}

fn setup(
    mut buffers: ResMut<Assets<ShaderStorageBuffer>>,
    mut materials: ResMut<Assets<CustomMaterial>>,
) {
    // Example data for the storage buffer
    let color_data: Vec<[f32; 4]> = vec![
        [1.0, 0.0, 0.0, 1.0],
        [0.0, 1.0, 0.0, 1.0],
        [0.0, 0.0, 1.0, 1.0],
        [1.0, 1.0, 0.0, 1.0],
        [0.0, 1.0, 1.0, 1.0],
    ];

    let colors = buffers.add(ShaderStorageBuffer::from(color_data));

    // Create the custom material with the storage buffer
    let custom_material = CustomMaterial { colors };

    materials.add(custom_material);
}
```

By declaring `Handle<ShaderStorageBuffer>` on the material using `AsBindGroup`, this buffer can now be accessed in the shader:

```wgsl
@group(2) @binding(0) var<storage, read> colors: array<vec4<f32>, 5>;
```


--- END FILE `release-content/0.15/release-notes/14663_shader_storage_buffer.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14791_Required_Components.md` ---


![Graph image of sprite component requiring transform component](required_component.svg)

First: buckle up because **Required Components** is one of the most profound improvements to the Bevy API surface since Bevy was first released.

Since Bevy's creation, `Bundle` has been our abstraction for spawning an entity of a given "type". A `Bundle` is just a Rust type, where each field is a `Component`:

```rust
#[derive(Bundle)]
struct PlayerBundle {
    player: Player,
    team: Team,
    sprite: Sprite,
    transform: Transform,
    global_transform: GlobalTransform,
    visibility: Visibility,
    inherited_visibility: InheritedVisibility,
    view_visibility: ViewVisibility,
}
```

Then whenever a new player needs to be spawned, developers would initialize and insert a `PlayerBundle` on an entity:

```rust
commands.spawn(PlayerBundle {
    player: Player { 
        name: "hello".into(),
        ..default()
    },
    team: Team::Blue,
    ..default()
});
```

This inserts all of the components in `PlayerBundle`, including the ones not explicitly being set. The `Bundle` concept is functional (it has gotten us this far), but it is also far from ideal:

1. It is an entirely new set of APIs that developers need to learn. Someone that wants to spawn a `Player` entity needs to know that `PlayerBundle` exists.
2. Bundle APIs don't exist at runtime after insertion ... they are an additional spawn-only concept that developers need to think about. You don't write `PlayerBundle` behaviors. You write `Player` behaviors.
3. The `Player` component _needs_ the components in `PlayerBundle` to function as a `Player`. Spawning `Player` on its own is possible, and it likely (depending on the implementation) wouldn't function as intended.
4. Bundles are always "flat" (by convention). The person defining the `Player` component needs to define _all of the component dependencies_. `Sprite` needs `Transform` and `Visibility`, `Transform` needs `GlobalTransform`, `Visibility` needs `InheritedVisibility` and `ViewVisibility`. This lack of "dependency inheritance" makes defining bundles much harder and error prone than it needs to be. It requires consumers of APIs to be intimately aware of what amounts to implementation details. And when these details change, _the developer of the `Bundle` needs to be aware and update the `Bundle` accordingly_. Nested bundles are supported, but they are a _pain_ for users to work with and we have disallowed them in upstream Bevy bundles for a while now.
5. `PlayerBundle` is effectively defined by the needs of the `Player` component, but when spawning it is possible to _never mention the `Player` symbol_. Ex: `commands.spawn(PlayerBundle::default())`. This is odd given that `Player` is the "driving concept".
6. Bundles introduce significant "stutter" to the API. Notice the `player: Player` and `team: Team` in the example above.
7. Bundles introduce additional (arguably excessive) nesting and `..default()` usage.

Every one of these points has a sizable impact on what it feels like to use Bevy on a day-to-day basis. In **Bevy 0.15** we've landed **Required Components**, which solves these problems by fundamentally rethinking how this all works.

**Required Components** are the first step in our [Next Generation Scene / UI](https://github.com/bevyengine/bevy/discussions/14437) effort, which aims to make Bevy a best-in-class app / scene / UI development framework. **Required Components** stand on their own as a direct improvement to Bevy developers' lives, but they also help set the stage for making Bevy's upcoming next generation scene system (and the upcoming Bevy Editor) something truly special.

### What are they?

**Required Components** enable developers to define which components a given component needs:

```rust
#[derive(Component, Default)]
#[require(Team, Sprite)]
struct Player {
    name: String,
}
```

When the `Player` component is inserted, its **Required Components** _and the components required by those components_ are automatically inserted as well!

```rust
commands.spawn(Player::default());
```

The code above automatically inserts `Team` and `Sprite`. `Sprite` requires `Transform` and `Visibility`, so those are automatically inserted as well. Likewise `Transform` requires `GlobalTransform` and `Visibility` requires `InheritedVisibility` and `ViewVisibility`.

This code produces the same result as the `PlayerBundle` code in the previous section:

```rust
commands.spawn((
    Player {
        name: "hello".into(),
        ..default()
    },
    Team::Blue,
))
```

Much better right? The `Player` type is easier and less error prone to define, and spawning it takes less typing and is easier to read.

### Efficiency

We've implemented **Required Components** in a way that makes them effectively "free":

1. Required Components are only initialized and inserted if the caller did not insert them manually. No redundancy!
2. Required Components are inserted alongside the normal components, meaning (for you ECS nerds out there) there are no additional archetype changes or table moves. From this perspective, the Required Components version of the `Player` example is identical to the `PlayerBundle` approach, which manually defines all of the components up front.
3. Required Components are cached on the archetype graph, meaning computing what required components are necessary for a given type of insert only happens once.

### Component Initialization

By default, **Required Components** will use the `Default` impl for the component (and fail to compile if one does not exist):

```rust
#[derive(Component)]
#[require(Team)] // Team::Red is the default value
struct Player {
    name: String,
}

#[derive(Component, Default)]
enum Team {
    #[default]
    Red,
    Blue,
}
```

This can be overridden by passing in a function that returns the component:

```rust
#[derive(Component)]
#[require(Team(blue_team))]
struct Player {
    name: String,
}

fn blue_team() -> Team {
    Team::Blue
}
```

To save space, you can also pass a closure to the require directly:

```rust
#[derive(Component)]
#[require(Team(|| Team::Blue))]
struct Player {
    name: String,
}
```

### Isn't this a bit like inheritance?

**Required Components** _can_ be considered a form of inheritance. But it is notably _not_ traditional object-oriented inheritance. Instead it is "inheritance by composition". A `Button` widget can (and should) require `Node` to make it a "UI node". In a way, a `Button` "is a" `Node` like it would be in traditional inheritance. But unlike traditional inheritance:

1. It is expressed as a "has a" relationship, not an "is a" relationship.
2. `Button` and `Node` are still two entirely separate types (with their own data), which you query for separately in the ECS.
3. A `Button` can require more components in _addition_ to `Node`. You aren't limited to "straight line" standard object-oriented inheritance. Composition is still the dominating pattern.
4. You don't _need_ to require components to add them. You can still tack on whatever additional components you want during spawn to add behaviors in the normal "composition style".

### What is happening to Bundles?

The `Bundle` trait will continue to exist, and it is still the fundamental building block for insert APIs (tuples of components still implement `Bundle`). Developers are still free to define their own custom bundles using the `Bundle` derive. Bundles play nicely with **Required Components**, so you can use them with each other.

That being said, as of Bevy **0.15** we have deprecated all built-in bundles like `SpriteBundle`, `NodeBundle`, `PbrBundle`, etc. in favor of **Required Components**. In general, **Required Components** are now the preferred / idiomatic approach. We encourage Bevy plugin and app developers to port their bundles over to **Required Components**.

### Porting Bevy to Required Components

As mentioned above, _all_ built-in Bevy bundles have been deprecated in favor of **Required Components**. We've also made API changes to take advantage of this new paradigm. This does mean breakage in a few places, but the changes are so nice that we think people won't complain too much :)

In general, we are moving in the direction specified by our [Next Generation Scene / UI](https://github.com/bevyengine/bevy/discussions/14437) document. Some general design guidelines:

1. When spawning an entity, generally there should be a "driving concept" component.  When implementing a new entity type / behavior, give it a concept name ... that is the name of your "driving component" (ex: the "player" concept is a `Player` component). That component should require any additional components necessary to perform its functionality.
2. People should think directly in terms of components and their fields when spawning. Prefer using component fields directly on the "concept component" as the "public API" for the feature.
3. Prefer simple APIs / don't over-componentize. By default, if you need to attach new properties to a concept, just add them as fields to that concept's component. Only break out new components / concepts when you have a good reason, and that reason is motivated by user experience or performance (and weight user experience highly). If a given "concept" (ex: a `Sprite`) is broken up into 10 components, that is _very_ hard for users to reason about and work with.
4. Instead of using Asset handles directly as components, define new components that hold the necessary handles. Raw asset handles as components were problematic for a variety of reasons (a big one is that you can't define context-specific **Required Components** for them), so we have removed the `Component` implementation for `Handle<T>` to encourage (well ... force) people to adopt this pattern.

#### UI

Bevy UI has benefitted tremendously from **Required Components**. UI nodes require a variety of components to function, and now all of those requirements are consolidated on `Node`. Defining a new UI node type is now as simple as adding `#[require(Node)]` to your component.

```rust
#[derive(Component)]
#[require(Node)]
struct MyNode;

commands.spawn(MyNode);
```

The `Style` component fields have been moved into `Node`. `Style` was never a comprehensive "style sheet", but rather just a collection of properties shared by all UI nodes. A "true" ECS style system would style properties _across_ components (`Node`, `Button`, etc), and we [do have plans to build a true style system](https://github.com/bevyengine/bevy/discussions/14437). All "computed" node properties (such as the size of the node after it has been laid out) have been moved to the `ComputedNode` component.

This change has made spawning UI nodes in Bevy _much_ cleaner and clearer:

```rust
commands.spawn(Node {
    width: Val::Px(100.),
    ..default()
});
```

Compare that to what it was before!

```rust
commands.spawn(NodeBundle {
    style: Style {
        width: Val::Px(100.),
        ..default()
    },
    ..default()
})
```

UI components like `Button`, `ImageNode` (previously `UiImage`), and `Text` now require `Node`. Notably, `Text` has been reworked to be easier to use and more component driven (we'll cover this more in the next section):

```rust
commands.spawn(Text::new("Hello there!"));
```

`MaterialNode<M: UiMaterial>` is now a proper component for "UI material shaders", and it also requires `Node`:

```rust
commands.spawn(MaterialNode(my_material));
```

#### Text

Bevy's Text API has been reworked to be simpler and more component driven. There are still two primary text components: `Text` (the UI text component) and `Text2d` (the world-space 2D text component).

The first thing that has changed is that these primary components are literally _just_ a `String` newtype:

```rust
commands.spawn(Text("hello".to_string()))
commands.spawn(Text::new("hello"))
commands.spawn(Text2d("hello".to_string()))
commands.spawn(Text2d::new("hello"))
```

Spawn one of these components, and you have text! Both of these components now require the following components:

* `TextFont`: configures the font / size
* `TextColor`: configures the color
* `TextLayout`: configures how the text is laid out.

`Text`, which is the UI component, also requires `Node` because it _is_ a node. Similarly, `Text2d` requires a `Transform` because it is positioned in world space.

Both `Text` and `Text2d` are a standalone "block" of text. These top level text components also contribute a single "span" of text, which is added to the "block". If you need "rich text" with multiple colors / fonts / sizes, you can add `TextSpan` entities as children of either `Text` or `Text2d`. `TextSpans` use the same `TextFont` / `TextLayout` components to configure text. Each `TextSpan` will contribute its span to its parent text:

```rust
// The `Text` UI node will render "hello world!", where "hello" is red and "world!" is blue
commands.spawn(Text::default())
    .with_child((
        TextSpan::new("hello"),
        TextColor::from(RED),
    ))
    .with_child((
        TextSpan::new(" world!"),
        TextColor::from(BLUE),
    ));
```

This produces the exact same output, but uses the "default" span on the top-level `Text` component:

```rust
commands.spawn((
    Text::new("hello"),
    TextColor::from(RED),
))
.with_child((
    TextSpan::new(" world!"),
    TextColor::from(BLUE),
));
```

This "entity driven" approach to text spans replaces the "internal span array" approach used in previous Bevy versions. This yields significant benefits. First, it lets you use the normal Bevy ECS tools, such as marker components and queries, to mark a text span and access it directly. This is much easier (and more resilient) than using indices in an array, which are hard to guess and unstable as the array contents change:

```rust
#[derive(Component)]
struct NameText;

commands.spawn(Text::new("Name: "))
    .with_child((
        TextSpan::new("Unknown"),
        NameText, 
    ));

fn set_name(mut names: Query<&mut TextSpan, With<NameText>>) {
    names.single_mut().0 = "George".to_string();
}
```

Text spans as entities play nicer with Bevy Scenes (including the upcoming [Next Generation Scene / UI](https://github.com/bevyengine/bevy/discussions/14437) system), and allow it to integrate nicely with existing tools like entity inspectors, animation systems, timers, etc.

#### Sprites

Sprites are largely unchanged. In addition to the **Required Components** port (`Sprite` now requires `Transform` and `Visibility`), we've also done some component consolidation. The `TextureAtlas` component is now an optional `Sprite::texture_atlas` field. Likewise the `ImageScaleMode` component is now a `Sprite::image_mode` field. Spawning sprites is now super simple!

```rust
commands.spawn(Sprite {
    image: assets.load("player.png"),
    ..default()
});
```

#### Transforms

`Transform` now requires `GlobalTransform`. If you want your entity to have "hierarchical transforms", require `Transform` (and it will add `GlobalTransform`). If you just want your entity to have a "flat" global transform, require `GlobalTransform`.

Most Bevy components that are intended to exist in world space now require `Transform`.

#### Visibility

The `Visibility` component now requires `InheritedVisibility` and `ViewVisibility`, meaning that you can now just require `Visibility` if you want your entity to be visible. Bevy's built-in "visible" components, such as `Sprite`, require `Visibility`.

#### Cameras

The `Camera2d` and `Camera3d` components now each require `Camera`. `Camera` requires the various camera components (`Frustum`, `Transform`, etc.). This means that you can spawn a 2D or 3D camera like this:

```rust
commands.spawn(Camera2d::default());
commands.spawn(Camera3d::default());
```

`Camera2d` and `Camera3d` also require the components that set the relevant default render graphs and enable the default render features relevant to the 2D and 3D contexts (respectively).

You can of course explicitly set the values of the other components:

```rust
commands.spawn((
    Camera3d::default(),
    Camera {
        hdr: true,
        ..default()
    },
    Transform {
        translation: Vec3::new(1.0, 2.0, 3.0),
        ..default()
    },
));
```

Bevy has a number of components that enable "camera render features": `MotionBlur`, `TemporalAntiAliasing`, `ScreenSpaceAmbientOcclusion`, and `ScreenSpaceReflections`. Some of these camera features depend on _other_ camera feature components to function. These dependencies are now expressed and enforced using **Required Components**. For example, `MotionBlur` now requires `DepthPrepass` and `MotionVectorPrepass`. This makes enabling camera features much easier!

```rust
commands.spawn((
    Camera3d::default(),
    MotionBlur,
))
```

#### Meshes

The old mesh approach relied on adding `Handle<Mesh>` and `Handle<M: Material>` components directly (via `PbrBundle` and `MaterialMeshBundle`), neither of which were compatible with required components.

In **Bevy 0.15** you use `Mesh3d` and `MeshMaterial3d<M: Material>` to render a mesh in 3D:

```rust
commands.spawn((
    Mesh3d(mesh),
    MeshMaterial3d(material),
));
```

`Mesh3d` requires `Transform` and `Visibility`.

There are also 2D equivalents:

```rust
commands.spawn((
    Mesh2d(mesh),
    MeshMaterial2d(material),
));
```

#### Meshlets

Bevy's "virtual geometry" implementation (similar to Nanite), has also been ported. It uses the same pattern as `Mesh3d` and `Mesh2d`:

```rust
commands.spawn((
    MeshletMesh3d(mesh),
    MeshMaterial3d(material),
));
```

#### Lights

The light port involved no major changes to the component structure. All of the spatial light types (`PointLight`, `DirectionalLight`, `SpotLight`) now require `Transform` and `Visibility`, and each light component requires the relevant light-specific configuration components (ex: `PointLight` requires `CubemapFrusta` and `CubemapVisibleEntities`).

Spawning a light of a given type is now as simple as:

```rust
commands.spawn(PointLight {
    intensity: 1000.0,
    ..default()
});
```

The `LightProbe` component now also requires `Transform` and `Visibility`.

#### Volumetric Fog

The `FogVolume` component now requires `Transform` and `Visibility`, meaning you can now add volumetric fog like this:

```rust
commands.spawn(FogVolume {
    density_factor: 0.2,
    ..default()
});
```

#### Scenes

Scenes previously used raw `Handle<Scene>` components, spawned via `SceneBundle`. **Bevy 0.15** introduces the `SceneRoot` component, which wraps the scene handle and requires `Transform` and `Visibility`:

```rust
commands.spawn(SceneRoot(some_scene));
```

Likewise, there is now `DynamicSceneRoot`, which is exactly like `SceneRoot`, but it wraps `Handle<DynamicScene>` instead of `Handle<Scene>`.

#### Audio

Audio also used a raw `Handle<AudioSource>` spawned via an  `AudioBundle`. We've added a new `AudioPlayer` component, which will trigger audio playback when spawned:

```rust
command.spawn(AudioPlayer(assets.load("music.mp3")));
```

`AudioPlayer` requires the `PlaybackSettings` component.

Non-standard audio from arbitrary `Decodable` trait impls can use the `AudioSourcePlayer` component, which also requires `PlaybackSettings`.  

### IDE Integration

**Required Components** play nicely with Rust Analyzer. You can "go to definition" / press `F12` on required components to navigate to where they are defined in code.

### Runtime Required Components

In some cases, developers without direct control over a component might want to add _additional_ **Required Components** on top of the ones provided directly on the type via `#[require(Thing)]`. This is supported!

```rust
// Make `Bird` require `Wings` with a `Default` constructor.
app.register_required_components::<Bird, Wings>();

// Make `Wings` require `FlapSpeed` with a custom constructor.
app.register_required_components_with::<Wings, FlapSpeed>(|| FlapSpeed::from_duration(1.0 / 80.0));
```

Note that only _adding_ Required Components is allowed. Removing Required Components from a type you do not own is explicitly not supported, as that could invalidate assumptions made upstream.

In general, this is intended to be used in very specific, targeted contexts, such as a physics plugin adding additional metadata to a core type it does not control. Adding a new component requirement could change the performance characteristics of the app or break it in unexpected ways. When in doubt, don't do it!


--- END FILE `release-content/0.15/release-notes/14791_Required_Components.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14817_SystemParamBuilder__Support_dynamic_system_parameters.md` ---


<!-- SystemParamBuilder - Support dynamic system parameters -->
<!-- https://github.com/bevyengine/bevy/pull/14817 -->

Bevy 0.14 introduced [the `SystemBuilder` type](https://bevy.org/news/bevy-0-14/#systembuilder) to allow systems to be created with dynamic queries.
In Bevy 0.15, this has been extended to many more types of system parameters!

The `SystemBuilder` type has been replaced with a `SystemParamBuilder<P>` trait to make it easier to compose builders.
Aggregates of parameters, including [tuples, `ParamSet`](https://github.com/bevyengine/bevy/pull/14050), [`Vec<T>`](https://github.com/bevyengine/bevy/pull/14821), and [custom parameters using `#[derive(SystemParam)]`](https://github.com/bevyengine/bevy/pull/14818), can now be used in dynamic systems.
For example, a `ParamSet<Vec<Query<FilteredEntityMut>>>` can be used to pass a variable number of dynamic queries that may conflict.

New [`FilteredResources` and `FilteredResourcesMut`](https://github.com/bevyengine/bevy/pull/15189) types can access a set of resources configured at runtime, similar to how the existing `FilteredEntityRef` and `FilteredEntityMut` access a set of components on one entity.

Finally, a new [`DynSystemParam`](https://github.com/bevyengine/bevy/pull/14817) type allows systems to use parameters of dynamic type and then downcast them.
This is especially useful for implementing part of a system with trait objects, where each trait implementation can use a different system parameter type.

Taken together, these can be used to build a system that runs a script defined at runtime, where the script needs a variable number of query and resource parameters.
Or, they can be used to build systems out of parts assembled at runtime!

```rust
fn buildable_system(
    query_a: Query<&A>,
    query_b: Query<&B>,
    queries_with_locals: Vec<(Query<FilteredEntityMut>, Local<usize>)>,
    mut dynamic_params: ParamSet<Vec<DynSystemParam>>,
    resources: FilteredResourcesMut,
) {
    // Parameters in a `ParamSet<Vec>` are accessed by index.
    let mut dyn_param_0: DynSystemParam = dynamic_params.get_mut(0);
    // Parameters in a `DynSystemParam` are accessed by downcasting to the original type.
    let param: Local<&str> = dyn_param_0.downcast_mut::<Local<&str>>().unwrap();
    // `FilteredResources` and `FilteredResourcesMut` have methods to get resources by type or by ID.
    let res: Ref<R> = resources.get::<R>().unwrap();
}

let param_builder = (
    // Parameters that don't need configuration can be built using `ParamBuilder` or its factory methods.
    ParamBuilder,
    ParamBuilder::query(),
    // A `Vec` of parameters can be built using a `Vec` of builders.
    vec![
        // A tuple of parameters can be built using a tuple of builders.
        (
            // Queries are built with a callback that supplies a `QueryBuilder` to configure the query.
            QueryParamBuilder::new(|builder| { builder.data::<&A>(); }),
            // Locals are built by passing the initial value for the local.
            LocalBuilder(123),
        ),
    ],
    // A `ParamSet` can be built for either a tuple or a `Vec`.
    ParamSetBuilder(vec![
        // A `DynSystemParam` is built using a builder for any type, and can be downcast to that type.
        DynParamBuilder::new(LocalBuilder("hello")),
        DynParamBuilder::new(ParamBuilder::resource::<R>()),
        // The type may be any system parameter, even a tuple or a `Vec`!
        DynParamBuilder::new((ParamBuilder::query::<&A>(), ParamBuilder::query::<&B>())),
    ]),
    // `FilteredResources` and `FilteredResourcesMut` are built with a callback
    // that supplies a builder to configure the resource access.
    FilteredResourcesMutParamBuilder::new(|builder| { builder.add_read::<R>(); }),
);

let system = param_builder
    .build_state(&mut world)
    .build_system(buildable_system);

// The built system is just like any other system, and can be added to a schedule.
schedule.add_systems(system);
```


--- END FILE `release-content/0.15/release-notes/14817_SystemParamBuilder__Support_dynamic_system_parameters.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14833_Rewrite_screenshots.md` ---


Screenshots can now be taken with a new observer based API that allows targeting any `RenderTarget` that can be used with a `Camera`, not just windows. 

```rust
// Capture the primary window
commands
    .spawn(Screenshot::primary_window())
    .observe(save_to_disk(path));

// Or a `Handle<Image>`
commands
    .spawn(Screenshot::image(render_target))
    .observe(save_to_disk(path));
```

The observer triggers with a `ScreenshotCaptured` event containing an Image that can be used for saving to disk, post-processing, or generating thumbnails. This flexible approach makes it easier to capture content from any part of your rendering pipeline, whether it’s a window, an off-screen render target, or a texture in a custom render pass.


--- END FILE `release-content/0.15/release-notes/14833_Rewrite_screenshots.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14838_bevy_reflect_add_Type_type.md` ---


Rust's [`TypeId`] is a unique identifier for a type, making it a perfect candidate for use as a
key in mappings and for checking whether two types are the same at runtime.
And since it's essentially just two `u64` values, it's extremely cheap to copy, compare, and hash.

One of the downsides to using `TypeId`, though, is that it doesn't contain any other information
about the type, including its name. This can make debugging somewhat frustrating as you can't
easily tell which type a `TypeId` corresponds to.

Since [`bevy_reflect`] makes heavy use of `TypeId`, 0.15 introduces a new type to help alleviate
the debugging issue while still maintaining the benefits of `TypeId`: [`Type`].

[`Type`] is a simple wrapper around `TypeId` that also stores the [`TypePathTable`].
Like `TypeId` it's `Copy`, `Eq`, and `Hash`, delegating to the underlying `TypeId` for the latter
two. But unlike `TypeId`, its `Debug` implementation will print the [type path] of the type it represents.
This debuggability comes at the cost of an extra 32 bytes, but may often be well worth it,
especially if that data would have been stored elsewhere anyway.

It can be constructed from any type that implements [`TypePath`]:

```rust
let ty = Type::of::<String>();

let mut map = HashMap::<Type, i32>::new();
map.insert(ty, 25);

let debug = format!("{:?}", map);
assert_eq!(debug, "{alloc::string::String: 25}");
```

[`TypeId`]: https://doc.rust-lang.org/std/any/struct.TypeId.html
[`bevy_reflect`]: https://docs.rs/bevy_reflect/0.15/
[`Type`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/struct.Type.html
[`TypePathTable`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/struct.TypePathTable.html
[type path]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.TypePath.html#tymethod.type_path
[`TypePath`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.TypePath.html

--- END FILE `release-content/0.15/release-notes/14838_bevy_reflect_add_Type_type.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14868_Allow_fog_density_texture_to_be_scrolled_over_time_with_an.md` ---


<!-- Allow fog density texture to be scrolled over time with an offset -->
<!-- https://github.com/bevyengine/bevy/pull/14868 -->

<!-- TODO -->


--- END FILE `release-content/0.15/release-notes/14868_Allow_fog_density_texture_to_be_scrolled_over_time_with_an.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14876_Add_Order_Independent_Transparency.md` ---


<!-- Add Order Independent Transparency -->
<!-- https://github.com/bevyengine/bevy/pull/14876 -->

<video controls autoplay loop muted><source src="oit-demo.mp4" type="video/mp4"/></video>

Before this feature, Bevy only used alpha blending to render transparent meshes. We now have the option to use Order Independent Transparency when rendering transparent meshes. Instead of only sorting the mesh, this will sort every pixel that contributes to a transparent triangle. This is useful if you have a lot of transparent layers in your scene.

The implementation is currently pretty simple and uses a lot of GPU memory, but it should always render perfectly accurate transparency as long as you have configured enough layers.

This feature is still a work in progress and we will keep working on improving it.

This feature was contributed to Bevy by Foresight Spatial Labs. It is based on an internal implementation they use in their applications.



--- END FILE `release-content/0.15/release-notes/14876_Add_Order_Independent_Transparency.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14880_Initial_implementation_of_the_Bevy_Remote_Protocol_Adopted.md` ---


The Bevy Remote Protocol allows the ECS of a running
Bevy application to be interacted with remotely. This can be used, for example,
to inspect and edit entities and their components at runtime. We anticipate 
that this will be used to create things like inspectors which monitor the
content of the ECS from a separate process. We're planning on using BRP in the
upcoming Bevy Editor to communicate with remote Bevy apps.

Currently, you can use BRP to:

- Get the serialized values of a set of components from an entity
- Perform a query for all entities matching a set of components and retrieve the matching values
- Create a new entity with a given set of component values
- For a given entity, insert or remove a set of components
- Despawn an entity
- Reparent one or more entities
- List the components registered in the ECS or present on an entity

Here is the minimal app setup required to use BRP over HTTP:

```rust
fn main() {
    App::new()
        .add_plugins((
            DefaultPlugins,
            // The "core" plugin, which handles remote requests provided by transports
            RemotePlugin::default(),
            // Provides remote request transport via HTTP
            RemoteHttpPlugin::default(),
        ))
        .run();
}
```

Here is a sample request:
```json
{
    "method": "bevy/get",
    "id": 0,
    "params": {
        "entity": 4294967298,
        "components": [
            "bevy_transform::components::transform::Transform"
        ]
    }
}
```

And here is a sample response:
```json
{
    "jsonrpc": "2.0",
    "id": 0,
    "result": {
        "bevy_transform::components::transform::Transform": {
            "rotation": { "x": 0.0, "y": 0.0, "z": 0.0, "w": 1.0 },
            "scale": { "x": 1.0, "y": 1.0, "z": 1.0 },
            "translation": { "x": 0.0, "y": 0.5, "z": 0.0 }
        }
    }
}
```


--- END FILE `release-content/0.15/release-notes/14880_Initial_implementation_of_the_Bevy_Remote_Protocol_Adopted.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14920_Add_cached_run_system_API.md` ---


**Bevy 0.15** introduces a convenient new "cached" API for running one-shot systems:

```rust
// Old, uncached API:
let foo_id = commands.register_system(foo);
commands.run_system(foo_id);

// New, cached API:
commands.run_system_cached(foo);
```

This allows you to call `register_system_cached` without needing to worry about producing duplicate systems.

```rust
// Uncached API:
let id1 = world.register_system(quux);
let id2 = world.register_system(quux);
assert!(id1 != id2);

// Cached API:
let id1 = world.register_system_cached(quux);
let id2 = world.register_system_cached(quux);
assert!(id1 == id2);
```

### Comparison to `run_system_once`

`run_system_once` sets up a system, runs it once, and tears it down. This means system parameters like `Local` and `EventReader` that rely on persistent state between runs will be lost. Any system parameters like `Query` that rely on cached computations to improve performance will have to rebuild their cache each time, which can be costly. As a consequence, `run_system_once` is only recommended for diagnostic use (e.g. unit tests), and `run_system` or `run_system_cached` should be preferred for "real" code.

### Limitations

With the cached API, different systems cannot be cached under the same `CachedSystemId<S>`. There can be no more than one distinct system of type `S`. This is true when `size_of::<S>() == 0`, which is almost always true in practice. To enforce correctness, the new API will give you a compile-time error if you try to use a non-zero-sized function (like a function pointer or a capturing closure).


--- END FILE `release-content/0.15/release-notes/14920_Add_cached_run_system_API.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/14976_Color_gradient_curve.md` ---


<!-- Color gradient curve -->
<!-- https://github.com/bevyengine/bevy/pull/14976 -->

<!-- TODO -->


--- END FILE `release-content/0.15/release-notes/14976_Color_gradient_curve.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15013_Implement_animation_masks_allowing_fine_control_of_the_tar.md` ---


<!-- Implement animation masks, allowing fine control of the targets that animations affect. -->
<!-- https://github.com/bevyengine/bevy/pull/15013 -->

Animations now support masking out animation targets (joints).
This is implemented at the level of animation blend graphs (`AnimationGraph`)
and can be used to play different animations on separate parts of the
same model without interfering with one another. For example, you can play separate animations on a character's upper and lower body.

In this video, the fox's head and legs are playing two separate animations, thanks to animation masks:
<video controls><source src="masked-animation.mp4" type="video/mp4"/></video>


--- END FILE `release-content/0.15/release-notes/15013_Implement_animation_masks_allowing_fine_control_of_the_tar.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15085_Add_state_scoped_events.md` ---


<!-- Add state scoped events -->
<!-- https://github.com/bevyengine/bevy/pull/15085 -->

State scoped events will be automatically cleared when exiting a state (similar to [StateScoped entities](https://bevy.org/news/bevy-0-14/#state-scoped-entities)). This is useful when you want to guarantee clean state transitions.

Normally, you would configure your event via:
```rust
fn setup(app: &mut App) {
    app.add_event::<MyGameEvent>();
}
```

If you want the events to be cleared when you exit a specific state, change this to:
```rust
fn setup(app: &mut App) {
    app.add_state_scoped_event::<MyGameEvent>(GameState::Play);
}
```


--- END FILE `release-content/0.15/release-notes/15085_Add_state_scoped_events.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15184_Support_systems_that_take_references_as_input.md` ---


<!-- Support systems that take references as input -->
<!-- https://github.com/bevyengine/bevy/pull/15184 -->

System piping is a powerful (if relatively niche) tool to pass data directly from one system to another.
While this is useful for [error handling],
it's a general purpose tool for composing fragments of logic by gluing together matching inputs and outputs.

This machinery has since been repurposed for use with [one-shot systems],
allowing you to call [`World::run_system_with_input`] to evaluate systems with whatever input you supply,
and get the return value back out.
Great for writing tests!

However, this set of tools has always had a frustrating and confusing limitation: any data passed into a system must have a static lifetime.
This seems absurd; the data is passed directly from one owner to the next and the systems are run as if they were a single unit.

With the liberal application of some type magic pixie dust, this limitation has been lifted!

```rust
let mut world = World::new();

let mut value = 2;

// This always worked:
fn square(In(input): In<usize>) -> usize {
    input * input
}
value = world.run_system_with_input(value, square);

// Now possible:
fn square_ref(InRef(input): InRef<usize>) -> usize {
    *input * *input
}
value = world.run_system_with_input(&value, square_ref);

// Mutably:
fn square_mut(InMut(input): InMut<usize>) {
    *input *= *input;
}
world.run_system_with_input(&mut value, square_mut);
```

We're excited to see what you do with this newfound power.

[error handling]: https://github.com/bevyengine/bevy/blob/main/examples/ecs/system_piping.rs
[one-shot systems]: https://bevy.org/news/bevy-0-12/#one-shot-systems
[`World::run_system_with_input`]: https://docs.rs/bevy/0.15.0/bevy/ecs/prelude/struct.World.html#method.run_system_with_input


--- END FILE `release-content/0.15/release-notes/15184_Support_systems_that_take_references_as_input.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15204_box_shadow.md` ---


<!-- box shadow -->
<!-- https://github.com/bevyengine/bevy/pull/15204 -->

![A demonstration of Bevy's box shadows. There are 12 shapes on a light blue background, and the border radius, aspect ratio and softness of the shadows is varied for each of them. The shadows cause the buttons to appear to hover above the page.](box_shadow.png)

Bevy UI now supports box shadows! Box shadows can be used to achieve particular artistic effects, such as creating a sense of depth to cue to users that an element is interactable.

By adding the new [`BoxShadow`] component to any [`Node`] entity, you can draw a pretty shadow behind your widgets.

```rust
#[derive(Component)]
pub struct BoxShadow {
    /// The shadow's color
    pub color: Color,
    /// Horizontal offset
    pub x_offset: Val,
    /// Vertical offset
    pub y_offset: Val,
    /// How much the shadow should spread outward.
    ///
    /// Negative values will make the shadow shrink inwards.
    /// Percentage values are based on the width of the UI node.
    pub spread_radius: Val,
    /// Blurriness of the shadow
    pub blur_radius: Val,
}
```

We have plans for future improvements: enable using shadows to create an inset / sunken look, and adding shadow support for images and text. If those possibilities excite you, get involved! We love helping [new contributors] land the features they care about.

[`BoxShadow`]: https://docs.rs/bevy/0.15/bevy/prelude/struct.BoxShadow.html
[`Node`]: https://docs.rs/bevy/0.15/bevy/prelude/struct.Node.html
[new contributors]: https://bevy.org/learn/contribute/introduction/

--- END FILE `release-content/0.15/release-notes/15204_box_shadow.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15207_Add_EntityRefExcept_and_EntityMutExcept_world_queries_in_p.md` ---


<!-- Add `EntityRefExcept` and `EntityMutExcept` world queries, in preparation for generalized animation. -->
<!-- https://github.com/bevyengine/bevy/pull/15207 -->

<!-- TODO -->

[`EntityMut`] and [`EntityRef`] are powerful tools for interacting with all components of a given entity at once in arbitrary ways.
These types implement `QueryData`, so you can add them to any `Query` you'd like!

However, because they can access *any* component information, Rust's prohibition against mutable aliasing prevent you from simultaneously accessing other component information,
even if you pinky promise not to read any data that's being written to.

```rust
// This system is forbidden!
// 
// Inside the body of the function, we could choose to mutate the `AnimationPlayer` itself
// while reading its value!
fn animate_anything(query: Query<(&AnimationPlayer, EntityMut)> ){}
```

To let you work around this limitation, we've introduced a matching pair of tools: [`EntityMutExcept`] and [`EntityRefExcept`],
which work just like the [`EntityMut`] and [`EntityRef`] but *don't* provide access to a bundle of components that you declare off-limits.

```rust
/// Look mom, no mutable aliasing!
fn animate_anything(query: Query<(&AnimationPlayer, EntityMutExcept<AnimationPlayer>)> ){}
```

[`EntityMut`]: https://docs.rs/bevy/0.15/bevy/ecs/prelude/struct.EntityMut.html
[`EntityRef`]:https://docs.rs/bevy/0.15/bevy/ecs/prelude/struct.EntityRef.html
[`EntityMutExcept`]: https://docs.rs/bevy/0.15/bevy/ecs/world/struct.EntityMutExcept.html
[`EntityRefExcept`]: https://docs.rs/bevy/0.15/bevy/ecs/world/struct.EntityRefExcept.html


--- END FILE `release-content/0.15/release-notes/15207_Add_EntityRefExcept_and_EntityMutExcept_world_queries_in_p.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15276_Reduce_runtime_panics_through_SystemParam_validation.md` ---


<!-- Reduce runtime panics through `SystemParam` validation -->
<!-- https://github.com/bevyengine/bevy/pull/15276 -->

<!-- `QuerySingle` family of system params -->
<!-- https://github.com/bevyengine/bevy/pull/15476 -->

<!-- `Populated` (query) system param -->
<!-- https://github.com/bevyengine/bevy/pull/15488 -->


In Bevy 0.14 and prior, the following code would panic:
```rust
#[derive(Resource)]
struct MyResource;

fn my_system(my_resource: Res<MyResource>) {}

fn main() {
    let mut app = App::new();
    app.add_plugins(DefaultPlugins)
    app.add_systems(my_system);
    // Panic here: `my_system` cannot fetch `MyResource`, because it was never added.
    app.run();
}
```
but in Bevy 0.15, `my_system` simply won't be executed and a warning will be logged.

This works for all system-based features:

- Systems and Observers will be skipped.
- Run Conditions will be skipped and return `false`.

Compound systems, like `system_a.pipe(system_b)`, are currently skipped if any required data is missing.

Pre-existing parameters which now benefit from this feature are: `Res` and `ResMut` as well as their siblings `NonSend` and `NonSendMut`.
Parameters that build on top of other parameters: tuples, `DynSystemParam` and `ParamSet` are considered present if and only if all of their system parameters are present.

Additionally, few new system params were introduced to simplify existing code:
- [`Single<D, F>`] - Works like `Query<D, F>::single`, fails if query contains 0 or more than 1 match,
- `Option<Single<D, F>>` - Works like `Query<D, F>::single`, fails if query contains more than 1 match,
- [`Populated<D, F>`] - Works like a `Query<D, F>`, fails if query contains no matches.

### Warnings

Fallible system params come with a primitive warning mechanic.
Currently, systems can behave in one of two ways:
- (default) warn exactly once,
- never warn.

The default can be changed as following:
```rust
// For systems
app.add_systems(my_system.never_param_warn());
// For observers
app.add_observer(my_observer.never_param_warn());
// For run conditions
app.add_systems(my_system.run_if(my_condition.never_param_warn()));
```

Let us know what other warning strategies you'd like!

[`Single<D, F>`]: https://docs.rs/bevy/0.15/bevy/ecs/prelude/struct.Single.html
[`Populated<D, F>`]: https://docs.rs/bevy/0.15/bevy/ecs/prelude/struct.Populated.html


--- END FILE `release-content/0.15/release-notes/15276_Reduce_runtime_panics_through_SystemParam_validation.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15281_Add_core_and_alloc_over_std_Lints.md` ---


<!-- Add `core` and `alloc` over `std` Lints -->
<!-- https://github.com/bevyengine/bevy/pull/15281 -->

Bevy relies heavily on Rust's [standard library](https://doc.rust-lang.org/std/), making it
challenging to use on embedded, niche platforms, and even certain consoles. But what if that
_wasn't_ the case?

We've undertaken a new initiative to challenge the reliance on the standard
library, with the eventual goal of providing a [`no_std`](https://docs.rust-embedded.org/book/intro/no-std.html)
compatible subset of Bevy which could be used on a much wider range of platforms.

The first very simple step is to enable a new set of lints:

* [`std_instead_of_core`](https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core)
* [`std_instead_of_alloc`](https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc)
* [`alloc_instead_of_core`](https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core)

For those unfamiliar with `no_std` Rust, the standard library, `std`, gets a lot of its functionality
from two smaller crates, [`core`](https://doc.rust-lang.org/core/) and [`alloc`](https://doc.rust-lang.org/alloc/).
The `core` crate is available on every Rust target with very few exceptions, providing the
fundamental infrastructure that the Rust language relies on, such as iterators, `Result`, and many more.
Complementing that the `alloc` crate provides access to allocation-related functionality, such as
`Vec`, `Box`, and `String`.

Rust's support for platforms follows a [three tiered policy](https://doc.rust-lang.org/rustc/platform-support.html),
where tier 1 is guaranteed to work and will always provide the `std` crate, and tiers 2 and 3 _may_
have the `std` crate, but often do not.
The reason for this is some platforms simply don't support the features the `std` crate requires,
such as a filesystem, networking, or threading.

But why should Bevy care about these platforms? When a new platform is added to Rust,
it is often lacking tier 1 support.
Even modern consoles such as the Nintendo Switch, PlayStation 5, or Xbox Series don't have tier 1
support due to non-disclosure agreements and platform specifics.
Adding `no_std` support to Bevy will make it easier for commercial teams developing for these
platforms to get started and stay up to date.

Beyond the commercially-relevant modern consoles, there is a vibrant community of embedded and retro
enthusiasts developing for platforms that may never support the standard library.
Crates such as [`agb`](https://crates.io/crates/agb) and [`psx`](https://crates.io/crates/psx) provide
support for developing games on the GameBoy Advance and PlayStation One respectively.
With `no_std` support in Bevy, users may be able to leverage the wider Rust ecosystem to run their
software on these platforms.

We're still a while away from true `no_std` support in Bevy, but the first few changes have already
been accepted, with many more lined up for the next release in 0.16.

If this work sounds interesting, check out the
[`no_std` tracking issue](https://github.com/bevyengine/bevy/issues/15460) on GitHub, where you can
find a list of pull requests, and even prototypes of Bevy running in `no_std` environments.


--- END FILE `release-content/0.15/release-notes/15281_Add_core_and_alloc_over_std_Lints.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15282_Allow_animation_clips_to_animate_arbitrary_properties.md` ---


<!-- Allow animation clips to animate arbitrary properties. -->
<!-- https://github.com/bevyengine/bevy/pull/15282 -->
[`AnimationClip`] can now be used to animate component fields with arbitrary curves.

```rust
animation_clip.add_curve_to_target(
    animation_target_id,
    AnimatableCurve::new(
        animated_field!(TextFont::font_size),
        // Oscillate the font size during the length of the animation.
        FunctionCurve::new(
            Interval::UNIT, 
            |t| 25.0 * f32::sin(TAU * t) + 50.0
        )
    )
);
```

<video controls><source src="animated-font-size.mp4" type="video/mp4"/></video>

This works for any named field and uses the new `Curve` API, which supports arbitrary curve types.
Animating `Transform` fields will likely be the most common use case:

```rust
animation_clip.add_curve_to_target(
    animation_target_id,
    AnimatableCurve::new(
        animated_field!(Transform::translation),
        // Construct a `Curve<Vec3>`` using a built-in easing curve constructor.
        EasingCurve::new(
            vec3(-10., 2., 0.),
            vec3(6., 2., 0.),
            EaseFunction::CubicInOut,
        )
    )
);
```

Bevy's internal animation handling for things like GLTF animations uses the same API!

If you need more complicated logic than "animate a specific component field", you can implement [`AnimatableProperty`], which can be used in
[`AnimatableCurve`] in place of [`animated_field!`].

[`AnimationClip`]: https://docs.rs/bevy/0.15/bevy/animation/struct.AnimationClip.html
[`AnimatableProperty`]: https://docs.rs/bevy/0.15/bevy/animation/animation_curves/trait.AnimatableProperty.html
[`AnimatableCurve`]: https://docs.rs/bevy/0.15/bevy/animation/animation_curves/struct.AnimatableCurve.html
[`animated_field!`]: https://docs.rs/bevy/0.15/bevy/animation/macro.animated_field.html

--- END FILE `release-content/0.15/release-notes/15282_Allow_animation_clips_to_animate_arbitrary_properties.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15291_UI_Scrolling.md` ---


Bevy 0.15 introduces scrolling support for UI containers.

A UI `Node` with the `overflow` property set to `Overflow::scroll()` will offset its contents by the positive `offset_x` and `offset_y` values of the `ScrollPosition` component on the node.

Scrolling is done by modifying `ScrollPosition` directly; there is currently no built-in scroll input handler. A new [`scroll`](https://github.com/bevyengine/bevy/tree/v0.15.0/examples/ui/scroll.rs) example demonstrates handling simple mouse wheel scrolling. Axes of a node without `OverflowAxis::Scroll` will ignore changes to `ScrollPosition`.


--- END FILE `release-content/0.15/release-notes/15291_UI_Scrolling.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15320_Retained_Rendering.md` ---


<!-- Retained Rendering -->
<!-- https://github.com/bevyengine/bevy/pull/14449 Original PR -->
<!-- https://github.com/bevyengine/bevy/pull/15320 Adopted PR -->
<!-- https://github.com/bevyengine/bevy/pull/15582 Synchronized Removed Components -->
<!-- https://github.com/bevyengine/bevy/pull/15756 Type Safe Retained Render World -->
For awhile now, Bevy has had a ["parallel pipelined renderer"](/news/bevy-0-6/#pipelined-rendering-extract-prepare-queue-render). To enable this, we added a Render World, in addition to the Main World (a `World` holds ECS data like Entities, Components, and Resources). The Main World is the source of truth for app logic. While the Render World is rendering the current frame, the Main World can be simulating the next frame. There is a brief "extract step", where we synchronize the two and copy relevant data from the Main World to the Render World.

In previous versions of Bevy, we employed an "immediate mode" approach to Main World -> Render World synchronization: we fully cleared the Render World entities every frame. This accomplished a couple of things:

1. It allowed us to ensure entity IDs "lined up", allowing us to reuse entities in both places.
2. It prevented us from needing to solve the "desync problem". By clearing every frame and re-syncing, we ensure the two Worlds are always perfectly in sync.

There was also precedent for the "immediate mode" pipelined rendering approach: Bungie's Destiny renderer uses it to great effect!

However we learned pretty quickly that clearing every frame had major downsides:

1. The clearing process itself had overhead.
2. "Table" ECS storage could be expensive to rebuild every frame relative to alternatives, due to "archetype moves". As a result, we employed many workarounds such as moving storage outside of the ECS.
3. Full resyncs every frame meant re-doing work that didn't need redoing. ECS gives us a nice global view of how our data is changing. We should take advantage of that!

In **Bevy 0.15** we switched to a "retained Render World". We no longer clear each frame. We no longer rely on a shared entity ID space. Instead:

1. Each world has its own entities
2. For entities that are related, we store that relationship as components (ex: Render World entities have a `MainEntity` component and Main World entities have a `RenderEntity` component). If a Main World entity with `SyncToRenderWorld` is spawned, we spawn an equivalent in the Render World. If a Main World entity is despawned, we despawn the relevant entity in the Render World.

Ensuring synchronization is perfect is _not_ an easy problem. Plugging all of the holes took a lot of time this cycle and we will likely continue to evolve our synchronization strategy in the future. But we think "retained" is fundamentally better for Bevy, and we're excited to have this foundation laid!


--- END FILE `release-content/0.15/release-notes/15320_Retained_Rendering.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15361_Implement_volumetric_fog_support_for_both_point_lights_and.md` ---


Volumetric fog was [introduced in Bevy 0.14](https://bevy.org/news/bevy-0-14/#volumetric-fog-and-volumetric-lighting-light-shafts-god-rays). Initially, only directional lights could interact with it. In Bevy 0.15, point lights and spot lights work with it too:

![volumetric fog](volumetric_fog.jpg)

To add volumetric fog to your scene, add [VolumetricFog](https://docs.rs/bevy/0.15/bevy/pbr/struct.VolumetricFog.html) to the camera, and add [VolumetricLight](https://docs.rs/bevy/0.15/bevy/pbr/struct.VolumetricLight.html) to directional light, point light, or spot light that you wish to be volumetric.

```rust
// Add VolumetricFog to the camera.
commands
    .spawn((
        Camera3d::default(),
        Camera {
            hdr: true,
            ..default()
        },
    ))
    .insert(VolumetricFog {
        // This value is explicitly set to 0 since we have no environment map light.
        ambient_intensity: 0.0,
        ..default()
    });

// Add VolumetricLight to point light.
commands.spawn((
    PointLight {
        shadows_enabled: true,
        range: 150.0,
        color: RED.into(),
        intensity: 1000.0,
        ..default()
    },
    VolumetricLight,
    Transform::from_xyz(-0.4, 1.9, 1.0),
));

// Add VolumetricLight to spot light.
commands.spawn((
    SpotLight {
        intensity: 5000.0, // lumens
        color: Color::WHITE,
        shadows_enabled: true,
        inner_angle: 0.76,
        outer_angle: 0.94,
        ..default()
    },
    VolumetricLight,
    Transform::from_xyz(-1.8, 3.9, -2.7).looking_at(Vec3::ZERO, Vec3::Y),
));
```

--- END FILE `release-content/0.15/release-notes/15361_Implement_volumetric_fog_support_for_both_point_lights_and.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15419_Gpu_readback.md` ---


The new `Readback` component simplifies the tricky process of getting data back from the GPU to the CPU using an observer-based API.

```rust
commands.spawn(Readback::buffer(buffer.clone())).observe(
    |trigger: Trigger<ReadbackComplete>| {
        let data = trigger.event().to_shader_type();
        // ...
    },
);
```

Normally, manually retrieving data from the GPU involves a lot of boilerplate and careful management of GPU resources. You have to deal with synchronization, ensure the GPU has finished processing, and handle copying data between memory spaces—which isn’t straightforward!

The new `Readback` component streamlines this process. When spawned into the main world, `Readback` will queue a `Handle<Image>` or `Handle<ShaderStorageBuffer>` to be asynchronously read and copied back from the GPU to CPU in a future frame where it will trigger a `ReadbackComplete` event containing the raw bytes of the resource.

This is especially useful for debugging, saving GPU-generated data, or performing CPU-side computations with results from the GPU. It’s perfect for scenarios where you need to analyze simulation data, capture rendered frames, or process large datasets on the GPU and retrieve the results for further use on the CPU.


--- END FILE `release-content/0.15/release-notes/15419_Gpu_readback.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15435_List_components_for_QueryEntityErrorQueryDoesNotMatch.md` ---


When accessing an entity through a query fails due to mismatched components, the error now includes the names of the components the entity has:

```
QueryDoesNotMatch(0v1 with components Sprite, Transform, GlobalTransform, Visibility, InheritedVisibility, ViewVisibility, SyncToRenderWorld)
```


--- END FILE `release-content/0.15/release-notes/15435_List_components_for_QueryEntityErrorQueryDoesNotMatch.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15538_Add_Support_for_Triggering_Events_via_AnimationEvents.md` ---


<!-- Add Support for Triggering Events via `AnimationEvent`s -->
<!-- https://github.com/bevyengine/bevy/pull/15538 -->

Triggering gameplay events at specific points in an animation is a common pattern for synchronizing the visual, audible, and mechanical parts of your game. In **Bevy 0.15** we've added "animation event" support to [`AnimationClip`], which means that you can trigger a specific [`Event`] at a given point in time during [`AnimationClip`] playback:

```rust
#[derive(Event, Clone)]
struct PlaySound {
    sound: Handle<AudioSource>,
}

// This will trigger the PlaySound event at the 1.5 second mark in `animation_clip`
animation_clip.add_event(1.5, PlaySound {
    sound: assets.load("sound.mp3"),
});

app.add_observer(|trigger: Trigger<PlaySound>, mut commands: Commands| {
    let sound = trigger.event().sound.clone();
    commands.spawn(AudioPlayer::new(sound));
});
```

You can also trigger events for specific animation targets (such as bones):

```rust
animation_clip.add_event_to_target(AnimationTargetId::from_iter(["LeftLeg", "LeftFoot"], 0.5, TouchingGround);
```

This enables things like "triggering a dust effect each time a foot touches the ground in an animation":

<video controls><source src="animated_fox.mp4" type="video/mp4"/></video>

[`AnimationClip`]: https://docs.rs/bevy/0.15/bevy/animation/struct.AnimationClip.html
[`Event`]: https://docs.rs/bevy/0.15/bevy/ecs/event/trait.Event.html

--- END FILE `release-content/0.15/release-notes/15538_Add_Support_for_Triggering_Events_via_AnimationEvents.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15614_Allow_Worldentity_family_of_functions_to_take_multiple_ent.md` ---


<!-- Allow `World::entity` family of functions to take multiple entities and get multiple references back -->
<!-- https://github.com/bevyengine/bevy/pull/15614 -->

When using some of the more advanced features of Bevy's ECS, like hooks or exclusive systems, it's common to want to fetch entities straight out of a `World`:

```rust
#[derive(Component)]
#[component(on_add = on_foo_added)]
struct Foo;

fn on_foo_added(world: DeferredWorld, entity: Entity, _: ComponentId) {
    let has_foo = world.entity(entity);
    println!("{:?} has a Foo", has_foo.id());
}
```

In previous versions of Bevy, you could grab multiple entities from a `World` using a variety of different functions:

- `World::many_entities<N>(&self, [Entity; N]) -> [EntityRef; N]`
- `World::many_entities_mut<N>(&mut self, [Entity; N]) -> [EntityMut; N]`
- `World::get_many_entities<N>(&self, [Entity; N]) -> Result<[EntityRef; N], Entity>`
- `World::get_many_entities_dynamic(&self, &[Entity]) -> Result<Vec<EntityRef>, Entity>`
- `World::get_many_entities_mut<N>(&mut self, [Entity; N]) -> Result<[EntityMut; N], QueryEntityError>`
- `World::get_many_entities_dynamic_mut(&self, &[Entity]) -> Result<Vec<EntityMut>, QueryEntityError>`
- `World::get_many_entities_from_set_mut(&mut self, &EntityHashSet) -> Result<Vec<EntityMut>, QueryEntityError>`

As you can see, that's a lot of functions with very long names! But the gist of them is that we want to support the ability to
give a bunch of entity IDs, and receive a bunch of entity references. Surely there's a better way!

In `0.15`, all of those functions have been deprecated and now all you need is
the panicking `World::entity`/`World::entity_mut` or the non-panicking `World::get_entity`/`World::get_entity_mut`:

```rust
let e1: Entity = world.spawn_empty().id();
let e2: Entity = world.spawn_empty().id();

// Note: use World::get_entity or World::get_entity_mut instead to receive a Result

// You can still pass a single ID as normal:
let eref = world.entity(e1);  
let emut = world.entity_mut(e1);

// But you can also pass in an array of IDs (any amount N supported!):
let [eref1, eref2]: [EntityRef; 2] = world.entity([e1, e2]);
let [emut1, emut2]: [EntityMut; 2] = world.entity_mut([e1, e2]);

// Or a slice of IDs:
let ids = vec![e1, e2];
let eref_vec: Vec<EntityRef> = world.entity(&ids);
let emut_vec: Vec<EntityMut> = world.entity_mut(&ids);

// Or even a set of IDs:
let ids = EntityHashSet::from_iter([e1, e2]);
let eref_map: EntityHashMap<EntityRef> = world.entity(&ids);
let emut_map: EntityHashMap<EntityMut> = world.entity_mut(&ids);
```

It might *feel* like magic, but it's all standard Rust code! The `Entity` id
parameter that the `World::entity` family of functions accept was changed to
instead accept anything that implements a newly introduced trait:
[`WorldEntityFetch`][WorldEntityFetch]. Check out the trait and
[`World::entity`][World::entity] to learn more about how it was accomplished.

[WorldEntityFetch]: https://docs.rs/bevy/0.15/bevy/ecs/world/trait.WorldEntityFetch.html
[World::entity]: https://docs.rs/bevy/0.15/bevy/ecs/prelude/struct.World.html#method.entity

--- END FILE `release-content/0.15/release-notes/15614_Allow_Worldentity_family_of_functions_to_take_multiple_ent.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15627_Add_more_tools_for_traversing_hierarchies.md` ---


<!-- Add more tools for traversing hierarchies -->
<!-- https://github.com/bevyengine/bevy/pull/15627 -->

We've spruced up the [`HierarchyQueryExt`] [extension trait],
making it easier to traverse entity hierarchies defined by the [`Parent`] and [`Children`] components.

The full set of methods is now:

- `parent` (new)
- `children` (new)
- `root_ancestor` (new)
- `iter_leaves` (new)
- `iter_siblings` (new)
- `iter_descendants`
- `iter_descendants_depth_first` (new)
- `iter_ancestors`

All of these operations were previously possible, but we hope that this API makes working with hierarchies more pleasant, especially for UI and animation.

[`HierarchyQueryExt`]: https://docs.rs/bevy/0.15/bevy/hierarchy/trait.HierarchyQueryExt.html
[`Parent`]: https://docs.rs/bevy/0.15/bevy/hierarchy/struct.Parent.html
[`Children`]: https://docs.rs/bevy/0.15/bevy/hierarchy/struct.Children.html
[extension trait]: https://rust-lang.github.io/rfcs/0445-extension-trait-conventions.html


--- END FILE `release-content/0.15/release-notes/15627_Add_more_tools_for_traversing_hierarchies.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15631_Implement_additive_blending_for_animation_graphs.md` ---


<!-- Implement additive blending for animation graphs. -->
<!-- https://github.com/bevyengine/bevy/pull/15631 -->

Bevy's animation graphs (`AnimationGraph`), which are used to combine
simultaneously playing animations, now support *additive blending*.

Additive blending is a technique which allows separately authored animations
to be applied on top of an arbitrary base animation. For instance, an animation
in which a character swings a weapon may be applied additively on top of a 
walking or running animation.

Within an animation graph itself, this is accomplished by using `Add` nodes.
The situation above might be described with an animation graph that looks
something like this (weights omitted):

```
┌─────┐                              
│Walk ┼─┐                            
└─────┘ │ ┌─────┐                    
        ┼─┼Blend┼─┐                  
┌─────┐ │ └─────┘ │ ┌─────┐   ┌─────┐
│Run  ┼─┘         ┼─┤Add  ┼───┼Root │
└─────┘   ┌─────┐ │ └─────┘   └─────┘
          │Swing┼─┘                  
          └─────┘                    
```

The `Add` node functions by taking its first input (here, a blend of the 'Walk'
and 'Run' clips) as-is and then applying the subsequent inputs additively on
top of it. In code, the graph might be constructed as follows:

```rust
let mut animation_graph = AnimationGraph::new();

// Attach an `Add` node to the root.
let add_node = animation_graph.add_additive_blend(1.0, animation_graph.root);

// Add the `Blend` node and the additive clip as children; the `Blend` result
// will be used as the base because it is listed first.
let blend_node = animation_graph.add_blend(1.0, add_node);
animation_graph.add_clip(swing_clip_handle, 1.0, add_node);

// Finally, blend the 'Walk' and 'Run' clips to use as a base.
animation_graph.add_clip(walk_clip_handle, 0.5, blend_node);
animation_graph.add_clip(run_clip_handle, 0.5, blend_node);
```


--- END FILE `release-content/0.15/release-notes/15631_Implement_additive_blending_for_animation_graphs.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15675_Add_most_common_interpolations.md` ---


<!-- Add most common interpolations -->
<!-- https://github.com/bevyengine/bevy/pull/15675 -->

"Easing functions" can be used to easily construct curves that interpolate between two values.
There are many "common" easing functions that each have a different "character" to them. These
are often used in "tweening" scenarios to give life to the interpolation.

<video controls><source src="ease-functions.mp4" type="video/mp4"/></video>

**Bevy 0.15** adds a new `Ease` trait, which defines how to interpolate a value of a given type. The `Ease` types include:

* vector types (`f32`, `Vec2`, `Vec3`, ...);
* direction types (`Dir2`, `Dir3`, `Dir3A`);
* rotation types (`Rot2`, `Quat`).

We've also added an `EaseFunction` enum, which defines many common easing functions. The new `EasingCurve` type uses these as inputs to define a final `Curve` from the given easing parameters.

For example, we can use an easing function to interpolate between two rotations:

```rust
// Ease between no rotation and a rotation of angle PI/2 about the y-axis.
let rotation_curve = EasingCurve::new(
    Quat::IDENTITY,
    Quat::from_rotation_y(FRAC_PI_2),
    EaseFunction::ElasticInOut,
)
.reparametrize_linear(interval(0.0, 4.0).unwrap())
.unwrap();
```

<video controls><source src="eased-rotation.mp4" type="video/mp4"/></video>


--- END FILE `release-content/0.15/release-notes/15675_Add_most_common_interpolations.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/15800_Add_mesh_picking_backend_and_MeshRayCast_system_parameter.md` ---


<!-- Add mesh picking backend and `MeshRayCast` system parameter -->
<!-- https://github.com/bevyengine/bevy/pull/15800 -->

![A collection of geometric shapes, with a pointer showing a point on a hovered mesh. The indicator is perpendicular to the surface.](mesh_picking.png)

Being able to click on objects to select them is a vital and seemingly simple task in any game.
Since 2020, doing this in Bevy has largely meant pulling in `@aevyrie`'s beloved ecosystem crate, [`bevy_mod_picking`] and its simple raycasting companion [`bevy_mod_raycast`].

Over the years, this crate has been refined and battle-tested, both by [Foresight Spatial Labs] (a CAD-creating, Bevy-using company where Aevyrie works) and
the broader open source community of game developers that have used it for everything from first-person-shooters to point-and-click adventures.
Bevy is thrilled to have had the chance to work with the team behind [`bevy_mod_picking`] and have adopted the project wholesale into Bevy itself.
Integrating a large project is a ton of work, and we're incredibly grateful to the contributors who have made `bevy_picking` a stable, first-class feature of the engine.

The new `bevy_picking` crate follows the existing modular architecture closely:

1. Inputs are gathered from mouse, touch and pen devices. Each pointing device (humans are equipped with 10 by default) gets a screen-space [`PointerLocation`].
2. Each modular [backend] performs the domain-specific work (like raycasting) of figuring out how these pointer locations map to [`PointerHits`] on objects that they're watching.
3. The hit information from each backend is combined and sorted to produce a coherent [`HoverMap`], which lists which entities each pointer is hovering over.
4. High level events (both ordinary events and observers!) are emitted for each hovered entity, capturing complex behavior such as clicking, dragging or releasing various objects.

In Bevy 0.15, we're shipping three first-party picking backends for UI, sprites, and meshes. Each of these comes with its own caveats for now:

- UI: both the legacy [`Interaction`] and new [`PickingInteraction`] components exist [for now](https://github.com/bevyengine/bevy/issues/15550), with subtle behavioral differences.
- Sprites: picking always uses the full rectangle, and [alpha transparency is not taken into account](https://github.com/bevyengine/bevy/issues/14929).
- Mesh: this is a naive raycast against the full mesh. If you run into performance problems here, you should use simplified meshes and an acceleration data structure like a [BVH](https://en.wikipedia.org/wiki/Bounding_volume_hierarchy) to speed this up. As a result, this functionality is currently disabled by default. It can be enabled by adding the [`MeshPickingPlugin`].

We expect both [`bevy_rapier`] and [`avian`] (the two most popular ecosystem physics crates for Bevy) to add their own accelerated collider picking backends to work with the newly upstreamed API. Unless you're debugging, building an editor or really care about the exact triangles of raw meshes, you should use one of those crates for efficient mesh picking.

### Usage

There are two good ways to get started with the API:

First, you might want to quickly update the state of your objects (be they UI or game objects) based on what is being done to them, typically highlighting them or changing their color. For that, simply query for changes to the [`PickingInteraction`] component, which will change based on the current picking state.

Second, you might want to respond dynamically to various pointer-powered events. For that, we recommend using observers. Here, we're spawning a simple text node and responding to pointer events:

```rust
// UI text that prints a message when clicked:
commands
    .spawn(Text::new("Click Me!"))
    .observe(on_click_print_hello);

// A cube that spins when dragged:
commands
    .spawn((
        Mesh3d(meshes.add(Cuboid::default())),
        MeshMaterial3d(materials.add(Color::WHITE)),
    ))
    .observe(on_drag_spin);
}

fn on_click_print_hello(click: Trigger<Pointer<Click>>) {
    println!("{} was clicked!", click.entity());
}

fn on_drag_spin(drag: Trigger<Pointer<Drag>>, mut transforms: Query<&mut Transform>) {
    let mut transform = transforms.get_mut(drag.entity()).unwrap();
    transform.rotate_y(drag.delta.x * 0.02);
}
```

If you want to override how an entity interacts with picking, add the [`PickingBehavior`] component to them and configure it to meet your needs.

[`bevy_mod_picking`]: https://crates.io/crates/bevy_mod_picking/
[`bevy_mod_raycast`]: https://crates.io/crates/bevy_mod_raycast/
[Foresight Spatial Labs]: https://www.fslabs.ca/
[`PointerLocation`]: https://docs.rs/bevy/0.15.0/bevy/picking/backend/prelude/struct.PointerLocation.html
[backend]: https://docs.rs/bevy/0.15.0/bevy/picking/backend/index.html
[`PointerHits`]: https://docs.rs/bevy/0.15.0/bevy/picking/backend/struct.PointerHits.html
[`HoverMap`]: https://docs.rs/bevy/0.15.0/bevy/picking/focus/struct.HoverMap.html
[`Interaction`]: https://docs.rs/bevy/0.15.0/bevy/prelude/enum.Interaction.html
[`PickingInteraction`]: https://docs.rs/bevy/0.15.0/bevy/picking/focus/enum.PickingInteraction.html
[`bevy_rapier`]: https://crates.io/crates/bevy_rapier3d
[`avian`]: https://crates.io/crates/avian3d
[`PickingBehavior`]: https://docs.rs/bevy/0.15.0/bevy/picking/struct.PickingBehavior.html
[`MeshPickingPlugin`]: https://docs.rs/bevy/0.15.0/bevy/picking/mesh_picking/struct.MeshPickingPlugin.html


--- END FILE `release-content/0.15/release-notes/15800_Add_mesh_picking_backend_and_MeshRayCast_system_parameter.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/5772_bevy_reflect_Add_Reflectable_trait.md` ---


[`bevy_reflect`] is powered by many different traits working together
to provide the full reflection API. These include traits like [`Reflect`], but also other traits
like [`TypePath`], [`Typed`], and [`GetTypeRegistration`].

This can make adding the right bounds on generic parameters a bit confusing,
and it's easy to forget to include one of these traits.

To make this simpler, 0.15 introduces the [`Reflectable`] trait. All the traits listed above are
supertraits of `Reflectable`, allowing it to be used in place of all of them where necessary.

[`bevy_reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/
[`Reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Reflect.html
[`TypePath`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.TypePath.html
[`Typed`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Typed.html
[`GetTypeRegistration`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.GetTypeRegistration.html
[`Reflectable`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Reflectable.html


--- END FILE `release-content/0.15/release-notes/5772_bevy_reflect_Add_Reflectable_trait.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/6042_bevy_reflect_Reflect_remote_types.md` ---


The [`bevy_reflect`] crate relies on types implementing [`Reflect`] in order to make them reflectable.
Fields of structs and enums that don't implement `Reflect` must be specifically ignored with `#[reflect(ignore)]`.
And due to Rust's [orphan rule], this is often the case for types not owned by the current crate.

Following [`serde`'s example](https://serde.rs/remote-derive.html), Bevy 0.15 introduces a way to reflect remote types
using a new [`#[reflect_remote(...)]`][reflect_remote] attribute macro.
This allows users to define a model for reflection to base its behavior on,
while still operating with the actual type.

```rust
// Pretend this type is defined in a crate called `external_crate`
#[derive(Default)]
struct Name {
    pub value: String,
}

// We can define our model, including other derives and reflection attributes
#[reflect_remote(external_crate::Name)]
#[derive(Default)]
#[reflect(Default)]
struct NameWrapper {
    pub value: String,
}

// Now we can use `Name` as a field in a reflected type without having to ignore it
#[derive(Reflect)]
struct Player {
    #[reflect(remote = NameWrapper)]
    name: external_crate::Name,
}
```

Under the hood, this works by transforming our model into a transparent wrapper around the actual type:

```rust
#[repr(transparent)]
struct NameWrapper(pub external_crate::Name);
```

The macro then uses the model to generate all the reflection trait implementations,
driven by a new [`ReflectRemote`] trait for swapping between our wrapper and the remote type.
Compile-time assertions are also generated to help ensure the model and the actual type stay in sync.

While this feature has many aspects complete, including generic support, enum support, and nesting,
there are still some limitations we hope to address in future releases,
including support for reflecting a remote type with private fields.

[`bevy_reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/
[`Reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Reflect.html
[orphan rule]: https://doc.rust-lang.org/book/ch10-02-traits.html#implementing-a-trait-on-a-type
[reflect_remote]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/attr.reflect_remote.html
[`ReflectRemote`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.ReflectRemote.html


--- END FILE `release-content/0.15/release-notes/6042_bevy_reflect_Reflect_remote_types.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/7207_reflect_implement_the_unique_reflect_rfc.md` ---


Bevy boasts a powerful [reflection] system that allows you to introspect and build types at runtime.
It works by passing around data as [`Reflect`] trait objects like `Box<dyn Reflect>`.
This has the effect of erasing the compile-time type information,
allowing data to be stored and moved around without having to know the exact type
behind the trait object.

Because of this type erasure, `bevy_reflect` can also get away with some interesting tricks.
For instance, there are many cases where a type needs to be built up field-by-field,
such as during deserialization.
This works fine when you know the type at compile-time, but it becomes very challenging to do
at runtime.
To solve this, `bevy_reflect` has a concept of _dynamic_ types.

Dynamic types exist as a way to dynamically construct and store reflected data in a way
that appears like a concrete type.
Behind the scenes, `bevy_reflect` uses these types to build up a representation of the target type.
And it can do so since we hide the actual type behind the `dyn Reflect` trait object.

Unfortunately, this comes with a very common issue: it becomes very easy to accidentally
believe a `dyn Reflect` is a concrete type when it's actually a dynamic type representing
that concrete type.

To address this problem, Bevy 0.15 has reworked the `Reflect` trait based on the [Unique Reflect RFC].
This splits it into two separate traits: `Reflect` and [`PartialReflect`].

`PartialReflect` is much like the `Reflect` trait of previous versions.
It allows access to fundamental reflection capabilities and allows for type-erasure behind
a `dyn PartialReflect` trait object.
It allows for both concrete types and dynamic types to be used interchangeably.

`Reflect`, on the other hand, has become a much stricter trait.
It's a subset of `PartialReflect` that guarantees the underlying type beneath the trait object
is exactly the concrete type it says it is.

This split allows reflection-based APIs and user code to be more explicit about the dynamic-ness of
the trait objects they're working with. It moves the knowledge of whether a type is dynamic or not
to compile-time, preventing many common pitfalls of working with dynamic types,
including knowing when they need to be handled separately.

[reflection]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/
[`Reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Reflect.html
[`PartialReflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.PartialReflect.html
[Unique Reflect RFC]: https://github.com/bevyengine/rfcs/pull/56


--- END FILE `release-content/0.15/release-notes/7207_reflect_implement_the_unique_reflect_rfc.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/function_reflection.md` ---


Rust's options for working with functions in a dynamic context are limited.
We're forced to either coerce the function to a function pointer (e.g. `fn(i32, i32) -> i32`)
or turn it into a trait object (e.g. `Box<dyn Fn(i32, i32) -> i32>`).

In both cases, only functions with the same signature (both inputs and outputs) can be stored as an object of the same type.
For truly dynamic contexts, such as working with scripting languages or fetching functions by name,
this can be a significant limitation.

Bevy's [`bevy_reflect`] crate already removes the need for compile-time knowledge of types through
reflection.
In Bevy 0.15, functions can be reflected as well!

This feature is opt-in and requires the `reflect_functions` feature to be enabled on `bevy`
(or the `functions` feature on `bevy_reflect` if using that crate directly).

It works by converting regular functions which arguments and return type derive [`Reflect`]
into a [`DynamicFunction`] type using a new [`IntoFunction`] trait.

```rust
fn add(a: i32, b: i32) -> i32 {
    a + b
}

let function = add.into_function();
```

With a `DynamicFunction`, we can then generate our list of arguments into an [`ArgList`]
and call the function:

```rust
let args = ArgList::new()
    .push_owned(25_i32)
    .push_owned(75_i32);

let result = function.call(args);
```

Calling a function returns a [`FunctionResult`] which contains our [`Return`] data 
or a [`FunctionError`] if something went wrong.

```rust
match result {
    Ok(Return::Owned(value)) => {
        let value = value.try_take::<i32>().unwrap();
        println!("Got: {}", value);
    }
    Err(err) => println!("Error: {:?}", err),
    _ => unreachable!("our function always returns an owned value"),
}
```

#### Closure Reflection

This feature doesn't just work for regular functions—it works on closures too!

For closures that capture their environment immutably, we can continue using `DynamicFunction`
and `IntoFunction`. For closures that capture their environment mutably, there's
[`DynamicFunctionMut`] and [`IntoFunctionMut`].

```rust
let mut total = 0;

let increment = || total += 1;

let mut function = increment.into_function_mut();

function.call(ArgList::new()).unwrap();
function.call(ArgList::new()).unwrap();
function.call(ArgList::new()).unwrap();

// Drop the function to release the mutable borrow of `total`.
// Alternatively, our last call could have used `call_once` instead.
drop(function);

assert_eq!(total, 3);
```

#### `FunctionInfo`

Reflected functions hold onto their type metadata via [`FunctionInfo`] which is automatically
generated by the [`TypedFunction`] trait. This allows them to return information about the
function including its name, arguments, and return type.

```rust
let info = String::len.get_function_info();

assert_eq!(info.name().unwrap(), "alloc::string::String::len");
assert_eq!(info.arg_count(), 1);
assert!(info.args()[0].is::<&String>());
assert!(info.return_info().is::<usize>());
```

One thing to note is that closures, anonymous functions, and function pointers
are not automatically given names. For these cases, names can be provided manually.

The same is true for all arguments including `self` arguments: names are not automatically
generated and must be supplied manually if desired.

Using `FunctionInfo`, a `DynamicFunction` will print out its signature when debug-printed.

```rust
dbg!(String::len.into_function());
// Outputs:
// DynamicFunction(fn alloc::string::String::len(_: &alloc::string::String) -> usize)
```

#### Manual Construction

For cases where `IntoFunction` won't work, such as for functions with too many arguments
or for functions with more complex lifetimes, `DynamicFunction` can also be constructed manually.

```rust
// Note: This function would work with `IntoFunction`,
// but for demonstration purposes, we'll construct it manually.
let add_to = DynamicFunction::new(
    |mut args| {
        let a = args.take::<i32>()?;
        let b = args.take_mut::<i32>()?;

        *b += a;

        Ok(Return::unit())
    },
    FunctionInfo::named("add_to")
        .with_arg::<i32>("a")
        .with_arg::<&mut i32>("b")
        .with_return::<()>(),
);
```

#### The Function Registry

To make it easier to work with reflected functions, a dedicated [`FunctionRegistry`] has been added.
This works similarly to the [`TypeRegistry`] where functions can be registered and retrieved by name.

```rust
let mut registry = FunctionRegistry::default();
registry
    // Named functions can be registered directly
    .register(add)?
    // Unnamed functions (e.g. closures) must be registered with a name
    .register_with_name("add_3", |a: i32, b: i32, c: i32| a + b + c)?;

let add = registry.get("my_crate::math::add").unwrap();
let add_3 = registry.get("add_3").unwrap();
```

For better integration with the rest of Bevy, a new [`AppFunctionRegistry`] resource has been added
along with registration methods on [`App`].

#### The `Function` Trait

A new reflection trait—appropriately called [`Function`]—has been added to correspond to functions.

Due to limitations in Rust, we're unable to implement this trait for all functions,
but it does make it possible to pass around a `DynamicFunction` as a [`PartialReflect`] trait object.

```rust
#[derive(Reflect)]
#[reflect(from_reflect = false)]
struct EventHandler {
    callback: DynamicFunction<'static>,
}

let event_handler: Box<dyn Struct> = Box::new(EventHandler {
    callback: (|| println!("Event fired!")).into_function(),
});

let field = event_handler.field("callback").unwrap();

if let ReflectRef::Function(callback) = field.reflect_ref() {
    callback.reflect_call(ArgList::new()).unwrap();
}
```

#### Limitations

While this feature is quite powerful already, there are still a number of limitations.

Firstly, `IntoFunction`/`IntoFunctionMut` only work for functions with up to 16 arguments,
and only support returning borrowed data where the lifetime is tied to the first argument
(normally `self` in methods).

Secondly, the `Function` trait can't be implemented for all functions due to how the function
reflection traits are defined.

Thirdly, all arguments and return types must have derived `Reflect`.
This can be confusing for certain types such as `&str` since only `&'static str` implements
`Reflect` and its borrowed version would be `&&'static str`.

Lastly, while generic functions are supported, they must first be manually monomorphized.
This means that if you have a generic function like `fn foo<T>()`, you have to create the
`DynamicFunction` like `foo::<i32>.into_function()`.

Most of these limitations are due to Rust itself.
The [lack of variadics] and [issues with coherence] are among the two biggest difficulties
to work around.
Despite this, we will be looking into ways of improving the ergonomics and capabilities 
of this feature in future releases.

We already have a [PR](https://github.com/bevyengine/bevy/pull/15074) up to add support for overloaded functions: functions with a variable
number of arguments and argument types.

[`bevy_reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/
[`Reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Reflect.html
[`DynamicFunction`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/struct.DynamicFunction.html
[`IntoFunction`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/trait.IntoFunction.html
[`ArgList`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/args/struct.ArgList.html
[`FunctionResult`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/type.FunctionResult.html
[`Return`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/enum.Return.html
[`FunctionError`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/enum.FunctionError.html
[`DynamicFunctionMut`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/struct.DynamicFunctionMut.html
[`IntoFunctionMut`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/trait.IntoFunctionMut.html
[`FunctionInfo`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/struct.FunctionInfo.html
[`TypedFunction`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/trait.TypedFunction.html
[`FunctionRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/struct.FunctionRegistry.html
[`TypeRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/struct.TypeRegistry.html
[`AppFunctionRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_ecs/reflect/struct.AppTypeRegistry.html
[`App`]: https://docs.rs/bevy_reflect/0.15/bevy_app/struct.App.html
[`Function`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/func/trait.Function.html
[`PartialReflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.PartialReflect.html
[lack of variadics]: https://poignardazur.github.io/2024/05/25/report-on-rustnl-variadics/
[issues with coherence]: https://doc.rust-lang.org/rustc/lints/listing/warn-by-default.html#coherence-leak-check



--- END FILE `release-content/0.15/release-notes/function_reflection.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/reflection_serialization.md` ---


#### Serialization with registry context

[`bevy_reflect`] provides a way to easily serialize and deserialize nearly any type that
implement [`Reflect`]. It does so by relying purely on the reflection APIs and the [`TypeRegistry`],
without having to know the type at compile-time.

However, sometimes serialization/deserialization for a type requires more explicit control.
In such cases, a custom `Serialize`/`Deserialize` implementation can be provided by registering
the [`ReflectSerialize`]/[`ReflectDeserialize`] type data for the type in the `TypeRegistry`.

This approach generally works well enough for most cases.
However, sometimes you want to handle the case for your type alone and continue using reflection
for the rest of the fields.
For example, you might want to serialize your type as a map that includes a few extra entries,
but you still want to use the reflection serializer for each value.

Unfortunately, not only does this not nest well within serializers,
but it also means you need to manually capture a reference to the `TypeRegistry` 
so that you can pass it down to the nested reflection serializers.
What this basically means is that you can't use custom logic along with reflection-based serialization.

Thankfully, Bevy 0.15 introduces the [`SerializeWithRegistry`] and [`DeserializeWithRegistry`] traits,
which work much like `Serialize` and `Deserialize` but with an additional `TypeRegistry` parameter.
This allows you to perform your custom logic while still being able to continue using reflection
for the rest.

```rust
impl SerializeWithRegistry for MyType {
    fn serialize<S>(&self, serializer: S, registry: &TypeRegistry) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let state = serializer.serialize_map(None)?;

        // ...custom logic...

        state.serialize_entry(
            "data",
            // Continue using reflection-based serialization
            &ReflectSerializer::new(
                self.data,
                registry,
            ),
        )?;

        state.end()
    }
}
```

With your custom serialization and deserialization logic in place, you can then register the 
[`ReflectSerializeWithRegistry`] and [`ReflectDeserializeWithRegistry`] type data for your type
to have the reflection serializer/deserializer make use of your custom logic for all instances
of your type.

#### Reflect de/serializer processors

Alongside `SerializeWithRegistry` and `DeserializeWithRegistry`, a new tool has been added for users
who use the reflect machinery for de/serialization. When using the `ReflectSerializer` or
`ReflectDeserializer`, you can now use `with_processor` and pass in a *de/serializer processor*.
This processor allows you to override the de/serialization logic for specific values and specific
types, while also capturing any context you might need inside the processor itself.

The motivating example for this is being able to deserialize `Handle<T>`s properly inside an asset
loader when reflect-deserializing. Let's imagine that we have an asset that looks like this:

```rust
#[derive(Debug, Clone, Reflect)]
struct AnimationGraph {
    nodes: Vec<Box<dyn AnimationNode>>,
}

trait AnimationNode: Send + Sync + Reflect { /* .. */ }

#[derive(Debug, Clone, Reflect)]
struct ClipNode {
    clip: Handle<AnimationClip>
}

impl AnimationNode for ClipNode { /* .. */ }

#[derive(Debug, Clone, Reflect)]
struct AdjustSpeedNode {
    speed_multiplier: f32,
}

impl AnimationNode for AdjustSpeedNode { /* .. */ }
```

```ron
(
    animation_graph: (
        nodes: [
            {
                "my_app::animation::node::ClipNode": (
                    clip: "animations/run.anim.ron",
                )
            },
            {
                "my_app::animation::node::AdjustSpeedNode": (
                    speed_multiplier: 1.5,
                )
            }
        ]
    )
)
```

When we write an `AssetLoader` for this `AnimationGraph`, we have access to a `&mut LoadContext`
which we can use to start new asset load operations, and get a `Handle` to that asset. We can also
use the existing `ReflectDeserializer` to deserialize `Box<dyn AnimationNode>`s. However, when the
deserializer encounters a `Handle<AnimationClip>`, this will be deserialized as `Handle::default`
and no asset load will be kicked off, making the handle useless.

With a [`ReflectDeserializerProcessor`], we can pass in a processor which captures the
`&mut LoadContext` and, if it encounters a `Handle<T>`, it will kick off an asset load for `T`,
and assigns the result of that load to the field it's deserializing.

```rust
struct HandleProcessor<'a> {
    load_context: &'a mut LoadContext,
}

impl ReflectDeserializerProcessor for HandleProcessor<'_> {
    fn try_deserialize<'de, D>(
        &mut self,
        registration: &TypeRegistration,
        _registry: &TypeRegistry,
        deserializer: D,
    ) -> Result<Result<Box<dyn PartialReflect>, D>, D::Error>
    where
        D: Deserializer<'de>,
    {
        let Some(reflect_handle) = registration.data::<ReflectHandle>() else {
            // we don't want to deserialize this - give the deserializer back
            // and do default deserialization logic
            return Ok(Err(deserializer));
        };

        let asset_type_id = reflect_handle.asset_type_id();
        let asset_path = deserializer.deserialize_str(AssetPathVisitor)?;

        let handle: Handle<LoadedUntypedAsset> = self.load_context
            .loader()
            .with_dynamic_type(asset_type_id)
            .load(asset_path);
        Ok(Box::new(handle))
    }
}
```

Combined with [`ReflectSerializerProcessor`], this can be used to round-trip `Handle`s to/from string
asset paths.

The processors take priority over all other serde logic, including `De/SerializeWithRegistry`, so it
can be used to override any reflect serialization logic.

#### Contextual Serialization Errors

Sometimes when working with the reflection serializer and deserializer, 
it can be difficult to track down the source of an error. 
Since we can't tell whether a type can be serialized or not until runtime, 
an un-serializable type might slip into a type that is supposed to be serializable.

In Bevy 0.15, a new default [`debug`] feature has been added to the `bevy_reflect` crate,
which allows the serializers and deserializers to retain contextual information in order to
provide the type's "stack" when an error occurs.

These messages can be used to more easily track down the source of the error:

```
type `bevy_utils::Instant` did not register the `ReflectSerialize` type data. For certain types, this may need to be registered manually using `register_type_data` (stack: `bevy_time::time::Time<bevy_time::real::Real>` -> `bevy_time::real::Real` -> `bevy_utils::Instant`)
```

[`bevy_reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/
[`Reflect`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.Reflect.html
[`TypeRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/struct.TypeRegistry.html
[`ReflectSerialize`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.ReflectSerialize.html
[`ReflectDeserialize`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.ReflectDeserialize.html
[`SerializeWithRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/serde/trait.SerializeWithRegistry.html
[`DeserializeWithRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/serde/trait.DeserializeWithRegistry.html
[`ReflectSerializeWithRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/serde/trait.ReflectSerializeWithRegistry.html
[`ReflectDeserializeWithRegistry`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/serde/trait.ReflectDeserializeWithRegistry.html
[`ReflectDeserializerProcessor`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/serde/trait.ReflectDeserializerProcessor.html
[`ReflectSerializerProcessor`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/serde/trait.ReflectSerializerProcessor.html
[`debug`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/index.html#debug

--- END FILE `release-content/0.15/release-notes/reflection_serialization.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/type_info_improvements.md` ---


With [`bevy_reflect`], compile-time type information can be retrieved from a reflected type as [`TypeInfo`].

Bevy 0.15 adds many improvements and convenience methods for working with `TypeInfo`.

#### Generic Parameter Info

The first addition is the ability to get information about a type's generic parameters.
This not includes the parameter's type, but also its name and—if it's a const parameter—its default value.

```rust
#[derive(Reflect)]
struct MyStruct<T>(T);

let generics = MyStruct::<f32>::type_info().generics();

let t = generics.get(0).unwrap();
assert_eq!(t.name(), "T");
assert!(t.ty().is::<f32>());
assert!(!t.is_const());
```

#### Nested `TypeInfo`

Pretty much every type in Rust is made up of other types.
Structs, maps, lists—they all contain other types.

In previous versions of Bevy, `TypeInfo` granted you limited access to type information of
these nested types. It mostly just provided the type's [`TypeId`] and [`TypePath`].

However, in Bevy 0.15, you can now directly access the `TypeInfo` of these nested types.

```rust
#[derive(Reflect)]
struct Row {
  id: usize
}

let struct_info: StructInfo = Row::type_info().as_struct();

let field: NamedField = struct_info.field("id").unwrap();

// `NamedField` now exposes a way to fetch the `TypeInfo` of the field's type
let field_info: TypeInfo = field.type_info().unwrap();
assert!(field_info.is::<usize>());
```

#### `TypeInfo` Convenience Casts

In most cases, `TypeInfo` needs to first be pattern matched to the correct variant in order to gain full access
to the type's compile-time information.
This can be mildly annoying when you already know the variant ahead of time.
This often occurs when writing tests, but also shows up when trying to get the type's [`ReflectRef`] data
along with its `TypeInfo`. It tends to looks something like:

```rust
// We have to pattern match on `ReflectRef`...
let ReflectRef::List(list) = reflected_value.reflect_ref() else {
    panic!("expected a list");
};

// ...and still need to pattern match on `TypeInfo`
let TypeInfo::List(list_info) = reflected_value.get_represented_type_info().unwrap() else {
    panic!("expected a list info");
};
```

In such cases, the variant is already verified via the `ReflectRef` but the
`TypeInfo` must still be pattern matched regardless.

In Bevy 0.15, convenience methods have been added to `TypeInfo`, `ReflectRef`, [`ReflectMut`], and [`ReflectOwned`]
to conveniently cast to the expected variant or return an error upon failure.

```rust
// We can simply verify the kind of our reflected value once...
let ReflectRef::List(list) = reflected_value.reflect_ref() else {
    panic!("expected a list");
};

// ...and just assert the `TypeInfo`
let list_info = reflected_value.get_represented_type_info().unwrap().as_list().unwrap();
```

If the `.as_list()` cast fails in the snippet above, it will return an error detailing what [kind]
we expected (i.e. `List`) and what we actually got (e.g. `Array`, `Struct`, etc.).

And this works in the opposite direction as well:

```rust
let TypeInfo::List(list_info) = reflected_value.get_represented_type_info().unwrap() else {
    panic!("expected a list info");
};

let list = reflected_value.reflect_ref().as_list().unwrap();
```

[`bevy_reflect`]: https://docs.rs/bevy_reflect/0.15/
[`TypeInfo`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/enum.TypeInfo.html
[`ReflectRef`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/enum.ReflectRef.html
[`ReflectMut`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/enum.ReflectMut.html
[`ReflectOwned`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/enum.ReflectOwned.html
[`TypeId`]: https://doc.rust-lang.org/std/any/struct.TypeId.html
[`TypePath`]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/trait.TypePath.html
[kind]: https://docs.rs/bevy_reflect/0.15/bevy_reflect/enum.ReflectKind.html


--- END FILE `release-content/0.15/release-notes/type_info_improvements.md` ---


--- BEGIN FILE `release-content/0.15/release-notes/virtual_geometry.md` ---


Virtual geometry (the `meshlet` feature) got a ton of improvements in Bevy 0.15. It's still not production ready, and will remain as an experimental module, but performance has been greatly improved upon since the last release.

For all the interesting details, read the [author's blog post](https://jms55.github.io/posts/2024-11-14-virtual-geometry-bevy-0-15).

For existing users of this feature:
* Your GPU must now support `WgpuFeatures::SHADER_INT64_ATOMIC_MIN_MAX` to use this feature. As forewarned in the previous release, older GPUs may no longer be compatible.
* You must regenerate your MeshletMesh assets. MeshletMesh assets generated in Bevy 0.14 are not compatible with Bevy 0.15.
* Make sure you read both the migration guide and the updated rustdoc for full details on how to upgrade your project.


--- END FILE `release-content/0.15/release-notes/virtual_geometry.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/13045_Support_on_thread_spawn_and_on_thread_destroy_for_TaskPool.md` ---


- `TaskPooolThreadAssignmentPolicy` now has two additional fields: `on_thread_spawn` and `on_thread_destroy`. Please consider defaulting them to `None`.


--- END FILE `release-content/0.16/migration-guides/13045_Support_on_thread_spawn_and_on_thread_destroy_for_TaskPool.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/14780_Link_iOS_example_with_rustc_and_avoid_C_trampoline.md` ---


**If you have been building your application for iOS:**

Previously, the `#[bevy_main]` attribute created a `main_rs` entry point that most Xcode templates were using to run your Rust code from C. This was found to be unnecessary, as you can simply let Rust build your application as a binary, and run that directly.

You have two options for dealing with this.

#### New, suggested approach

Preferred option is to remove your “compile” and “link” build phases, and instead replace it with a “run script” phase that invokes `cargo build --bin ...`, and moves the built binary to the Xcode path `$TARGET_BUILD_DIR/$EXECUTABLE_PATH`. An example of how to do this can be viewed in [mobile example](https://github.com/bevyengine/bevy/tree/main/examples/mobile).

If you are not sure how to do this, consider one of two ways:
- replace local mobile `game` crate with the one in repo and reaplly your changes.
- replicate the changes from [pull request](https://github.com/bevyengine/bevy/pull/14780) in your `mobile` crate.

To make the debugging experience in Xcode nicer after this, you might also want to consider either enabling `panic = "abort"` or to set a breakpoint on the `rust_panic` symbol.

#### Restoring old behaviour

If you’ve added further C code and Xcode customizations, or it makes sense for your use-case to continue link with Xcode, you can revert to the old behaviour by adding code below to your `main.rs` file:

```rust
#[cfg(target_os = "ios")]
#[no_mangle]
extern "C" fn main_rs() {
    main()
}
```

Note that the old approach of linking a static library prevents the Rust standard library from doing runtime initialization, so certain functionality provided by `std` might be unavailable (stack overflow handlers, stdout/stderr flushing and other such functionality provided by the initialization routines).


--- END FILE `release-content/0.16/migration-guides/14780_Link_iOS_example_with_rustc_and_avoid_C_trampoline.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/15487_Remove_the_meta_field_from_LoadedAsset_and_ErasedLoadedAss.md` ---


`LoadedAsset` used to have a `meta` field for storing metadata. This field was unused and inaccessible, however, so in 0.16 it has been removed. Due to this change, several method signatures have also changed:

- `ErasedAssetLoader::load()` now takes `meta: &(dyn AssetMetaDyn + 'static)` instead of a `Box<dyn AssetMetaDyn>`.
- `LoadedAsset::new_with_dependencies()` no longer requires a `meta` argument.
- `LoadContext::finish()` no longer requires a `meta` argument.


--- END FILE `release-content/0.16/migration-guides/15487_Remove_the_meta_field_from_LoadedAsset_and_ErasedLoadedAss.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/15519_Remove_petgraph_from_bevy_ecs.md` ---


Bevy's ECS no longer depends on the `petgraph` crate. As such, usage of `petgraph::graph::DiGraph` has been replaced with `bevy::ecs::schedule::graph::DiGraph`. This mainly affects code that uses the `Dag::graph()` method.

If you require the `petgraph` version of `DiGraph`, you can manually construct it by iterating over all edges and nodes in Bevy's `DiGraph`.


--- END FILE `release-content/0.16/migration-guides/15519_Remove_petgraph_from_bevy_ecs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/15858_Introduce_methods_on_QueryState_to_obtain_a_Query.md` ---


`Query::to_readonly()` has been renamed to `Query::as_readonly()` to reflect that it is cheap to call.


--- END FILE `release-content/0.16/migration-guides/15858_Introduce_methods_on_QueryState_to_obtain_a_Query.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16069_Reduce_the_clusterable_object_UBO_size_below_16384_for_Web.md` ---


`MAX_UNIFORM_BUFFER_CLUSTERABLE_OBJECTS` has been reduced from `256` to `204`.


--- END FILE `release-content/0.16/migration-guides/16069_Reduce_the_clusterable_object_UBO_size_below_16384_for_Web.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16072_Move_TextureAtlas_into_UiImage_and_remove_impl_Component_f.md` ---


Before:

```rust
commands.spawn((
  UiImage::new(image),
  TextureAtlas { index, layout },
));
```

After:

```rust
commands.spawn(UiImage::from_atlas_image(image, TextureAtlas { index, layout }));
```

Before:

```rust
commands.spawn(UiImage {
    texture: some_image,
    ..default()
})
```

After:

```rust
commands.spawn(UiImage {
    image: some_image,
    ..default()
})
```


--- END FILE `release-content/0.16/migration-guides/16072_Move_TextureAtlas_into_UiImage_and_remove_impl_Component_f.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16082_Fix_bevy_picking_plugin_suffixes.md` ---


- `MeshPickingBackend` is now named `MeshPickingPlugin`.
- `MeshPickingBackendSettings` is now named `MeshPickingSettings`.
- `SpritePickingBackend` is now named `SpritePickingPlugin`.
- `UiPickingBackendPlugin` is now named `UiPickingPlugin`.
- `DefaultPickingPlugins` is now a a `PluginGroup` instead of a `Plugin`.


--- END FILE `release-content/0.16/migration-guides/16082_Fix_bevy_picking_plugin_suffixes.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16088_Improved_UiImage_and_Sprite_scaling_and_slicing_APIs.md` ---


The `ImageScaleMode` component has been removed. Instead, `SpriteImageMode` and `NodeImageMode` have been created for a new field `image_mode` on both `Sprite` and `UiImage`

In most cases, this means code that spawns an entity with
```rust
(
    UiImage::new(image.clone()),
    ImageScaleMode::Sliced(slicer.clone()),
)
```
should be converted to:
```rust
(
    UiImage::new(image.clone())
        .with_mode(NodeImageMode::Sliced(slicer.clone())),
)
```


--- END FILE `release-content/0.16/migration-guides/16088_Improved_UiImage_and_Sprite_scaling_and_slicing_APIs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16090_Adding_alpha_threshold_to_OrderIndependentTransparencySett.md` ---


If you previously explicitly initialized OrderIndependentTransparencySettings with your own `layer_count`, you will now have to add either a `..default()` statement or an explicit `alpha_threshold` value:

```rust
fn setup(mut commands: Commands) {
    commands.spawn((
        Camera3d::default(),
        OrderIndependentTransparencySettings {
            layer_count: 16,
            ..default()
        },
    ));
}
```


--- END FILE `release-content/0.16/migration-guides/16090_Adding_alpha_threshold_to_OrderIndependentTransparencySett.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16095_Native_unclipped_depth_on_supported_platforms.md` ---


- `MeshPipelineKey::DEPTH_CLAMP_ORTHO` is now `MeshPipelineKey::UNCLIPPED_DEPTH_ORTHO`
- The `DEPTH_CLAMP_ORTHO` shaderdef has been renamed to `UNCLIPPED_DEPTH_ORTHO_EMULATION`
- `clip_position_unclamped: vec4<f32>` is now `unclipped_depth: f32`


--- END FILE `release-content/0.16/migration-guides/16095_Native_unclipped_depth_on_supported_platforms.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16097_Remove_custom_rounding.md` ---


`UiSurface::get_layout` now also returns the final sizes before rounding. Call `.0` on the `Ok` result to get the previously returned `taffy::Layout` value.


--- END FILE `release-content/0.16/migration-guides/16097_Remove_custom_rounding.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16139_ReflectBundleremove_improvement.md` ---


If you don’t need the returned value from `remove`, discard it.


--- END FILE `release-content/0.16/migration-guides/16139_ReflectBundleremove_improvement.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16219_Flush_commands_after_every_mutation_in_WorldEntityMut.md` ---


Previously, `EntityWorldMut` triggered command queue flushes in unpredictable places, which could interfere with hooks and observers. Now the command queue is always flushed immediately after `EntityWorldMut` spawns or despawns an entity, or adds, removes, or replaces a component.

As a side effect of this change, there is a new possibility that a hook or observer may despawn an entity that is being referred to by `EntityWorldMut`. If any of `EntityWorldMut`'s methods detect that the entity is despawned, they will panic. If you know this is a possibility and wish to avoid panicking, you may check that the entity is despawned with `EntityWorldMut::is_despawned()`.


--- END FILE `release-content/0.16/migration-guides/16219_Flush_commands_after_every_mutation_in_WorldEntityMut.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16222_Gamepad_improvements.md` ---


- `Gamepad` fields are now public.
- Instead of using `Gamepad` delegates like `Gamepad::just_pressed`, call these methods directly on the fields.


--- END FILE `release-content/0.16/migration-guides/16222_Gamepad_improvements.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16233_Use_Name_component_for_gamepad.md` ---


- `GamepadInfo` no longer exists:
  - Name now accessible via `Name` component.
  - Other information available on `Gamepad` component directly.
  - `GamepadConnection::Connected` now stores all info fields directly.


--- END FILE `release-content/0.16/migration-guides/16233_Use_Name_component_for_gamepad.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16269_Make_ComponentTicks_field_public.md` ---


- Instead of using `ComponentTicks::last_changed_tick` and `ComponentTicks::added_tick` methods, access fields directly.


--- END FILE `release-content/0.16/migration-guides/16269_Make_ComponentTicks_field_public.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16271_UiImage__ImageNode_UiImageSize__ImageNodeSize.md` ---


Before:

```rust
commands.spawn(UiImage::new(image));
```

After:

```rust
commands.spawn(ImageNode::new(image));
```


--- END FILE `release-content/0.16/migration-guides/16271_UiImage__ImageNode_UiImageSize__ImageNodeSize.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16301_Expose_Pipeline_Compilation_Zero_Initialize_Workgroup_Memo.md` ---


- add `zero_initialize_workgroup_memory: false,` to `ComputePipelineDescriptor` or `RenderPipelineDescriptor` structs to preserve 0.14 functionality, add `zero_initialize_workgroup_memory: true,` to restore bevy 0.13 functionality.


--- END FILE `release-content/0.16/migration-guides/16301_Expose_Pipeline_Compilation_Zero_Initialize_Workgroup_Memo.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16327_Rename_Rot2angle_between_to_Rot2angle_to.md` ---


`Rot2::angle_between` has been deprecated, use `Rot2::angle_to` instead, the semantics of `Rot2::angle_between` will change in the future.


--- END FILE `release-content/0.16/migration-guides/16327_Rename_Rot2angle_between_to_Rot2angle_to.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16331_Rename_PointerDownUp__PointerPressedReleased_in_bevy_picki.md` ---


#### `bevy_picking/src/pointer.rs`

__`enum PressDirection`:__
- `PressDirection::Down` changes to `PressDirection::Pressed`.
- `PressDirection::Up` changes to `PressDirection::Released`.

These changes are also relevant when working with `enum PointerAction`

#### `bevy_picking/src/events.rs`

Clicking and pressing Events in events.rs categories change from [Down], [Up], [Click] to [Pressed], [Released], [Click].

- `struct Down` changes to `struct Pressed` - fires when a pointer button is pressed over the ‘target’ entity.
- `struct Up` changes to `struct Released` - fires when a pointer button is released over the ‘target’ entity.
- `struct Click` now fires when a pointer sends a Pressed event followed by a Released event on the same ‘target’.
- `struct DragStart` now fires when the ‘target’ entity receives a pointer Pressed event followed by a pointer Move event.
- `struct DragEnd` now fires when the ‘target’ entity is being dragged and receives a pointer Released event.
- `PickingEventWriters<'w>::down_events: EventWriter<'w, Pointer<Down>>` changes to `PickingEventWriters<'w>::pressed_events: EventWriter<'w, Pointer<Pressed>>`.
- `PickingEventWriters<'w>::up_events changes to PickingEventWriters<'w>::released_events`.


--- END FILE `release-content/0.16/migration-guides/16331_Rename_PointerDownUp__PointerPressedReleased_in_bevy_picki.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16348_Remove_deprecated_component_reads_and_writes.md` ---


The following methods are now replaced by `Access::try_iter_component_access()`:

- `Access::component_reads_and_writes()`
- `Access::component_reads()`
- `Access::component_writes()`

As `try_iter_component_access()` returns a `Result`, you’ll now need to handle the failing case (e.g. return early from a system). There is currently a single failure mode, `UnboundedAccess`, which occurs when the `Access` is for all `Components` _except_ certain exclusions. Since this list is infinite, there is no meaningful way for `Access` to provide an iterator. Instead, get a list of components (e.g. from the `Components` structure) and iterate over that instead, filtering using `Access::has_component_read()`, `Access::has_component_write()`, etc.

Additionally, you’ll need to `filter_map()` the accesses based on which method you’re attempting to replace:

| 0.15                                   | 0.16                        |
|----------------------------------------|-----------------------------|
| `Access::component_reads_and_writes()` | `Exclusive(_) \| Shared(_)` |
| `Access::component_reads()`            | `Shared(_)`                 |
| `Access::component_writes()`           | `Exclusive(_)`              |

To ease migration, please consider the below extension trait which you can include in your project:

```rust
pub trait AccessCompatibilityExt {
    /// Returns the indices of the components this has access to.
    fn component_reads_and_writes(&self) -> impl Iterator<Item = T> + '_;

    /// Returns the indices of the components this has non-exclusive access to.
    fn component_reads(&self) -> impl Iterator<Item = T> + '_;

    /// Returns the indices of the components this has exclusive access to.
    fn component_writes(&self) -> impl Iterator<Item = T> + '_;
}

impl<T: SparseSetIndex> AccessCompatibilityExt for Access<T> {
    fn component_reads_and_writes(&self) -> impl Iterator<Item = T> + '_ {
        self
            .try_iter_component_access()
            .expect("Access is unbounded. Please refactor the usage of this method to directly use try_iter_component_access")
            .filter_map(|component_access| {
                let index = component_access.index().sparse_set_index();

                match component_access {
                    ComponentAccessKind::Archetypal(_) => None,
                    ComponentAccessKind::Shared(_) => Some(index),
                    ComponentAccessKind::Exclusive(_) => Some(index),
                }
            })
    }

    fn component_reads(&self) -> impl Iterator<Item = T> + '_ {
        self
            .try_iter_component_access()
            .expect("Access is unbounded. Please refactor the usage of this method to directly use try_iter_component_access")
            .filter_map(|component_access| {
                let index = component_access.index().sparse_set_index();

                match component_access {
                    ComponentAccessKind::Archetypal(_) => None,
                    ComponentAccessKind::Shared(_) => Some(index),
                    ComponentAccessKind::Exclusive(_) => None,
                }
            })
    }

    fn component_writes(&self) -> impl Iterator<Item = T> + '_ {
        self
            .try_iter_component_access()
            .expect("Access is unbounded. Please refactor the usage of this method to directly use try_iter_component_access")
            .filter_map(|component_access| {
                let index = component_access.index().sparse_set_index();

                match component_access {
                    ComponentAccessKind::Archetypal(_) => None,
                    ComponentAccessKind::Shared(_) => None,
                    ComponentAccessKind::Exclusive(_) => Some(index),
                }
            })
    }
}
```

Please take note of the use of `expect()` in this code. You should consider using this as a starting point for a more appropriate migration based on your specific needs.


--- END FILE `release-content/0.16/migration-guides/16348_Remove_deprecated_component_reads_and_writes.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16368_Add_a_bindless_mode_to_AsBindGroup.md` ---


- `RenderAssets::prepare_asset` now takes an `AssetId` parameter.
- Bin keys now have Bevy-specific material bind group indices instead of `wgpu` material bind group IDs, as part of the bindless change. Use the new `MaterialBindGroupAllocator` to map from bind group index to bind group ID.


--- END FILE `release-content/0.16/migration-guides/16368_Add_a_bindless_mode_to_AsBindGroup.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16372_Add_Immutable_Component_Support.md` ---


- When implementing `Component` manually, you must now provide a type for `Mutability`. The type `Mutable` provides equivalent behaviour to earlier versions of `Component`:

```rust
impl Component for Foo {
    type Mutability = Mutable;
    // ...
}
```

- When working with generic components, you may need to specify that your generic parameter implements `Component<Mutability = Mutable>` rather than `Component` if you require mutable access to said component.
- The entity entry API has had to have some changes made to minimise friction when working with immutable components. Methods which previously returned a `Mut<T>` will now typically return an `OccupiedEntry<T>` instead, requiring you to add an `into_mut()` to get the `Mut<T>` item again.


--- END FILE `release-content/0.16/migration-guides/16372_Add_Immutable_Component_Support.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16375_Only_use_physical_coords_internally_in_bevy_ui.md` ---


`ComputedNode`’s fields and methods now use physical coordinates.
`ComputedNode` has a new field `inverse_scale_factor`. Multiplying the physical coordinates by the `inverse_scale_factor` will give the logical values.


--- END FILE `release-content/0.16/migration-guides/16375_Only_use_physical_coords_internally_in_bevy_ui.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16388_Add_optional_transparency_passthrough_for_sprite_backend_w.md` ---


Sprite picking now ignores transparent regions (with an alpha value less than or equal to 0.1). To configure this, modify the `SpriteBackendSettings` resource.


--- END FILE `release-content/0.16/migration-guides/16388_Add_optional_transparency_passthrough_for_sprite_backend_w.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16402_Use_IntoIterator_instead_of_IntoVec_in_cubic_splines_inter.md` ---


The cubic splines API now uses `IntoIterator` in places where it used `Into<Vec<..>>`. For most users, this will have little to no effect (it is largely more permissive). However, in case you were using some unusual input type that implements `Into<Vec<..>>` without implementing `IntoIterator`, you can migrate by converting the input to a `Vec<..>` before passing it into the interface.


--- END FILE `release-content/0.16/migration-guides/16402_Use_IntoIterator_instead_of_IntoVec_in_cubic_splines_inter.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16405_Bind_only_the_written_parts_of_storage_buffers.md` ---


- Fixed a bug with StorageBuffer and DynamicStorageBuffer binding data from the previous frame(s) due to caching GPU buffers between frames.


--- END FILE `release-content/0.16/migration-guides/16405_Bind_only_the_written_parts_of_storage_buffers.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16459_Remove_the_min_and_max_fields_from_LayoutContext.md` ---


The `min` and `max` fields have been removed from `LayoutContext`. To retrieve these values call `min_element` and `max_element` on `LayoutContent::physical_size` instead.


--- END FILE `release-content/0.16/migration-guides/16459_Remove_the_min_and_max_fields_from_LayoutContext.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16460_Remove_flush_and_reserve_invalid_assuming_no_entities.md` ---


`Entities::flush_and_reserve_invalid_assuming_no_entities()` was a specialized method primarily used in 0.14 and earlier's rendering world design. With 0.15, `flush_and_reserve_invalid_assuming_no_entities()` went unused, so it now has been removed. If you previously required this method, you should switch to calling `Entities::reserve_entities()` and `Entities::flush_as_invalid()`.


--- END FILE `release-content/0.16/migration-guides/16460_Remove_flush_and_reserve_invalid_assuming_no_entities.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16468_Only_use_the_AABB_center_for_mesh_visibility_range_testing.md` ---


- The `VisibilityRange` component now has an extra field, `use_aabb`. Generally, you can safely set it to false.


--- END FILE `release-content/0.16/migration-guides/16468_Only_use_the_AABB_center_for_mesh_visibility_range_testing.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16473_Add_flags_to_SpritePlugin_and_UiPlugin_to_allow_disabling_.md` ---


- `UiPlugin` now contains an extra `add_picking` field if `bevy_ui_picking_backend` is enabled.
- `SpritePlugin` is no longer a unit struct, and has one field if `bevy_sprite_picking_backend` is enabled (otherwise no fields).


--- END FILE `release-content/0.16/migration-guides/16473_Add_flags_to_SpritePlugin_and_UiPlugin_to_allow_disabling_.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16481_cleanup_bevy_renderlibrs.md` ---


`RenderCreation::Manual` variant fields are now wrapped in a struct called `RenderResources`


--- END FILE `release-content/0.16/migration-guides/16481_cleanup_bevy_renderlibrs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16499_Run_observers_before_hooks_for_on_replace_and_on_remove.md` ---


The order of hooks and observers for `on_replace()` and `on_remove()` has been swapped, so now observers are run before hooks. As hooks are more primitive, they are designated as the first and last thing run when a component is added and removed. The total order for component removal can now be seen in the following table:

|0.15|0.16|
|-|-|
|`on_replace()` hook|`on_replace()` observer|
|`on_replace()` observer|`on_replace()` hook|
|`on_remove()` hook|`on_remove()` observer|
|`on_remove()` observer|`on_remove()` hook|


--- END FILE `release-content/0.16/migration-guides/16499_Run_observers_before_hooks_for_on_replace_and_on_remove.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16502_Multiple_box_shadow_support.md` ---


Bevy UI now supports multiple shadows per node. A new struct `ShadowStyle` is used to set the style for each shadow. And the `BoxShadow` component is changed to a tuple struct wrapping a vector containing a list of `ShadowStyle`s. To spawn a node with a single shadow you can use the `new` constructor function:

```rust
commands.spawn((
    Node::default(),
    BoxShadow::new(
        Color::BLACK.with_alpha(0.8),
        Val::Percent(offset.x),
        Val::Percent(offset.y),
        Val::Percent(spread),
        Val::Px(blur),
    )
));
```


--- END FILE `release-content/0.16/migration-guides/16502_Multiple_box_shadow_support.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16505_Rename_UiBoxShadowSamples_to_BoxShadowSamples.md` ---


`UiBoxShadowSamples` has been renamed to `BoxShadowSamples`


--- END FILE `release-content/0.16/migration-guides/16505_Rename_UiBoxShadowSamples_to_BoxShadowSamples.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16516_one_shot_system_cleanup.md` ---


- Change all occurrences of `World::run_system_with_input` to `World::run_system_with`.
- swap the order of input parameters for `World::run_system_once_with` such that the system comes before the input.


--- END FILE `release-content/0.16/migration-guides/16516_one_shot_system_cleanup.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16547_implement_EntitySet_and_iter_many_unique_methods.md` ---


Any custom type used as a `Borrow<Entity>` entity list item for an `iter_many` method now has to implement `EntityBorrow` instead. Any type that implements `Borrow<Entity>` can trivially implement `EntityBorrow`.


--- END FILE `release-content/0.16/migration-guides/16547_implement_EntitySet_and_iter_many_unique_methods.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16567_Rename_ArgListpush_methods_to_with_and_add_new_push_method.md` ---


Uses of the `ArgList::push` methods should be replaced with the `with` counterpart.

old|new
---|---
push_arg|with_arg
push_ref|with_ref
push_mut|with_mut
push_owned|with_owned
push_boxed|with_boxed


--- END FILE `release-content/0.16/migration-guides/16567_Rename_ArgListpush_methods_to_with_and_add_new_push_method.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16576_bevy_reflect_Remove_PartialReflectserializable.md` ---


`PartialReflect::serializable` has been removed. If you were using this to pass on serialization information, use `ReflectSerialize` instead or create custom type data to generate the `Serializable`.


--- END FILE `release-content/0.16/migration-guides/16576_bevy_reflect_Remove_PartialReflectserializable.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16589_Fallible_systems.md` ---


If you've written a custom executor, there are a few changes you will need to make in order to support fallible systems.

1. Many uses of `BoxedSystem<(), ()>` have been replaced with `ScheduleSystem`, which is a type alias to `BoxedSystem<(), Result>`.
2. Executors should obey the `SystemParamValidationError` returned by `SystemParam::validate_param()` in order to determine whether to raise an error or skip the system.
3. When an executor encounters an error, it should pass that error to `default_error_handler()`, whose behavior can be configured with the `GLOBAL_ERROR_HANDLER` static.

For more information on fallible systems, please read the module docs for `bevy::ecs::error`.


--- END FILE `release-content/0.16/migration-guides/16589_Fallible_systems.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16614_add_line_height_to_TextFont.md` ---


`TextFont` now has a `line_height` field. Any instantiation of `TextFont` that doesn’t have `..default()` will need to add this field.


--- END FILE `release-content/0.16/migration-guides/16614_add_line_height_to_TextFont.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16641_Fix_the_texture_binding_array_specialized_mesh_pipeline_an.md` ---


- Bevy will now unconditionally call `AsBindGroup::unprepared_bind_group` for your materials, so you must no longer panic in that function. Instead, return the new `AsBindGroupError::CreateBindGroupDirectly` error, and Bevy will fall back to calling `AsBindGroup::as_bind_group` as before.


--- END FILE `release-content/0.16/migration-guides/16641_Fix_the_texture_binding_array_specialized_mesh_pipeline_an.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16642_Turn_apply_deferred_into_a_ZST_System.md` ---


The special `apply_deferred()` system has been converted into the zero-sized `ApplyDeferred` type that implements `System` for performance reasons. If you manually schedule `apply_deferred()`, which usually isn't the case, you will need to use the new `ApplyDeferred` type instead. If you manually called `apply_deferred()` without your code, you may delete it, as that function did nothing.


--- END FILE `release-content/0.16/migration-guides/16642_Turn_apply_deferred_into_a_ZST_System.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16653_Implement_bindless_lightmaps.md` ---


- The `Opaque3dBinKey::lightmap_image` field is now `Opaque3dBinKey::lightmap_slab`, which is a lightweight identifier for an entire binding array of lightmaps.


--- END FILE `release-content/0.16/migration-guides/16653_Implement_bindless_lightmaps.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16673_Fix_atan2_docs.md` ---


I’m not sure if this counts as a breaking change, since the implementation clearly meant to use `f32::atan2` directly, so it was really just the parameter names that were wrong.


--- END FILE `release-content/0.16/migration-guides/16673_Fix_atan2_docs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16693_Draw_the_UI_debug_overlay_using_the_UI_renderer.md` ---


The `bevy_dev_tools::ui_debug_overlay` module has been replaced with a new debug overlay implemented using `bevy_ui`'s renderer. The new debug UI overlay still requires the `bevy_ui_debug` feature flag, but this flag is now available through `bevy` and `bevy_ui` instead of `bevy_dev_tools`. `UiDebugOptions` has been moved to `bevy_ui` as well, and now has several new options.

```rust
// 0.15
App::new()
    .add_plugins((DefaultPlugins, DebugUiPlugin))
    .insert_resource(UiDebugOptions {
        enabled: true,
    })
    .run();

// 0.16
App::new()
    // You no longer need `DebugUiPlugin`; enabling the `bevy_ui_debug` feature handles this for
    // you.
    .add_plugins(DefaultPlugins)
    .insert_resource(UiDebugOptions {
        enabled: true,
        // `UiDebugOptions` has a few new options, but for now we'll leave the defaults.
        ..default()
    })
    .run();
```


--- END FILE `release-content/0.16/migration-guides/16693_Draw_the_UI_debug_overlay_using_the_UI_renderer.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16694_Cache_systems_by_S_instead_of_SSystem.md` ---


As part of a bug fix for system caching, the `CachedSystemId` resource has been changed to store an `Entity` instead of a `SystemId`. `CachedSystemId` construction has also been changed to use the `new()` method.

```rust
// 0.15
let cached_id = CachedSystemId::<S::System>::(id);
assert!(id == cached_id.0);

// 0.16
let cached_id = CachedSystemId::<S>::new(id);
// You can convert a valid `Entity` into a `Systemid` with `SystemId::from_entity()`.
assert!(id == SystemId::from_entity(cached_id.entity));
```


--- END FILE `release-content/0.16/migration-guides/16694_Cache_systems_by_S_instead_of_SSystem.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16702_pencil2_Fix_typos_across_bevy.md` ---


> 
This section is optional. If there are no breaking changes, you can delete this section.


(kept in case I include the `reparameterize` change here)

- If this PR is a breaking change (relative to the last release of Bevy), describe how a user might need to migrate their code to support these changes
- Simply adding new functionality is not a breaking change.
- Fixing behavior that was definitely a bug, rather than a questionable design choice is not a breaking change.


--- END FILE `release-content/0.16/migration-guides/16702_pencil2_Fix_typos_across_bevy.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16703_Rename_RayCastSettings_to_MeshRayCastSettings.md` ---


`RayCastSettings` has been renamed to `MeshRayCastSettings` to avoid naming conflicts with other ray casting backends and types.


--- END FILE `release-content/0.16/migration-guides/16703_Rename_RayCastSettings_to_MeshRayCastSettings.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16716_Rename_triggerentity_to_triggertarget.md` ---


- Rename `Trigger::entity()` to `Trigger::target()`.
- Rename `ObserverTrigger::entity` to `ObserverTrigger::target`


--- END FILE `release-content/0.16/migration-guides/16716_Rename_triggerentity_to_triggertarget.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16717_Faster_entity_cloning.md` ---


- `&EntityCloner` in component clone handlers is changed to `&mut ComponentCloneCtx` to better separate data.
- Changed `EntityCloneHandler` from enum to struct and added convenience functions to add default clone and reflect handler more easily.


--- END FILE `release-content/0.16/migration-guides/16717_Faster_entity_cloning.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16725_BRP_strict_field_in_query.md` ---


Bevy Remote Protocol's `bevy/query` request now skips missing or invalid components by default instead of returning an error. This can be configured with `BrpQueryParams`'s new `strict` boolean field.

If you wish `bevy/query` to return to its previous behavior of erroring on missing / invalid components, set `"strict": true`:

```json
{
    "method": "bevy/query",
    "id": 0,
    "params": {
        "data": {
            "components": ["foo::bar::MyComponent"]
        },
        // Error if `foo::bar::MyComponent` doesn't exist.
        "strict": true
    }
}
```


--- END FILE `release-content/0.16/migration-guides/16725_BRP_strict_field_in_query.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16727_BorderRect_maintenance.md` ---


The `square` and `rectangle` functions belonging to `BorderRect` have been renamed to `all` and `axes`.


--- END FILE `release-content/0.16/migration-guides/16727_BorderRect_maintenance.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16757_Make_indirect_drawing_optout_instead_of_optin_enabling_mul.md` ---


- Indirect drawing (GPU culling) is now enabled by default, so the `GpuCulling` component is no longer available. To disable indirect mode, which may be useful with custom render nodes, add the new `NoIndirectDrawing` component to your camera.


--- END FILE `release-content/0.16/migration-guides/16757_Make_indirect_drawing_optout_instead_of_optin_enabling_mul.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16761_Introduce_support_for_mixed_lighting_by_allowing_lights_to.md` ---


- The `AmbientLight` resource, the `IrradianceVolume` component, and the `EnvironmentMapLight` component now have `affects_lightmapped_meshes` fields. If you don’t need to use that field (for example, if you aren’t using lightmaps), you can safely set the field to true.
- `DirectionalLight`, `PointLight`, and `SpotLight` now have `affects_lightmapped_mesh_diffuse` fields. If you don’t need to use that field (for example, if you aren’t using lightmaps), you can safely set the field to true.


--- END FILE `release-content/0.16/migration-guides/16761_Introduce_support_for_mixed_lighting_by_allowing_lights_to.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16796_Support_scale_factor_for_image_render_targets.md` ---


`RenderTarget::Image` now takes an `ImageRenderTarget` instead of a `Handle<Image>`. You can call `handle.into()` to construct an `ImageRenderTarget` using the same settings as before.


--- END FILE `release-content/0.16/migration-guides/16796_Support_scale_factor_for_image_render_targets.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16810_Add_AssetChanged_query_filter.md` ---


The `Assets::asset_events()` system is no longer public. If you wish to order your systems relative to asset events, use the new `AssetEvents` system set instead.


--- END FILE `release-content/0.16/migration-guides/16810_Add_AssetChanged_query_filter.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16812_Remove_the_type_parameter_from_check_visibility_and_only_i.md` ---


`check_visibility` no longer takes a `QueryFilter`, and there’s no need to add it manually to your app schedule anymore for custom rendering items. Instead, entities with custom renderable components should add the appropriate type IDs to `VisibilityClass`. See `custom_phase_item` for an example.

Similarly, all methods on `VisibleEntities` (such as `get` and `iter`) no longer take a generic parameter, and instead must be passed a `TypeId` corresponding to the component used in the `VisibilityClass` of the entity.

Before:

```rust
visible_entities.get_mut<With<Mesh3d>>();
```

After:

```rust
visible_entities.get_mut(TypeId::of::<Mesh3d>());
```


--- END FILE `release-content/0.16/migration-guides/16812_Remove_the_type_parameter_from_check_visibility_and_only_i.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16813_Add_ability_to_mute_audio_sinks.md` ---


It is now possible to mute audio sinks. Several breaking changes have been introduced to implement this feature.

First, `AudioSinkPlayback::set_volume()` now takes a mutable `&mut AudioSinkPlayback` argument instead of an immutable one. This may require you to update your system parameters:

```rust
// 0.15
fn increase_volume(sink: Single<&AudioSink, With<Music>>) {
    sink.set_volume(sink.volume() + 0.1);
}

// 0.16
fn increase_volume(mut sink: Single<&mut AudioSink, With<Music>>) {
    let current_volume = sink.volume();
    sink.set_volume(current_volume + 0.1);
}
```

Secondly, `PlaybackSettings` has a new `muted` field to specify whether an entity should start muted. You may need to set this field when creating `PlaybackSettings` if you do not use function update syntax (`..default()`).

Finally, if you manually implemented audio muting using an audio sink's volume, you can switch over to using the new `AudioSinkPlayback` methods: `is_muted()`, `mute()`, `unmute()` and `toggle_mute()`.


--- END FILE `release-content/0.16/migration-guides/16813_Add_ability_to_mute_audio_sinks.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16815_Change_GpuImagesize_from_UVec2_to_Extent3d.md` ---


- `GpuImage::size` is now an `Extent3d`. To easily get 2D size, use `size_2d()`.


--- END FILE `release-content/0.16/migration-guides/16815_Change_GpuImagesize_from_UVec2_to_Extent3d.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16827_doc_fix_camera_link.md` ---


> 
This section is optional. If there are no breaking changes, you can delete this section.


- If this PR is a breaking change (relative to the last release of Bevy), describe how a user might need to migrate their code to support these changes
- Simply adding new functionality is not a breaking change.
- Fixing behavior that was definitely a bug, rather than a questionable design choice is not a breaking change.


--- END FILE `release-content/0.16/migration-guides/16827_doc_fix_camera_link.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16837_Rename_AudioSinkPlaybacktoggle_to_toggle_playback.md` ---


`AudioSinkPlayback::toggle()` has been renamed to `toggle_playback()`. This was done to create consistency with the `toggle_mute()` method added in [#16813]. Please update all references to use the new name.

```rust
// 0.15
fn pause(keyboard_input: Res<ButtonInput<KeyCode>>, sink: Single<&AudioSink>) {
    if keyboard_input.just_pressed(KeyCode::Space) {
        sink.toggle();
    }
}

// 0.16
fn pause(keyboard_input: Res<ButtonInput<KeyCode>>, sink: Single<&AudioSink>) {
    if keyboard_input.just_pressed(KeyCode::Space) {
        sink.toggle_playback();
    }
}
```

[#16813]: https://github.com/bevyengine/bevy/pull/16813


--- END FILE `release-content/0.16/migration-guides/16837_Rename_AudioSinkPlaybacktoggle_to_toggle_playback.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16853_Remove_deprecated_ECS_items.md` ---


The following `bevy::ecs` items that were deprecated in 0.15 have been removed:

- `Events::get_reader()`
- `Events::get_reader_current()`
- `ManualEventReader`
- `Condition::and_then()`
- `Condition::or_else()`
- `World::many_entities()`
- `World::many_entities_mut()`
- `World::get_many_entities()`
- `World::get_many_entities_dynamic()`
- `World::get_many_entities_mut()`
- `World::get_many_entities_dynamic_mut()`
- `World::get_many_entities_from_set_mut()`


--- END FILE `release-content/0.16/migration-guides/16853_Remove_deprecated_ECS_items.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16863_Replace_bevy_a11yFocus_with_InputFocus.md` ---


Bevy now has first-class input handling, available in the `bevy::input_focus` module. As such, `bevy::a11y::Focus` has been replaced with `bevy::input_focus::InputFocus`. Please replace all references and imports.


--- END FILE `release-content/0.16/migration-guides/16863_Replace_bevy_a11yFocus_with_InputFocus.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16864_Expose_text_field_from_winit_in_KeyboardInput.md` ---


The `KeyboardInput` event now has a new `text` field.


--- END FILE `release-content/0.16/migration-guides/16864_Expose_text_field_from_winit_in_KeyboardInput.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16872_Rename_focus_in_bevy_picking_to_hover.md` ---


Various terms related to “focus” in `bevy_picking` have been renamed to refer to “hover” to avoid confusion with `bevy_input_focus`. In particular:

- The `update_focus` system has been renamed to `generate_hovermap`
- `PickSet::Focus` and `PostFocus` have been renamed to `Hover` and `PostHover`
- The `bevy_picking::focus` module has been renamed to `bevy_picking::hover`
- The `is_focus_enabled` field on `PickingPlugin` has been renamed to `is_hover_enabled`
- The `focus_should_run` run condition has been renamed to `hover_should_run`


--- END FILE `release-content/0.16/migration-guides/16872_Rename_focus_in_bevy_picking_to_hover.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16898_Introduce_twolevel_bins_for_multidrawable_meshes.md` ---


- The _batch set key_ is now separate from the _bin key_ in `BinnedPhaseItem`. The batch set key is used to collect multidrawable meshes together. If you aren’t using the multidraw feature, you can safely set the batch set key to `()`.


--- END FILE `release-content/0.16/migration-guides/16898_Introduce_twolevel_bins_for_multidrawable_meshes.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16910_Fix_EaseFunctionExponential_to_exactly_hit_0_0_and_1_1.md` ---


`EaseFunction::ExponentialIn`, `EaseFunction::ExponentialOut`, and `EaseFunction::ExponentialInOut` has slight discontinuities in 0.15, leading to [jumping behavior at the start and end of the function][jumping behavior]. In 0.16, these functions have been slightly adjusted so that they are continuous.

The new functions differ from the old by less than 0.001, so in most cases this change is not breaking. If, however, you depend on these easing functions for determinism, you will need to define custom curves using the previous functions.

[jumping behavior]: https://github.com/bevyengine/bevy/issues/16676


--- END FILE `release-content/0.16/migration-guides/16910_Fix_EaseFunctionExponential_to_exactly_hit_0_0_and_1_1.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16911_Remove_unused_generic_in_DeferredWorldtrigger.md` ---


In 0.15 `DeferredWorld::trigger()` had an unused generic parameter that did not affect the type of the trigger event, so it has been removed.


--- END FILE `release-content/0.16/migration-guides/16911_Remove_unused_generic_in_DeferredWorldtrigger.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16912_make_EntityHashMap_and_EntityHashSet_proper_types.md` ---


Users of `with_hasher` and `with_capacity_and_hasher` on `EntityHashMap`/`Set` must now use `new` and `with_capacity` respectively.
If the non-newtyped versions are required, they can be obtained via `Deref`, `DerefMut` or `into_inner` calls.


--- END FILE `release-content/0.16/migration-guides/16912_make_EntityHashMap_and_EntityHashSet_proper_types.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16917_impl_EntityBorrow_for_more_types.md` ---


`NormalizedWindowRef::entity` has been replaced with an `EntityBorrow::entity` impl.


--- END FILE `release-content/0.16/migration-guides/16917_impl_EntityBorrow_for_more_types.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16930_Refactor_noncore_Curve_methods_into_extension_traits.md` ---


`Curve` has been refactored so that much of its functionality is now in extension traits. Adaptors such as `map`, `reparametrize`, `reverse`, and so on now require importing `CurveExt`, while the resampling methods `resample_*` require importing `CurveResampleExt`. Both of these new traits are exported through `bevy::math::curve` and through `bevy::math::prelude`.


--- END FILE `release-content/0.16/migration-guides/16930_Refactor_noncore_Curve_methods_into_extension_traits.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16938_Make_bevy_reflect_feature_of_bevy_math_nondefault.md` ---


`bevy_reflect` has been made a non-default feature of `bevy_math`. (It is still enabled when `bevy_math` is used through `bevy`.) You may need to enable this feature if you are using `bevy_math` on its own and desire for the types it exports to implement `Reflect` and other reflection traits.


--- END FILE `release-content/0.16/migration-guides/16938_Make_bevy_reflect_feature_of_bevy_math_nondefault.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16942_Key_render_phases_off_the_main_world_view_entity_not_the_r.md` ---


<!-- TODO -->


--- END FILE `release-content/0.16/migration-guides/16942_Key_render_phases_off_the_main_world_view_entity_not_the_r.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16957_math_Add_SmoothStep_and_SmootherStep_easing_functions.md` ---


This version of bevy marks `EaseFunction` as `#[non_exhaustive]` to that future changes to add more easing functions will be non-breaking.  If you were exhaustively matching that enum – which you probably weren’t – you’ll need to add a catch-all (`_ =>`) arm to cover unknown easing functions.


--- END FILE `release-content/0.16/migration-guides/16957_math_Add_SmoothStep_and_SmootherStep_easing_functions.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/16968_Make_RawHandleWrapper_fields_private_to_save_users_from_th.md` ---


The `window_handle` and `display_handle` fields on `RawHandleWrapper` are no longer public. Use the newly added getters and setters to manipulate them instead.


--- END FILE `release-content/0.16/migration-guides/16968_Make_RawHandleWrapper_fields_private_to_save_users_from_th.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17015_Scale_input_to_account_for_deadzones.md` ---


`GamepadButtonChangedEvent.value` is now linearly rescaled to be from `0.0..=1.0` (instead of `low..=high`) and `GamepadAxisChangedEvent.value` is now linearly rescaled to be from `-1.0..=0.0`/`0.0..=1.0` (accounting for the deadzone).


--- END FILE `release-content/0.16/migration-guides/17015_Scale_input_to_account_for_deadzones.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17029_Refactor_hierarchyrelated_commands_to_remove_structs.md` ---


Several commands have been refactored to internally use closures instead of individual structs, and their structs have been removed.

If you were queuing the structs of hierarchy-related commands directly, you will need to change them to methods implemented on `EntityCommands`:

|Struct|Method|
|-|-|
|`commands.queue(AddChild { child, parent })`|`commands.entity(parent).add_child(child)` OR `commands.entity(child).insert(ChildOf(parent))`|
|`commands.queue(AddChildren { children, parent })`|`commands.entity(parent).add_children(children)`|
|`commands.queue(InsertChildren { children, parent, index })`|`commands.entity(parent).insert_children(index, children)`|
|`commands.queue(RemoveChildren { children, parent })`|`commands.entity(parent).remove_children(children)`|
|`commands.queue(ReplaceChildren { children, parent })`|`commands.entity(parent).replace_children(children)`|
|`commands.queue(ClearChildren { parent })`|`commands.entity(parent).remove::<Children>()`|
|`commands.queue(RemoveParent { child })`|`commands.entity(child).remove::<ChildOf>()`|
|`commands.queue(DespawnRecursive { entity, warn: true })`|`commands.entity(entity).despawn()`|
|`commands.queue(DespawnRecursive { entity, warn: false })`|`commands.entity(entity).try_despawn()`|
|`commands.queue(DespawnChildrenRecursive { entity, warn })`|`commands.entity(entity).despawn_related::<Children>()`|

If you were queuing the structs of event-related commands directly, you will need to change them to methods implemented on `Commands`:

|Struct|Method|
|-|-|
|`commands.queue(SendEvent { event })`|`commands.send_event(event)`|
|`commands.queue(TriggerEvent { event, targets })`|`commands.trigger_targets(event, targets)`|


--- END FILE `release-content/0.16/migration-guides/17029_Refactor_hierarchyrelated_commands_to_remove_structs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17032_Remove_unsound_Clone_impl_for_EntityMutExcept.md` ---


`EntityMutExcept` can no-longer be cloned, as doing so violates Rust's memory safety rules.


--- END FILE `release-content/0.16/migration-guides/17032_Remove_unsound_Clone_impl_for_EntityMutExcept.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17041_ExtractedSprites_slice_buffer.md` ---


- `ExtractedSprite` has a new `kind: ExtractedSpriteKind` field with variants `Single` and `Slices`. 
  - `Single` represents a single sprite. `ExtractedSprite`’s `anchor`, `rect`, `scaling_mode` and `custom_size` fields have been moved into `Single`. 
  - `Slices` contains a range that indexes into a new resource `ExtractedSlices`. Slices are used to draw elements composed from multiple sprites such as text or nine-patched borders.

- `ComputedTextureSlices::extract_sprites` has been renamed to `extract_slices`. Its `transform` and `original_entity` parameters have been removed.


--- END FILE `release-content/0.16/migration-guides/17041_ExtractedSprites_slice_buffer.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17047_Remove_the_atlas_scaling_field_from_ExtractedUiItemGylphs.md` ---


The `atlas_scaling` field from `ExtractedUiItem::Gylphs` has been removed. This shouldn’t affect any existing code as it wasn’t used for anything.


--- END FILE `release-content/0.16/migration-guides/17047_Remove_the_atlas_scaling_field_from_ExtractedUiItemGylphs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17051_Convert_to_fallible_system_in_IntoSystemConfigs.md` ---


`bevy::ecs::IntoSystemConfigs`, now known as `IntoScheduleConfigs`, is no longer implemented for `BoxedSystem<(), ()>`. This can lead to convoluted trait errors when you try to add a `BoxedSystem<(), ()>` to a schedule or app:

```
error[E0277]: `std::boxed::Box<dyn bevy::prelude::System<In = (), Out = ()>>` does not describe a valid system configuration
```

In order to avoid this error, either wrap your system in an `InfallibleSystemWrapper` before boxing it or make the system return a `Result<(), BevyError>`.

```rust
// 0.15
fn my_system() {
    println!("Hello, world!");
}

// Convert the function into a boxed system, which is a `Box<dyn System<In = (), Out = ()>>`.
let system = Box::new(IntoSystem::into_system(my_system)) as BoxedSystem;

App::new()
    .add_systems(Startup, system)
    .run();

// 0.16 (Using `InfallibleSystemWrapper`)
fn my_system() {
    println!("Hello, world!");
}

// Use `InfallibleSystemWrapper::new()` to make a system unconditionally return `Result::Ok`. The
// boxed system is now a `Box<dyn System<In = (), Out = Result<(), BevyError>>>`.
let system = Box::new(InfallibleSystemWrapper::new(IntoSystem::into_system(my_system))) as BoxedSystem<_, _>;

App::new()
    .add_systems(Startup, system)
    .run();

// 0.16 (Returning `Result<(), BevyError>`)
fn my_system() -> Result {
    println!("Hello, world!");
    Ok(())
}

// The boxed system is now a `Box<dyn System<In = (), Out = Result<(), BevyError>>>`.
let system = Box::new(IntoSystem::into_system(my_system)) as BoxedSystem<_, _>;

App::new()
    // Add the boxed system to the app.
    .add_systems(Startup, system)
    .run();
```

Note that in several cases you do not need to box your systems before adding them, such as with `App::add_systems()`, which lets you avoid this issue.


--- END FILE `release-content/0.16/migration-guides/17051_Convert_to_fallible_system_in_IntoSystemConfigs.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17063_Refactor_and_simplify_custom_projections.md` ---


- `PerspectiveProjection` and `OrthographicProjection` are no longer components. Use `Projection` instead.
- Custom projections should no longer be inserted as a component. Instead, simply set the custom projection as a value of `Projection` with `Projection::custom()`.


--- END FILE `release-content/0.16/migration-guides/17063_Refactor_and_simplify_custom_projections.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17075_Rename_track_change_detection_flag_to_track_location.md` ---


The `track_change_detection` feature flag no longer just tracks the source code location for change detection, but also where entities are spawned and despawned. As such, the feature flag has been renamed to `track_location` to better reflect its extended capabilities.


--- END FILE `release-content/0.16/migration-guides/17075_Rename_track_change_detection_flag_to_track_location.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17078_Fix_sprite_performance_regression_since_retained_render_wo.md` ---


- `ExtractedSprites` is now using `MainEntityHashMap` for storage, which is keyed on `MainEntity`.
- The render world entity corresponding to an `ExtractedSprite` is now stored in the `render_entity` member of it.


--- END FILE `release-content/0.16/migration-guides/17078_Fix_sprite_performance_regression_since_retained_render_wo.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17115_Optimize_Entitiesentity_does_not_exist_error_details_messa.md` ---


`EntityFetchError` enum has been renamed to `EntityMutableFetchError`, and its `NoSuchEntity` variant has been renamed to `EntityDoesNotExist`. Furthermore, the `EntityDoesNotExist` variant now contains an `EntityDoesNotExistError` type, which provides further details on the entity that does not exist.


--- END FILE `release-content/0.16/migration-guides/17115_Optimize_Entitiesentity_does_not_exist_error_details_messa.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17121_Support_texture_atlases_in_CustomCursorImage.md` ---


The `CustomCursor::Image` enum variant has some new fields. Update your code to set them.

Before:

```rust
CustomCursor::Image {
    handle: asset_server.load("branding/icon.png"),
    hotspot: (128, 128),
}
```

After:

```rust
CustomCursor::Image {
    handle: asset_server.load("branding/icon.png"),
    texture_atlas: None,
    flip_x: false,
    flip_y: false,
    rect: None,
    hotspot: (128, 128),
}
```


--- END FILE `release-content/0.16/migration-guides/17121_Support_texture_atlases_in_CustomCursorImage.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17131_Make_the_get_function_on_InstanceInputUniformBuffer_less_e.md` ---


`InstanceInputUniformBuffer::get` now returns `Option<BDI>` instead of `BDI` to reduce panics. If you require the old functionality of `InstanceInputUniformBuffer::get` consider using  `InstanceInputUniformBuffer::get_unchecked`.


--- END FILE `release-content/0.16/migration-guides/17131_Make_the_get_function_on_InstanceInputUniformBuffer_less_e.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17175_Allow_users_to_easily_use_bevy_sprite_and_bevy_ui_without_.md` ---


`bevy_sprite_picking_backend` is no longer included by default when using the `bevy_sprite` feature. If you are using Bevy without default features and relied on sprite picking, add this feature to your `Cargo.toml`.

`bevy_ui_picking_backend` is no longer included by default when using the `bevy_ui` feature. If you are using Bevy without default features and relied on sprite picking, add this feature to your `Cargo.toml`.


--- END FILE `release-content/0.16/migration-guides/17175_Allow_users_to_easily_use_bevy_sprite_and_bevy_ui_without_.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17211_Use_multi_draw_indirect_count_where_available_in_preparati.md` ---


- Systems that add custom phase items now need to populate the indirect drawing-related buffers. See the `specialized_mesh_pipeline` example for an example of how this is done.


--- END FILE `release-content/0.16/migration-guides/17211_Use_multi_draw_indirect_count_where_available_in_preparati.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17215_Improved_Command_Errors.md` ---


The `EntityCommands::apply()` method now takes a `EntityWorldMut`, which is an optimized version of the previous `Entity` and `&mut World` pair. `EntityWorldMut` has several existing methods for working with entities, although you may use `EntityWorldMut::id()` to access the `Entity` and `EntityWorldMut::world_scope()` to access the `&mut World`.

```rust
struct MyCommand;

fn print_entity(In(entity): In<Entity>) {
    info!("Entity: {entity}");
}

// 0.15
impl EntityCommand for MyCommand {
    fn apply(self, entity: Entity, world: &mut World) {
        world
            .run_system_cached_with(print_entity, entity)
            .unwrap();
    }
}

// 0.16
impl EntityCommand for MyCommand {
    fn apply(self, entity_world: EntityWorldMut) {
        let entity = entity_world.id();

        entity_world.world_scope(move |world: &mut World| {
            world.run_system_cached_with(print_entity, entity).unwrap();
        });
    }
}
```

Additionally, the method `EntityCommand::with_entity()` has been moved to a separate trait, `CommandWithEntity`, so that it can be generic over commands that return `Result`s.


--- END FILE `release-content/0.16/migration-guides/17215_Improved_Command_Errors.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17219_Move_TextureAtlas_and_friends_into_bevy_image.md` ---


The following types have been moved from `bevy_sprite` to `bevy_image`: `TextureAtlas`, `TextureAtlasBuilder`, `TextureAtlasSources`, `TextureAtlasLayout` and `DynamicTextureAtlasBuilder`.

If you are using the `bevy` crate, and were importing these types directly (e.g. before `use bevy::sprite::TextureAtlas`), be sure to update your import paths (e.g. after `use bevy::image::TextureAtlas`)

If you are using the `bevy` prelude to import these types (e.g. `use bevy::prelude::*`), you don’t need to change anything.

If you are using the `bevy_sprite` subcrate, be sure to add `bevy_image` as a dependency if you do not already have it, and be sure to update your import paths.


--- END FILE `release-content/0.16/migration-guides/17219_Move_TextureAtlas_and_friends_into_bevy_image.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17225_Make_sprite_picking_optin.md` ---


The sprite picking backend is now strictly opt-in using the `SpritePickingCamera` and `Pickable` components. You should add the `Pickable` component any entities that you want sprite picking to be enabled for, and mark their respective cameras with `SpritePickingCamera`.


--- END FILE `release-content/0.16/migration-guides/17225_Make_sprite_picking_optin.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17233_If_there_is_no_movement_DragStart_is_not_triggered.md` ---


Fix the missing part of Drag [https://github.com/bevyengine/bevy/pull/16950](https://github.com/bevyengine/bevy/pull/16950)


--- END FILE `release-content/0.16/migration-guides/17233_If_there_is_no_movement_DragStart_is_not_triggered.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17235_Rename_DefaultCameraView.md` ---


`DefaultCameraView` has been renamed to `UiCameraView`


--- END FILE `release-content/0.16/migration-guides/17235_Rename_DefaultCameraView.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17259_Allow_users_to_customize_history_length_in_FrameTimeDiagno.md` ---


`FrameTimeDiagnosticsPlugin` now contains two fields: `max_history_length` and `smoothing_factor`. If you manually construct this plugin and wish to retain 0.15 behavior, simply call `FrameTimeDiagnosticsPlugin::default()`. If you wish to configure the maximum history length, you may use `FrameTimeDiagnosticsPlugin::new()` instead.


--- END FILE `release-content/0.16/migration-guides/17259_Allow_users_to_customize_history_length_in_FrameTimeDiagno.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17260_Make_bevy_remote_feature_enable_serialize_feature.md` ---


The `bevy_remote` feature of `bevy` now enables the `serialize` feature automatically. If you wish to use `bevy_remote` without enabling the `serialize` feature for Bevy subcrates, you must import `bevy_remote` on its own.


--- END FILE `release-content/0.16/migration-guides/17260_Make_bevy_remote_feature_enable_serialize_feature.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17266_Rename_PickingBehavior_to_Pickable.md` ---


Change all instances of `PickingBehavior` to `Pickable`.


--- END FILE `release-content/0.16/migration-guides/17266_Rename_PickingBehavior_to_Pickable.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17348_Unify_picking_backends.md` ---


`UiPickingPlugin` and `SpritePickingPlugin` are no longer included in `DefaultPlugins`. They must be explicitly added.

`RayCastPickable` has been replaced in favor of the `MeshPickingCamera` and `Pickable` components. You should add them to cameras and entities, respectively, if you have `MeshPickingSettings::require_markers` set to `true`.


--- END FILE `release-content/0.16/migration-guides/17348_Unify_picking_backends.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17376_Change_Worldtry_despawn_and_Worldtry_insert_batch_to_return.md` ---


`World::try_despawn()` now returns a `Result` rather than a `bool`. Additionally, `World::try_insert_batch()` and `World::try_insert_batch_if_new()` now return a `Result` instead of silently failing.


--- END FILE `release-content/0.16/migration-guides/17376_Change_Worldtry_despawn_and_Worldtry_insert_batch_to_return.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17380_Remove_Event_Component_trait_bound_using_a_wrapper_type_wh.md` ---


In 0.15 the `Event` trait required the `Component` trait. This bound has been removed, as it was deemed confusing for users (events aren't typically attached to entities or queried in systems).

If you require an event to implement `Component` (which usually isn't the case), you may manually derive it and update your trait bounds.

```rust
// 0.15
#[derive(Event)]
struct MyEvent;

fn handle_event_component<T: Event>(event_component: T) {
    // Access some `Component`-specific property of the event.
    let storage_type = T::STORAGE_TYPE;
}

// 0.16
#[derive(Event, Component)]
struct MyEvent;

fn handle_event_component<T: Event + Component>(event_component: T) {
    // Access some `Component`-specific property of the event.
    let storage_type = T::STORAGE_TYPE;
}
```


--- END FILE `release-content/0.16/migration-guides/17380_Remove_Event_Component_trait_bound_using_a_wrapper_type_wh.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17398_Relationships_nonfragmenting_onetomany.md` ---


Entity relationships are now built-in to the ECS, providing significant performance and user-experience improvements. There are several changes you may need in order to update your existing code.

First, when adding children to an entity with `EntityCommands::with_children()`, the method now passes a `ChildSpawnerCommands` type to the closure instead of a `ChildBuilder`. `ChildSpawnerCommands` is slightly different from `ChildBuilder`, but is still able to accomplish the same things as before.

```rust
// 0.15
commands.spawn_empty().with_children(|builder: &mut ChildBuilder<'_>| {
    // Spawn a child of the parent entity;
    builder.spawn(MyComponent(255));

    // Get the `Entity` ID of the parent.
    let parent = builder.parent_entity();

    // Queue a new `Command` to be executed.
    builder.enqueue_command(MyCommand::new(parent));
});

// 0.16
commands.spawn_empty().with_children(|spawner: &mut ChildSpawnerCommands<'_>| {
    spawner.spawn(MyComponent(255));

    // `parent_entity()` is now `target_entity()`.
    let parent = spawner.target_entity();

    // You can now access the `Commands` struct directly, which you can then use to queue commands.
    spawner.commands().queue(my_command(parent));
});
```

Furthermore, the new relationship system encourages working with the relationship components (`ChildOf`, `Children`) directly. For example, setting the parent of an entity is a simple as inserting a `ChildOf` component:

```rust
// 0.15
commands.spawn_empty().set_parent(parent);

// 0.16
commands.spawn_empty().insert(ChildOf(parent));
```

Replacing the children of a parent now requires removing the `Children` component and re-adding children individually:

```rust
// 0.15
commands.entity(parent).replace_children(&[child1, child2]);

// 0.16
commands.entity(parent)
    .remove::<Children>()
    .add_children(&[child1, child2]);
```

Despawning has also been changed to remove the complexities of `despawn_recursive()` and `despawn_descendants()` from `EntityCommands`:

|Action|0.15|0.16|
|-|-|-|
|Despawn parent and children|`despawn_recursive()`|`despawn()`|
|Despawn children|`despawn_descendants()`|`despawn_related::<Children>()`|
|Despawn parent|`despawn()`|`remove::<Children>()`, then `despawn()`|

```rust
// 0.15
commands.entity(parent).despawn_recursive();
commands.entity(parent).despawn_descendants();
commands.entity(parent).despawn();

// 0.16
commands.entity(parent).despawn();
commands.entity(parent).despawn_related::<Children>();
commands.entity(parent).remove::<Children>().despawn();
```

Because relationships are now part of `bevy_ecs` itself, all methods from the previous `HierarchyQueryExt` extension trait are
now inherent methods on `Query`.
While these have mostly been migrated unchanged, `parent` is now `related` and `children` now `relationship_sources`,
as these methods work for any relationship, not just parent-child ones.


--- END FILE `release-content/0.16/migration-guides/17398_Relationships_nonfragmenting_onetomany.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17403_Rename_TargetCamera_to_UiTargetCamera.md` ---


`TargetCamera` has been renamed to `UiTargetCamera`.


--- END FILE `release-content/0.16/migration-guides/17403_Rename_TargetCamera_to_UiTargetCamera.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17404_Reworked_Segment_types_into_their_cartesian_forms.md` ---


The segment type constructors changed so if someone previously created a Segment2d with a direction and length they would now need to use the `from_direction` constructor


--- END FILE `release-content/0.16/migration-guides/17404_Reworked_Segment_types_into_their_cartesian_forms.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17413_Implement_experimental_GPU_twophase_occlusion_culling_for_.md` ---


- When enqueuing a custom mesh pipeline, work item buffers are now created with `bevy::render::batching::gpu_preprocessing::get_or_create_work_item_buffer`, not `PreprocessWorkItemBuffers::new`. See the `specialized_mesh_pipeline` example.


--- END FILE `release-content/0.16/migration-guides/17413_Implement_experimental_GPU_twophase_occlusion_culling_for_.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17424_Flattened_PointerActionPressed_into_Press_and_Release.md` ---


- `PointerAction::Pressed` has been separated into two variants, `PointerAction::Press` and `PointerAction::Release`.
- `PointerAction::Moved` has been renamed to `PointerAction::Move`. 
- `PointerAction::Canceled` has been renamed to `PointerAction::Cancel`.


--- END FILE `release-content/0.16/migration-guides/17424_Flattened_PointerActionPressed_into_Press_and_Release.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17427_Parent__ChildOf.md` ---


The `Parent` component has been renamed to `ChildOf` to make it more clear that entities with a `ChildOf` component are children, not parents.

Furthermore, it is now only possible to access the parent `Entity` from `ChildOf::parent()`. The `Deref` implementation has been removed and the `get()` method deprecated.

```rust
// 0.15
let parent = *child_of
// 0.16
let parent = child_of.parent()

// 0.15
let parent = child_of.get()
// 0.16
let parent = child_of.parent()
```


--- END FILE `release-content/0.16/migration-guides/17427_Parent__ChildOf.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17453_Include_ReflectFromReflect_in_all_dynamic_data_types.md` ---


The hasher in reflected `HashMap`s and `HashSet`s now have to implement `Default`. This is the case for the ones provided by Bevy already, and is generally a sensible thing to do.


--- END FILE `release-content/0.16/migration-guides/17453_Include_ReflectFromReflect_in_all_dynamic_data_types.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17469_Move_Resource_trait_to_its_own_file.md` ---


The `Resource` trait has been moved from `bevy::ecs::system::Resource` to `bevy::ecs::resource::Resource`. Please update your imports accordingly.


--- END FILE `release-content/0.16/migration-guides/17469_Move_Resource_trait_to_its_own_file.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17475_Meshmerge_to_return_a_Result.md` ---


- `Mesh::merge` now returns a `Result<(), MeshMergeError>`.


--- END FILE `release-content/0.16/migration-guides/17475_Meshmerge_to_return_a_Result.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17499_Support_for_nonbrowser_wasm.md` ---


Bevy now has support for the [`wasm32v1-none` target], which is a barebones `no_std` version of `wasm32-unknown-unknown` that disables all features past the original [W3C WebAssembly Core 1.0 spec]. As part of this change, Bevy's browser-specific WASM features have been put behind of the `web` feature flag, which is enabled by default. If you have `default-features = false` and wish to build Bevy to run on a browser, you will need to re-enable this flag:

```toml
# 0.15
[dependencies]
bevy = { version = "0.15", default-features = false }

# 0.16
[dependencies]
bevy = { version = "0.16", default-features = false, features = ["web"] }
```

[`wasm32v1-none` target]: https://doc.rust-lang.org/rustc/platform-support/wasm32v1-none.html
[W3C WebAssembly Core 1.0 spec]: https://www.w3.org/TR/wasm-core-1/


--- END FILE `release-content/0.16/migration-guides/17499_Support_for_nonbrowser_wasm.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17503_Refactored_ComponentHook_Parameters_into_HookContext.md` ---


The function signature of component hooks (`ComponentHook`) has been simplified so that all arguments beyond the `DeferredWorld` is passed in a `HookContext`. Note that because `HookContext` is plain data with all public fields, you can use de-structuring to simplify migration.

```rust
// 0.15
fn my_hook(
    mut world: DeferredWorld,
    entity: Entity,
    component_id: ComponentId,
) {
    // ...
}

// 0.16
fn my_hook(
    mut world: DeferredWorld,
    HookContext { entity, component_id, caller }: HookContext,
) {
    // ...
}
```

Likewise, if you were discarding certain parameters, you can use `..` in the de-structuring:

```rust
// 0.15
fn my_hook(
    mut world: DeferredWorld,
    entity: Entity,
    _: ComponentId,
) {
    // ...
}

// 0.16
fn my_hook(
    mut world: DeferredWorld,
    HookContext { entity, .. }: HookContext,
) {
    // ...
}
```


--- END FILE `release-content/0.16/migration-guides/17503_Refactored_ComponentHook_Parameters_into_HookContext.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17518_Make_CustomCursor_variants_CustomCursorImageCustomCursorUr.md` ---


The `CustomCursor` enum’s variants now hold instances of `CustomCursorImage` or `CustomCursorUrl`. Update your uses of `CustomCursor` accordingly.


--- END FILE `release-content/0.16/migration-guides/17518_Make_CustomCursor_variants_CustomCursorImageCustomCursorUr.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17521_Improved_Spawn_APIs_and_Bundle_Effects.md` ---


As part of improvements to the bundle spawning API, the `DynamicBundle` trait now has a new `Effect` associated type. If you manually implemented `DynamicBundle`, you likely want to set `Effect = ()`, which retains the same behavior as 0.15 bundles:

```rust
// 0.15
impl DynamicBundle for MyBundle {
    // ...
}

// 0.16
impl DynamicBundle for MyBundle {
    type Effect = ();

    // ...
}
```


--- END FILE `release-content/0.16/migration-guides/17521_Improved_Spawn_APIs_and_Bundle_Effects.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17525_Rework_WindowModeFullscreen_API.md` ---


`WindowMode::SizedFullscreen(MonitorSelection)` and `WindowMode::Fullscreen(MonitorSelection)` has become `WindowMode::Fullscreen(MonitorSelection, VideoModeSelection)`. Previously, the VideoMode was selected based on the closest resolution to the current window size for SizedFullscreen and the largest resolution for Fullscreen. It is possible to replicate that behaviour by searching `Monitor::video_modes` and selecting it with `VideoModeSelection::Specific(VideoMode)` but it is recommended to use `VideoModeSelection::Current` as the default video mode when entering fullscreen.


--- END FILE `release-content/0.16/migration-guides/17525_Rework_WindowModeFullscreen_API.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17542_Upgrade_to_wgpu_v24.md` ---


- Bevy has upgraded to [wgpu v24](https://github.com/gfx-rs/wgpu/blob/trunk/CHANGELOG.md#v2400-2025-01-15).
- When using the DirectX 12 rendering backend, the new priority system for choosing a shader compiler is as follows:
  - If the `WGPU_DX12_COMPILER` environment variable is set at runtime, it is used
  - Else if the new `statically-linked-dxc` feature is enabled, a custom version of DXC will be statically linked into your app at compile time.
  - Else Bevy will look in the app’s working directory for `dxcompiler.dll` and `dxil.dll` at runtime.
  - Else if they are missing, Bevy will fall back to FXC (not recommended)


--- END FILE `release-content/0.16/migration-guides/17542_Upgrade_to_wgpu_v24.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17552_Make_the_default_directional_light_shadow_cascade_settings.md` ---


- The default shadow cascade far distance has been changed from 1000 to 150, and the default first cascade far bound has been changed from 5 to 10, in order to be similar to the defaults of other engines.


--- END FILE `release-content/0.16/migration-guides/17552_Make_the_default_directional_light_shadow_cascade_settings.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17560_Remove_unnecessary_PartialReflect_bound_on_DeserializeWith.md` ---


`DeserializeWithRegistry` types are no longer guaranteed to be `PartialReflect` as well. If you were relying on this type bound, you should add it to your own bounds manually.

```diff
- impl<T: DeserializeWithRegistry> Foo for T { .. }
+ impl<T: DeserializeWithRegistry + PartialReflect> Foo for T { .. }
```


--- END FILE `release-content/0.16/migration-guides/17560_Remove_unnecessary_PartialReflect_bound_on_DeserializeWith.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17567_Cold_Specialization.md` ---


TODO

- `AssetEvents` has been moved into the `PostUpdate` schedule.


--- END FILE `release-content/0.16/migration-guides/17567_Cold_Specialization.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17597_Fixing_ValArithmeticError_typo_and_unused_variant.md` ---


- `ValArithmeticError::NonEvaluateable` has been renamed to `NonEvaluateable::NonEvaluable`
- `ValArithmeticError::NonIdenticalVariants ` has been removed


--- END FILE `release-content/0.16/migration-guides/17597_Fixing_ValArithmeticError_typo_and_unused_variant.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17602_Encapsulate_cfgfeature__track_location_in_a_type.md` ---


Methods like `Ref::changed_by()` that used to return a `&'static Location<'static>` will now be available even when the `track_location` feature is disabled, but they will now return the new `MaybeLocation` type. `MaybeLocation` wraps a `&'static Location<'static>` when the feature is enabled, and is a ZST when the feature is disabled.

Existing code that needs a `&Location` can call `MaybeLocation::into_option()` to recover it. Many trait impls are forwarded, so if you only need `Display` then no changes will be necessary.

If that code was conditionally compiled, you may instead want to use the methods on `MaybeLocation` to remove the need for conditional compilation.

Code that constructs a `Ref`, `Mut`, `Res`, or `ResMut` will now need to provide location information unconditionally.  If you are creating them from existing Bevy types, you can obtain a `MaybeLocation` from methods like `Table::get_changed_by_slice_for()` or `ComponentSparseSet::get_with_ticks`. Otherwise, you will need to store a `MaybeLocation` next to your data and use methods like `as_ref()` or `as_mut()` to obtain wrapped references.


--- END FILE `release-content/0.16/migration-guides/17602_Encapsulate_cfgfeature__track_location_in_a_type.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17605_Support_decibels_in_bevy_audioVolume.md` ---


Audio volume can now be configured using decibel values, as well as using linear scale values. To enable this, some types and functions in `bevy::audio` have changed. First, `Volume` is now an enum with `Linear` and `Decibels` variants:

```rust
// 0.15
let v = Volume(1.0);

// 0.16
let volume = Volume::Linear(1.0);

// Alternatively, you can use decibels instead.
let volume = Volume::Decibels(0.0);
```

`Volume::Linear` is equivalent to the old `f32` volume.

With this change, `AudioSinkPlayback`'s volume-related methods (`volume()` and `set_volume()`) and `GlobalVolume` now deal in `Volume`s rather than `f32`s.

Finally, `Volume::ZERO` has been renamed to the more semantically correct `Volume::SILENT`. This is because 0 decibels is equivalent to "normal volume", which could lead to confusion with the old naming.


--- END FILE `release-content/0.16/migration-guides/17605_Support_decibels_in_bevy_audioVolume.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17645_Improve_cubic_segment_bezier_functionality.md` ---


Replace `CubicCurve::new_bezier` with `CubicCurve::new_bezier_easing`.


--- END FILE `release-content/0.16/migration-guides/17645_Improve_cubic_segment_bezier_functionality.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17671_Isolate_component_registration.md` ---


In order to decouple `Storages` from `Components`, the following methods no longer take a `&mut Storages` argument:

- `Components::register_component()`
- `Components::register_component_with_descriptor()`
- `Bundle::register_required_components()`
- `Component::register_required_components()`

With this change, note that `SparseSets` will no longer be created when components are registered. Instead, they will only be constructed when those components are spawned.


--- END FILE `release-content/0.16/migration-guides/17671_Isolate_component_registration.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17679_Move_Item_and_fetch_to_QueryData_from_WorldQuery.md` ---


The `WorldQuery::Item` associated type and `WorldQuery::fetch()` method have been moved to `QueryData`, as they were not useful for `QueryFilter`-based types.


--- END FILE `release-content/0.16/migration-guides/17679_Move_Item_and_fetch_to_QueryData_from_WorldQuery.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17685_Split_Componentregister_component_hooks_into_individual_me.md` ---


Component hook registration is now split out into individual methods of `Component`. The original `Component::register_component_hooks()` has been deprecated, so please switch to the new `Component::on_add()`, `Component::on_remove()`, and related methods.

```rust
// 0.15
impl Component for Foo {
    fn register_component_hooks(hooks: &mut ComponentHooks) {
        hooks.on_add(foo_on_add);
    }

    // ...
}

// 0.16
impl Component for Foo {
    fn on_add() -> Option<ComponentHook> {
        Some(foo_on_add)
    }

    // ...
}
```


--- END FILE `release-content/0.16/migration-guides/17685_Split_Componentregister_component_hooks_into_individual_me.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17694_Shorten_the_world_lifetime_returned_from_QueryLensquery.md` ---


There was a lifetime issue found with `QueryLens::query()` where calling `get_inner()` on the returned value would allow for multiple mutable references to the same entity. This has been fixed by shrinking the lifetime of `QueryLens::query()`'s result, however it may break existing code.

If you run into lifetime issues while calling `get_inner()` or `iter_inner()` on `QueryLens::query()`'s result, you may need to switch to the new `QueryLens::query_inner()` method that only works on immutable queries.


--- END FILE `release-content/0.16/migration-guides/17694_Shorten_the_world_lifetime_returned_from_QueryLensquery.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17695_Weak_handle_migration.md` ---


`Handle::weak_from_u128()` has been deprecated in favor of the new `weak_handle!` macro, which takes a UUID as a string instead of a `u128`. `weak_handle!` is preferred because it both makes the string form of the UUID visible and it verifies that the UUID is compliant with UUIDv4.

```rust
// 0.15
const SHADER: Handle<Shader> = Handle::weak_from_u128(314685653797097581405914117016993910609);

// 0.16
const SHADER: Handle<Shader> = weak_handle!("1347c9b7-c46a-48e7-b7b8-023a354b7cac");
```


--- END FILE `release-content/0.16/migration-guides/17695_Weak_handle_migration.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17702_Use_target_abi__sim_instead_of_ios_simulator_feature.md` ---


If you're using a project that builds upon the mobile example, remove the `ios_simulator` feature from your `Cargo.toml` (Bevy now handles this internally).


--- END FILE `release-content/0.16/migration-guides/17702_Use_target_abi__sim_instead_of_ios_simulator_feature.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17743_Fix_rounding_in_steps_easing_function.md` ---


<!-- Note to editors: this should be adjusted if 17744 is addressed, and possibly combined with the notes from the PR that fixes it. -->

`EaseFunction::Steps` now behaves like css’s default, “jump-end.” If you were relying on the old behavior, we plan on providing it. See [https://github.com/bevyengine/bevy/issues/17744](https://github.com/bevyengine/bevy/issues/17744).


--- END FILE `release-content/0.16/migration-guides/17743_Fix_rounding_in_steps_easing_function.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17752_Add_ways_to_configure_EasingFunctionSteps_via_new_StepConf.md` ---


`EaseFunction::Steps` now has a second parameter, `JumpAt`, which can customize jumping behavior. `JumpAt`'s default is `JumpAt::End`, which indicates that the last steps happens when the animation ends.

```rust
// 0.15
let ease_function = EaseFunction::Steps(10);

// 0.16
let ease_function = EaseFunction::Steps(10, JumpAt::default());
```


--- END FILE `release-content/0.16/migration-guides/17752_Add_ways_to_configure_EasingFunctionSteps_via_new_StepConf.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17760_Allowed_creating_uninitialized_images_for_use_as_storage_t.md` ---


Code that directly access `Image` data will now need to use unwrap or handle the case where no data is provided.
Behaviour of new_fill slightly changed, but not in a way that is likely to affect anything. It no longer panics and will fill the whole texture instead of leaving black pixels if the data provided is not a nice factor of the size of the image.


--- END FILE `release-content/0.16/migration-guides/17760_Allowed_creating_uninitialized_images_for_use_as_storage_t.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17767_Use_unchecked_shaders_for_better_performance.md` ---


- Bevy no longer turns on wgpu’s runtime safety checks https://docs.rs/wgpu/latest/wgpu/struct.ShaderRuntimeChecks.html. If you were using Bevy with untrusted shaders, please file an issue.


--- END FILE `release-content/0.16/migration-guides/17767_Use_unchecked_shaders_for_better_performance.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17826_Fix_unsoundness_in_QueryItersort_by.md` ---


The `sort()` family of methods on `QueryIter` unsoundly gave access `L::Item<'w>` with the full world `'w` lifetime, meaning it was possible to smuggle items out of the compare closure. This has been fixed by shortening the lifetime so that items cannot escape the closure on the following methods on `QueryIter` and `QueryManyIter`:

- `sort()`
- `sort_unstable()`
- `sort_by()`
- `sort_unstable_by()`
- `sort_by_key()`
- `sort_unstable_by_key()`
- `sort_by_cached_key()`

This fix may cause your code to get lifetimes errors, such as:

```
error: implementation of `FnMut` is not general enough
```

To fix this, you will need to make the comparer generic over the new lifetime. Often this can be done by replacing named `'w` with `'_`, or by replacing the use of a function item with a closure:

```rust
// 0.15
query.iter().sort_by::<&C>(Ord::cmp);

// 0.16
query.iter().sort_by::<&C>(|l, r| Ord::cmp(l, r));
```

```rust
// 0.15
fn comparer(left: &&'w C, right: &&'w C) -> Ordering {
    // ...
}

query.iter().sort_by::<&C>(comparer);

// 0.16
fn comparer(left: &&C, right: &&C) -> Ordering {
    // ...
}

query.iter().sort_by::<&C>(comparer);
```


--- END FILE `release-content/0.16/migration-guides/17826_Fix_unsoundness_in_QueryItersort_by.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17842_Make_sprite_picking_optin.md` ---


- Sprite picking are now opt-in, make sure you insert `Pickable` component when using sprite picking.

```diff
-commands.spawn(Sprite { .. } );
+commands.spawn((Sprite { .. }, Pickable::default());
```


--- END FILE `release-content/0.16/migration-guides/17842_Make_sprite_picking_optin.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17855_Add_EntityDoesNotExistError_replace_cases_of_Entity_as_an_.md` ---


The return types of several `World` and `UnsafeWorldCell` methods have been modified to return a `Result<T, EntityDoesNotExist>`.

- `World::inspect_entity()` now returns `Result<impl Iterator<Item = &ComponentInfo>, EntityDoesNotExistError>` instead of `impl Iterator<Item = &ComponentInfo>`. As such, this method no longer panics if the entity does not exist.
- `World::get_entity()` now returns `EntityDoesNotExistError` as an error instead of `Entity`. You can still access the entity's ID through `EntityDoesNotExistErrorentity::entity`, however.
- `UnsafeWorldCell::get_entity()` now returns `Result<UnsafeEntityCell, EntityDoesNotExistError>` instead of `Option<UnsafeEntityCell>`, giving you access to the entity's ID and other details on the error.


--- END FILE `release-content/0.16/migration-guides/17855_Add_EntityDoesNotExistError_replace_cases_of_Entity_as_an_.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17879_Add_uv_transform_to_ColorMaterial.md` ---


Add `uv_transform` field to constructors of `ColorMaterial`


--- END FILE `release-content/0.16/migration-guides/17879_Add_uv_transform_to_ColorMaterial.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17900_Add_byte_information_to_PositionedGlyph.md` ---


`PositionedGlyph::new()` has been removed as there is no longer an unused field. Create new `PositionedGlyph`s directly.


--- END FILE `release-content/0.16/migration-guides/17900_Add_byte_information_to_PositionedGlyph.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17938_Only_despawn_scene_entities_still_in_the_hierarchy.md` ---


If you previously relied on scene entities no longer in the hierarchy being despawned when the scene root is despawned , use `SceneSpawner::despawn_instance()` instead.


--- END FILE `release-content/0.16/migration-guides/17938_Only_despawn_scene_entities_still_in_the_hierarchy.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17955_Add_no_std_support_to_bevy.md` ---


The main `bevy` crate now officially supports `no_std`. As part of this change, some functionality that used to always be included in `bevy` is now behind feature flags. The features of note are:

- `default_no_std`
- `bevy_log`
- `bevy_input_focus`
- `async_executor`
- `std`
- `critical-section`
- `libm`

Additionally, if you depend on `bevy_reflect` directly, its `bevy` feature flag has been split into two separate flags: `smallvec` and `smol_str` for their corresponding types.

#### For application authors

If your application has default features enabled, congratulations! You don't need to do anything extra! If your application has `default-features = false`, however, you may need to enabled the `std` and `async_executor` features:

```toml
# 0.15
[dependencies]
bevy = { version = "0.15", default-features = false }

# 0.16
[dependencies]
bevy = { version = "0.16", default-features = false, features = ["std", "async_executor"] }
```

#### For library authors

It is recommended for libraries to depend on Bevy with `default-features = false` to give developers more control over what features are enabled. Here are some recommended features that a library crate may want to expose:

```toml
[features]
# Most users will be on a platform which has `std` and can use the more-powerful `async_executor`.
default = ["std", "async_executor"]

# Features for typical platforms.
std = ["bevy/std"]
async_executor = ["bevy/async_executor"]

# Features for `no_std` platforms.
libm = ["bevy/libm"]
critical-section = ["bevy/critical-section"]

[dependencies]
# We disable default features to ensure we don't accidentally enable `std` on `no_std` targets, for
# example. 
bevy = { version = "0.16", default-features = false }
```


--- END FILE `release-content/0.16/migration-guides/17955_Add_no_std_support_to_bevy.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17962_Generic_system_config.md` ---


In order to reduce internal duplication between scheduling systems and system sets, the new generic `ScheduleConfigs<T>` type and `IntoScheduleConfigs<T>` trait have been added. These take a generic parameter, `T`, that may be `ScheduleSystem` (for systems) or `InternedSystemSet` (for system sets).

|0.15 Item|0.16 Item|
|-|-|
|`SystemConfigs`|`ScheduleConfigs<ScheduleSystem>`|
|`SystemSetConfigs`|`ScheduleConfigs<InternedSystemSet>`|
|`IntoSystemConfigs`|`IntoScheduleConfigs<ScheduleSystem, M>`|
|`IntoSystemSetConfigs`|`IntoScheduleConfigs<InternedSystemSet, M>`|


--- END FILE `release-content/0.16/migration-guides/17962_Generic_system_config.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17967_Upgrade_to_Rust_Edition_2024.md` ---


As part of Bevy's migration to [Rust 2024], the lifetimes of several functions that use return-position impl-trait (RPIT) syntax may have been changed to be slightly more conservative. If you run into lifetime issues with functions that return `impl Trait`, please [create a new issue].

[Rust 2024]: https://blog.rust-lang.org/2025/02/20/Rust-1.85.0.html#rust-2024
[create a new issue]: https://github.com/bevyengine/bevy/issues


--- END FILE `release-content/0.16/migration-guides/17967_Upgrade_to_Rust_Edition_2024.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/17977_Renamed_EventWritersend_methods_to_write.md` ---


`EventWriter::send()` and its family of methods have been renamed to `EventWriter::write()` in order to reduce confusion and increase consistency. The old methods have been deprecated.

|0.15|0.16|
|-|-|
|`EventWriter::send()`|`EventWriter::write()`|
|`EventWriter::send_batch()`|`EventWriter::write_batch()`|
|`EventWriter::send_default()`|`EventWriter::write_default()`|


--- END FILE `release-content/0.16/migration-guides/17977_Renamed_EventWritersend_methods_to_write.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18028_Use_register_dynamic_for_merging.md` ---


`RequiredComponents::register_dynamic()` has been replaced by `RequiredComponents::register_dynamic_with()`, which avoids unnecessary cloning.

```rust
// 0.15
required_components.register_dynamic(
    component_id,
    component_constructor.clone(),
    requirement_inheritance_depth,
);

// 0.16
required_components.register_dynamic_with(
    component_id,
    requirement_inheritance_depth,
    || component_constructor.clone(),
);
```


--- END FILE `release-content/0.16/migration-guides/18028_Use_register_dynamic_for_merging.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18082_Make_Querysingle_and_friends_return_a_Result.md` ---


`Query::single()`, `Query::single_mut()` and their `QueryState` equivalents now return a `Result`. Generally, you'll want to:

- Use **Bevy 0.16**'s system error handling to return a `Result` using the `?` operator.
- Use a `let Ok(data) = result else {}` block to early return if there's an expected failure.
- Use `unwrap()` or `Ok` destructuring inside of tests.

The old `Query::get_single()` and related methods have been deprecated.

If you are using `anyhow`, you will experience namespace clashes between Bevy's catch-all `Result` and `anyhow::Result`. Within Bevy-specific projects, you should migrate to use the new `bevy::ecs::error::Result` due to its improved backtraces. (If you discover missing functionality, please feel free to open a pull request adding it!) For projects that support both Bevy and non-Bevy users, you should define a feature-gated type alias and avoid glob-importing `bevy::prelude`:

```rust
#[cfg(feature = "bevy")]
type Result = bevy::ecs::error::Result;

#[cfg(not(feature = "bevy"))]
type Result = anyhow::Result;
```


--- END FILE `release-content/0.16/migration-guides/18082_Make_Querysingle_and_friends_return_a_Result.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18083_Improved_DeriveEvent.md` ---


In **Bevy 0.16** you can now use `#[derive(Event)]` for more specialized implementations. 

```rust
// 0.15
struct MyEvent;

impl Event for MyEvent {
    const AUTO_PROPAGATE: bool = true;
    type Traversal = &'static ChildOf
}

// 0.16
#[derive(Event)]
#[event(traversal = &'static ChildOf, auto_propagate)]
struct MyEvent;
```

--- END FILE `release-content/0.16/migration-guides/18083_Improved_DeriveEvent.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18147_Deprecate_insert_or_spawn_function_family.md` ---


The following functions have been deprecated:

- `Commands::insert_or_spawn_batch()`
- `World::insert_or_spawn_batch()`
- `World::insert_or_spawn_batch_with_caller()`
- `Entities::alloc_at()`

These methods, when used incorrectly, can cause major performance problems and are generally viewed as anti-patterns and foot guns. These are planned to be removed altogether in 0.17.

Instead of the above functions, consider doing one of the following:

1. Use the new `Disabled` component. Instead of despawning entities, simply disable them until you need them again. You can even use `Commands::try_insert_batch()` and `EntityCommands::remove()` to adjust what components an entity has.
2. Instead of despawning and respawning entities with the same `Entity` ID, simply use `spawn_batch()` and update the IDs to the new values.


--- END FILE `release-content/0.16/migration-guides/18147_Deprecate_insert_or_spawn_function_family.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18157_Remove_lifetime_from_QueryEntityError.md` ---


`QueryEntityError::QueryDoesNotMatch` now stores an `ArchetypeId` instead of an `UnsafeWorldCell`. As such, `QueryEntityError`'s lifetime parameter has been removed.


--- END FILE `release-content/0.16/migration-guides/18157_Remove_lifetime_from_QueryEntityError.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18173_Queued_component_registration.md` ---


Component registration can now be queued with shared access to `World`, instead of requiring mutable access (`&mut World`). To facilitate this, a few APIs have been moved around.

The following functions have moved from `Components` to `ComponentsRegistrator`:

- `register_component()`
- `register_component_with_descriptor()`
- `register_resource_with_descriptor()`
- `register_non_send()`
- `register_resource()`
- `register_required_components_manual()`

Accordingly, functions in `Bundle` and `Component` now take `ComponentsRegistrator` instead of `Components`.
You can obtain `ComponentsRegistrator` from the new `World::components_registrator()` method.
You can obtain `ComponentsQueuedRegistrator` from the new `World::components_queue()`, and use it to stage component registration if desired.


--- END FILE `release-content/0.16/migration-guides/18173_Queued_component_registration.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18183_Deprecated_Querymany_and_many_mut.md` ---


Due to improvements in **Bevy 0.16**'s error handling capabilities, `Query::many()` and `Query::many_mut()` have been deprecated in favor of their non-panicking variants: `Query::get_many()` and `Query::get_many_mut()`.

```rust
#[derive(Resource)]
struct Player1(Entity);

#[derive(Resource)]
struct Player2(Entity);

// 0.15
fn my_system(player1: Res<Player1>, player2: Res<Player2>, query: Query<&Transform>) {
    let [transform1, transform2] = query.many([player1.0, player2.0]);

    // ...
}

// 0.16
// Make the system return a `Result`, which is automatically imported in Bevy's prelude.
fn my_system(player1: Res<Player1>, player2: Res<Player2>, query: Query<&Transform>) -> Result {
    // Use `get_many()` and the `?` operator to return early on an error.
    let [transform1, transform2] = query.get_many([player1.0, player2.0])?;

    // ...

    Ok(())
}
```

Please note that `Query::get_many()` is very similar to `Query::get()`. To increase the consistency between the two methods, the name `get_many()` was kept over plain `many()`. Although in 0.15 `Query::many()` seemed similar to `Query::single()` due to their naming, they are quite distinct. This change is meant to reinforce this distinction.


--- END FILE `release-content/0.16/migration-guides/18183_Deprecated_Querymany_and_many_mut.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18265_FilteredResource_returns_a_Result_instead_of_a_simple_Opti.md` ---


Users will need to handle the different return type on FilteredResource::get, FilteredResource::get_id, FilteredResource::get_mut as it is now a Result not an Option.


--- END FILE `release-content/0.16/migration-guides/18265_FilteredResource_returns_a_Result_instead_of_a_simple_Opti.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18284_bevy_reflect_Deprecate_PartialReflectclone_value.md` ---


`PartialReflect::clone_value` is being deprecated. Instead, use `PartialReflect::to_dynamic` if wanting to create a new dynamic instance of the reflected value. Alternatively, use `PartialReflect::reflect_clone` to attempt to create a true clone of the underlying value.

Similarly, the following methods have been deprecated and should be replaced with these alternatives:

- `Array::clone_dynamic` → `Array::to_dynamic_array`
- `Enum::clone_dynamic` → `Enum::to_dynamic_enum`
- `List::clone_dynamic` → `List::to_dynamic_list`
- `Map::clone_dynamic` → `Map::to_dynamic_map`
- `Set::clone_dynamic` → `Set::to_dynamic_set`
- `Struct::clone_dynamic` → `Struct::to_dynamic_struct`
- `Tuple::clone_dynamic` → `Tuple::to_dynamic_tuple`
- `TupleStruct::clone_dynamic` → `TupleStruct::to_dynamic_tuple_struct`


--- END FILE `release-content/0.16/migration-guides/18284_bevy_reflect_Deprecate_PartialReflectclone_value.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18301_Create_new_NonSendMarker.md` ---


`NonSendMarker`, a type used to force systems to run on the main thread, is now a system parameter. This means that it no longer needs to be wrapped in `Option<NonSend<_>>`. Furthermore, `NonSendMarker` has been moved from `bevy::core` to `bevy::ecs::system`, so please update your imports accordingly.

```rust
// 0.15
use bevy::core::NonSendMarker;

fn my_system(_: Option<NonSend<NonSendMarker>>) {
    // ...
}

// 0.16
use bevy::ecs::system::NonSendMarker;

fn my_system(_: NonSendMarker) {
    // ...
}
```


--- END FILE `release-content/0.16/migration-guides/18301_Create_new_NonSendMarker.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18319_add_Entity_default_to_the_entity_set_wrappers.md` ---


Switch type parameter order for the relevant wrapper types/aliases.


--- END FILE `release-content/0.16/migration-guides/18319_add_Entity_default_to_the_entity_set_wrappers.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18322_Move_nongeneric_parts_of_the_PrepassPipeline_to_internal_f.md` ---


If you were using a field of the `PrepassPipeline`, most of them have now been move to `PrepassPipeline::internal`.


--- END FILE `release-content/0.16/migration-guides/18322_Move_nongeneric_parts_of_the_PrepassPipeline_to_internal_f.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18323_Add_bevy_anti_aliasing.md` ---


When using anti aliasing features, you now need to import them from `bevy::anti_aliasing` instead of `bevy::core_pipeline`


--- END FILE `release-content/0.16/migration-guides/18323_Add_bevy_anti_aliasing.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18432_Replace_VisitEntities_with_MapEntities.md` ---


`VisitEntities` and `VisitEntitiesMut` have been removed in favor of `MapEntities`, as the prior is less generally applicable (doesn't work on collections like `HashSet`s). If you previously derived `VisitEntities` and family, you can now derive `MapEntities` and use the `#[entities]` attribute to annotate the list of `Entity`s.

```rust
// 0.15
#[derive(VisitEntities, VisitEntitiesMut)]
struct Inventory {
    items: Vec<Entity>,
    // Opt-out of mapping this field, as its a string.
    #[visit_entities(ignore)]
    label: String,
}

// 0.16
#[derive(MapEntities)]
struct Inventory {
    // Opt-in to mapping this field.
    #[entities]
    items: Vec<Entity>,
    label: String,
}
```

Note `Component::visit_entities()` and `Component::visit_entities_mut()` have also been removed in favor of the new `Component::map_entities()` method. When deriving `Component`, you may also use `#[entities]` to specify which `Entity`s may be mapped.

Finally, entity mapping is no longer implemented for all types that implement `IntoIterator<Item = &Entity>`. If you previously depended on a custom data type to support the `#[entities]` attribute, please manually derive / implement `MapEntities` for it.


--- END FILE `release-content/0.16/migration-guides/18432_Replace_VisitEntities_with_MapEntities.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18439_Newtype_Anchor.md` ---


The anchor component has been changed from an enum to a struct newtyping a `Vec2`. The `Custom` variant has been removed, instead to construct a custom `Anchor` use its tuple constructor:

```rust
Sprite {
     anchor: Anchor(Vec2::new(0.25, 0.4)),
     ..default()
}
```

The other enum variants have been replaced with corresponding constants:

- `Anchor::BottomLeft` to `Anchor::BOTTOM_LEFT`
- `Anchor::Center` to `Anchor::CENTER`
- `Anchor::TopRight` to `Anchor::TOP_RIGHT`
- .. and so on for the remaining variants


--- END FILE `release-content/0.16/migration-guides/18439_Newtype_Anchor.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18451_Get_names_of_queued_components.md` ---


Bevy now supports queueing components to be registered with read only world access, as opposed to registering them directly with mutable access. For now, that's an implementation detail, but it opens up some exciting possibilities for the future. Today, however, it causes a breaking change.

In order to support getting the names of components that are queued but not registered (important for debugging), `Components::get_name` now returns `Option<Cow<'_, str>` instead of `Option<&str>`. If that behavior is not desired, or you know the component is not queued, you can use `components.get_info().map(ComponentInfo::name)` instead. Similarly, `ScheduleGraph::conflicts_to_string` now returns `impl Iterator<Item = (String, String, Vec<Cow<str>>)>` instead of `impl Iterator<Item = (String, String, Vec<&str>)>`.

Because `Cow<str>` derefs to `&str`, most use cases can remain unchanged. If you're curious about queued registration, check out the original pr [here](https://github.com/bevyengine/bevy/pull/18173).


--- END FILE `release-content/0.16/migration-guides/18451_Get_names_of_queued_components.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18454_Make_system_param_validation_rely_on_the_unified_ECS_error.md` ---


`ParamWarnPolicy` and the `WithParamWarnPolicy` have been removed completely. Failures during system param validation are now handled via the `GLOBAL_ERROR_HANDLER`. Please see the `bevy_ecs::error` module docs for more information.


--- END FILE `release-content/0.16/migration-guides/18454_Make_system_param_validation_rely_on_the_unified_ECS_error.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18504_Define_system_param_validation_on_a_persystem_parameter_basis.md` ---


Various system and system parameter validation methods (`SystemParam::validate_param`, `System::validate_param` and `System::validate_param_unsafe`) now return and accept a `ValidationOutcome` enum, rather than a `bool`.  The previous `true` values map to `ValidationOutcome::Valid`, while `false` maps to `ValidationOutcome::Invalid`.

However, if you wrote a custom schedule executor, you should now respect the new `ValidationOutcome::Skipped` parameter, skipping any systems whose validation was skipped. By contrast, `ValidationOutcome::Invalid` systems should also be skipped, but you should call the `default_error_handler` on them first, which by default will result in a panic.

If you are implementing a custom `SystemParam`, you should consider whether failing system param validation is an error or an expected state, and choose between `Invalid` and `Skipped` accordingly. In Bevy itself, `Single` and `Populated` now once again skip the system when their conditions are not met. This is the 0.15.0 behavior, but stands in contrast to the 0.15.1 behavior, where they would panic.


--- END FILE `release-content/0.16/migration-guides/18504_Define_system_param_validation_on_a_persystem_parameter_basis.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18538_Remove_Imagefrom_buffer_name_argument_only_present_in_debu.md` ---


- `Image::from_buffer()` no longer has a `name` argument that’s only present in debug builds when the `"dds"` feature is enabled. If you happen to pass a name, remove it.


--- END FILE `release-content/0.16/migration-guides/18538_Remove_Imagefrom_buffer_name_argument_only_present_in_debu.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18544_Make_RayMap_map_public.md` ---


The `bevy_picking::backend::ray::RayMap::map` method is removed as redundant,
In systems using `Res<RayMap>` replace `ray_map.map()` with `&ray_map.map`


--- END FILE `release-content/0.16/migration-guides/18544_Make_RayMap_map_public.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/18555_Improved_require_syntax.md` ---


Required component syntax has been reworked to be more intuitive with Rust's syntax. Custom-constructor requires should use the new expression-style syntax:

```rust
// 0.15
#[derive(Component)]
#[require(A(returns_a))]
struct Foo;

// 0.16
#[derive(Component)]
#[require(A = returns_a())]
struct Foo;
```

Inline-closure-constructor requires should use the inline value syntax where possible:

```rust
// 0.15
#[derive(Component)]
#[require(A(|| A(10))]
struct Foo;

// 0.16
#[derive(Component)]
#[require(A(10)]
struct Foo;
```

In cases where that is not possible, use the expression-style syntax:

```rust
// 0.15
#[derive(Component)]
#[require(A(|| A(10))]
struct Foo;

// 0.16
#[derive(Component)]
#[require(A = A(10)]
struct Foo;
```


--- END FILE `release-content/0.16/migration-guides/18555_Improved_require_syntax.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/bevy_core_removed.md` ---


`bevy_core` has been removed and its items moved into more appropriate locations.
Below are some tables showing where items have been moved to

#### Structs

| Item                             | 0.15 Path   | 0.16 Path         |
| -------------------------------- | ----------- | ----------------- |
| `FrameCount`                     | `bevy_core` | `bevy_diagnostic` |
| `FrameCountPlugin`               | `bevy_core` | `bevy_diagnostic` |
| `Name`                           | `bevy_core` | `bevy_ecs::name`  |
| `NameOrEntity`                   | `bevy_core` | `bevy_ecs::name`  |
| `NameOrEntityItem`               | `bevy_core` | `bevy_ecs::name`  |
| `NonSendMarker`                  | `bevy_core` | `bevy_ecs::system`|
| `TaskPoolOptions`                | `bevy_core` | `bevy_app`        |
| `TaskPoolPlugin`                 | `bevy_core` | `bevy_app`        |
| `TaskPoolThreadAssignmentPolicy` | `bevy_core` | `bevy_app`        |
| `TypeRegistrationPlugin`         | `bevy_core` | _Removed_         |

#### Functions

| Item                             | 0.15 Path   | 0.16 Path         |
| -------------------------------- | ----------- | ----------------- |
| `update_frame_count`             | `bevy_core` | `bevy_diagnostic` |

#### Removed

`TypeRegistrationPlugin` no longer exists. If you can’t use a default `App` but still need `Name` registered, do so manually.
  
```rust
// Before
app.add_plugins(TypeRegistrationPlugin);

// After
app.register_type::<Name>();
```


--- END FILE `release-content/0.16/migration-guides/bevy_core_removed.md` ---


--- BEGIN FILE `release-content/0.16/migration-guides/bevy_utils_decimation.md` ---


In 0.16 `bevy_utils` (and by extension `bevy::utils`) was significantly reduced with many of its items either being removed, spun-out into their own crates, or just moved into more appropriate existing crates.
Below is a series of tables for all items that were in `bevy_utils` 0.15 that have since been moved or removed in 0.16.

Note that certain items have been completely removed, see below for further details.

**Re-Exports**

| Item        | 0.15 Path    | 0.16 Path  |
| ----------- | ------------ | ---------- |
| `hashbrown` | `bevy_utils` | _Removed_  |
| `tracing`   | `bevy_utils` | `bevy_log` |

**Structs**

| Item                    | 0.15 Path    | 0.16 Path                     |
| ----------------------- | ------------ | ----------------------------- |
| `AHasher`               | `bevy_utils` | `ahash`                       |
| `Duration`              | `bevy_utils` | `core::time`                  |
| `FixedState`            | `bevy_utils` | `bevy_platform::hash` |
| `Hashed`                | `bevy_utils` | `bevy_platform::hash` |
| `Instant`               | `bevy_utils` | `bevy_platform::time` |
| `NoOpHash`              | `bevy_utils` | `bevy_platform::time` |
| `PassHash`              | `bevy_utils` | `bevy_platform::time` |
| `PassHasher`            | `bevy_utils` | `bevy_platform::time` |
| `RandomState`           | `bevy_utils` | `bevy_platform::time` |
| `SystemTime`            | `bevy_utils` | `std::time`                   |
| `SystemTimeError`       | `bevy_utils` | `std::time`                   |
| `TryFromFloatSecsError` | `bevy_utils` | `core::time`                  |

**Traits**

| Item                    | 0.15 Path    | 0.16 Path    |
| ----------------------- | ------------ | ------------ |
| `ConditionalSend`       | `bevy_utils` | `bevy_tasks` |
| `ConditionalSendFuture` | `bevy_utils` | `bevy_tasks` |

**Macros**

| Item                   | 0.15 Path    | 0.16 Path          |
| ---------------------- | ------------ | ------------------ |
| `assert_object_safe`   | `bevy_utils` | _Removed_          |
| `debug`                | `bevy_utils` | `bevy_log`         |
| `error`                | `bevy_utils` | `bevy_log`         |
| `info`                 | `bevy_utils` | `bevy_log`         |
| `warn`                 | `bevy_utils` | `bevy_log`         |
| `all_tuples`           | `bevy_utils` | `variadics_please` |
| `all_tuples_with_size` | `bevy_utils` | `variadics_please` |
| `debug_once`           | `bevy_utils` | `bevy_log`         |
| `detailed_trace`       | `bevy_utils` | _Removed_          |
| `error_once`           | `bevy_utils` | `bevy_log`         |
| `info_once`            | `bevy_utils` | `bevy_log`         |
| `trace_once`           | `bevy_utils` | `bevy_log`         |
| `warn_once`            | `bevy_utils` | `bevy_log`         |

Note that if you were previously relying on `bevy_utils` to get access to
the re-exported `tracing` macros like `info!`, `warn!` or `debug!`, you should
now rely on `bevy_log` instead (or `tracing` itself, being sure to keep the versions aligned).

**Functions**

| Item           | 0.15 Path             | 0.16 Path             |
| -------------- | --------------------- | --------------------- |
| `check_ready`  | `bevy_utils::futures` | `bevy_tasks::futures` |
| `now_or_never` | `bevy_utils::futures` | `bevy_tasks::futures` |

**Type Aliases**

| Item            | 0.15 Path    | 0.16 Path                                      |
| --------------- | ------------ | ---------------------------------------------- |
| `BoxedFuture`   | `bevy_utils` | `bevy_tasks`                                   |
| `Entry`         | `bevy_utils` | `bevy_platform::collections::hash_map` |
| `HashMap`       | `bevy_utils` | `bevy_platform::collections`           |
| `HashSet`       | `bevy_utils` | `bevy_platform::collections`           |
| `StableHashMap` | `bevy_utils` | _Removed_                                      |
| `StableHashSet` | `bevy_utils` | _Removed_                                      |

**Removed Items**

- `assert_object_safe` was removed in part because the term is now outdated (replaced with _dyn compatibility_) and otherwise because it is trivial to inline.
  
  ```rust
  // Before
  const _: () = assert_object_safe::<dyn MyTrait>();

  // After
  const _: Option<Box<dyn MyTrait>> = None;
  ```
  
- `hashbrown` was removed from `bevy_utils` as a re-export due to its significant API change from `hashbrown` 0.14 to 0.15.
  Instead of exposing a large public API out of our direct control, we've taken a more explicit subset and moved it into `bevy_platform::collections`, mimicking the layout of the standard library.
  If you need access to `hashbrown`, take a direct dependency instead.

- `detailed_trace` was removed due to its minimal use within the engine.
  If you still wish to use it, make sure you have taken a direct dependency on `tracing` and have a feature name `detailed_trace` defined in your `Cargo.toml`.
  You can use the below as a replacement:

  ```rust
  macro_rules! detailed_trace {
      ($($tts:tt)*) => {
          if cfg!(feature = "detailed_trace") {
              ::tracing::trace!($($tts)*);
          }
      }
  }
  ```
  
- `dbg`, `info`, `warn`, and `error` were all removed due to minimal use within the engine.
  If you still wish to use them, make sure you have taken a direct dependency on `tracing`.
  You can use the below as a replacement:

  ```rust
  /// Calls the [`tracing::info!`] macro on a value.
  pub fn info<T: core::fmt::Debug>(data: T) {
      ::tracing::info!("{:?}", data);
  }

  /// Calls the [`tracing::debug!`] macro on a value.
  pub fn dbg<T: core::fmt::Debug>(data: T) {
      ::tracing::debug!("{:?}", data);
  }

  /// Processes a [`Result`] by calling the [`tracing::warn!`] macro in case of an [`Err`] value.
  pub fn warn<E: core::fmt::Debug>(result: Result<(), E>) {
      if let Err(warn) = result {
          ::tracing::warn!("{:?}", warn);
      }
  }

  /// Processes a [`Result`] by calling the [`tracing::error!`] macro in case of an [`Err`] value.
  pub fn error<E: core::fmt::Debug>(result: Result<(), E>) {
      if let Err(error) = result {
          ::tracing::error!("{:?}", error);
      }
  }
  ```
  
- `StableHashMap` and `StableHashSet` were removed due to minimal use within the engine.
  You can use the below as a replacement:
  
  ```rust
  /// A stable hash-map.
  pub type StableHashMap<K, V> = bevy::platform_support::collections::HashMap<K, V, bevy::platform_support::hash::FixedState>;

  /// A stable hash-set.
  pub type StableHashSet<K> = bevy::platform_support::collections::HashSet<K, bevy::platform_support::hash::FixedState>;
  ```


--- END FILE `release-content/0.16/migration-guides/bevy_utils_decimation.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/13120_Add_DefaultQueryFilters.md` ---


**Bevy 0.16** adds the ability to disable entities by adding the [`Disabled`] component. This (by default) will hide the entity (and all of its components) from systems and queries that are looking for it.

This is implemented using the newly added **default query filters**. These do what they say on the tin: every query will act as if they have a `Without<Disabled>` filter, unless they explicitly mention [`Disabled`] (generally via a `With<Disabled>` or `Has<Disabled>` argument).

Because this is generic, developers can also define additional disabling components, which can be registered via [`App::register_disabling_component`]. Having multiple distinct disabling components can be useful if you want each form of disabling to have its own semantics / behaviors: you might use this feature for hiding networked entities, freezing entities in an off-screen chunk, creating a collection of prefab entities loaded and ready to spawn, or something else entirely.

Note that for maximum control and explicitness, only the entities that you directly add disabling components to are disabled. Their children or other related entities are not automatically disabled!

To disable an entity _and_ its children, consider the new [`Commands::insert_recursive`] and [`Commands::remove_recursive`].

[`Disabled`]: https://docs.rs/bevy/0.16/bevy/ecs/entity_disabling/struct.Disabled.html
[`Commands::insert_recursive`]: https://docs.rs/bevy/0.16/bevy/prelude/struct.EntityCommands.html#method.insert_recursive
[`Commands::remove_recursive`]: https://docs.rs/bevy/0.16/bevy/prelude/struct.EntityCommands.html#method.remove_recursive


--- END FILE `release-content/0.16/release-notes/13120_Add_DefaultQueryFilters.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/14069_Add_support_for_specular_tints_and_maps_per_the_KHR_materi.md` ---


<!-- Add support for specular tints and maps per the `KHR_materials_specular` glTF extension. -->
<!-- https://github.com/bevyengine/bevy/pull/14069 -->

If you have an eye for light (or training in visual arts), you'll notice that shiny curved surfaces get extra-bright spots of light.
That's a specular highlight!
In **Bevy 0.16**, we've implemented a standard physically-based rendering (PBR) feature of specular highlights: the ability to tint their color.

![A shiny floating sphere with an iridescent multicolored sheen. It reminds you of a Christmas tree ornament. You can see a reflection of a city scene in it.](specular-tint-sphere.jpg)

This can be done uniformly across the material, by simply setting the `specular_tint` field on the [`StandardMaterial`] for your object.

Like many other material properties (color, normals, emissiveness, roughness etc), this can be varied over the material via the use of a texture map,
which describes how this property varies via a 2-dimensional UV-space image.

Maps are relatively expensive: you need an entire 2D image, rather than a single float or color, and GPUs have limits on the number of textures you can use per material, unless they support bindless textures.
As a result, specular maps are off by default, and gated behind the `pbr_specular_textures` Cargo feature.

To support this work, we now support the KHR_materials_specular glTF extension, allowing artists to set these properties in 3D modelling tools like Blender, then import them into Bevy.

[`StandardMaterial`]: https://docs.rs/bevy/0.16/bevy/pbr/struct.StandardMaterial.html


--- END FILE `release-content/0.16/release-notes/14069_Add_support_for_specular_tints_and_maps_per_the_KHR_materi.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/15074_bevy_reflect_Function_Overloading_Generic__Variadic_Functi.md` ---


<!-- bevy_reflect: Function Overloading (Generic & Variadic Functions) -->
<!-- https://github.com/bevyengine/bevy/pull/15074 -->

**Bevy 0.15** added support for reflecting functions to `bevy_reflect`, Bevy's type reflection crate.
This allows Rust functions to be called dynamically with a list of arguments generated at runtime—and safely!

```rust
fn add(a: i32, b: i32) -> i32 {
    a + b
}

let reflect_add: DynamicFunction = add.into_function();

let args = ArgList::new()
  .push_owned(25_i32)
  .push_owned(75_i32);

let result = reflect_add.call(args).unwrap();

let sum = result.unwrap_owned().try_take::<i32>().unwrap();
assert_eq!(sum, 100);
```

However, due to limitations in Rust, it was not possible to make these dynamic functions generic.
This meant individual functions had to be created for all desired monomorphizations
and manually mapped to at runtime.

```rust
fn add<T: Add<Output=T>>(a: T, b: T) -> T {
    a + b
}

let reflect_add_i32 = add::<i32>.into_function();
let reflect_add_u32 = add::<u32>.into_function();
let reflect_add_f32 = add::<f32>.into_function();
// ...
```

While the original Rust limitations still exist, Bevy 0.16 improves the developer experience by adding support for function overloading.
The term "function overloading" might be familiar to developers from other programming languages,
but essentially it means that one function can have multiple argument signatures.

This allows us to simplify the previous example:

```rust
let reflect_add = add::<i32>.into_function()
  .with_overload(add::<u32>)
  .with_overload(add::<f32>);
```

The first `add::<i32>` acts as the base case, with each overload acting on top of it.
When the function is called, the corresponding overload is selected based on the types of the provided arguments.

And by extension of the fact that function overloading allows for multiple argument signatures,
this also means that we can define functions that take a variable number of arguments,
commonly known as "variadic functions."

This allows for some interesting use cases:

```rust
#[derive(Reflect)]
struct Player {
    name: Option<String>,
    health: u32,
}

// Creates a `Player` with one of the following based on the provided arguments:  
// - No name and 100 health  
// - A name and 100 health  
// - No name and custom health  
// - A name and custom health
let create_player = (|| Player {
    name: None,
    health: 100,
  })
  .into_function()
  .with_overload(|name: String| Player {
    name: Some(name),
    health: 100,
  })
  .with_overload(|health: u32| Player {
    name: None,
    health
  })
  .with_overload(|name: String, health: u32| Player {
    name: Some(name),
    health,
  });
```

--- END FILE `release-content/0.16/release-notes/15074_bevy_reflect_Function_Overloading_Generic__Variadic_Functi.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/15473_Retained_Gizmos.md` ---


<!-- Retained `Gizmo`s -->
<!-- https://github.com/bevyengine/bevy/pull/15473 -->
In previous versions of Bevy, gizmos were always rendered in an "immediate mode" style: they were rendered for a single frame before disappearing. This is great for prototyping but also has a performance cost.

With retained gizmos, you can now spawn gizmos that persist, enabling higher performance! For a
static set of lines, we've measured a ~65-80x improvement in performance!

As an example, here's how to spawn a sphere that persists:

```rust
fn setup(
    mut commands: Commands,
    mut gizmo_assets: ResMut<Assets<GizmoAsset>>
) {
    let mut gizmo = GizmoAsset::default();

    // A sphere made out of one million lines!
    gizmo
        .sphere(default(), 1., CRIMSON)
        .resolution(1_000_000 / 3);

    commands.spawn(Gizmo {
        handle: gizmo_assets.add(gizmo),
        ..default()
    });
}
```

The immediate mode `Gizmos` API is still there if you want it though. It is still a great choice for easy debugging.


--- END FILE `release-content/0.16/release-notes/15473_Retained_Gizmos.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/15611_Add_bevy_input_focus_crate.md` ---


The concept of "input focus" is important for accessibility. Visually or motor-impaired users may have trouble using mice; with focus navigation they can control the UI using only the keyboard. This not only helps disabled users, but power users as well.

The same general idea can be applied to game controllers and other input devices. This is often seen in games where the number of controls on the screen exceeds the number of buttons on the gamepad, or for complex "inventory" pages with a grid of items.

The `bevy_a11y` crate has had a `Focus` resource for a long time, but it was situated in a way that made it hard to use. This has been replaced by an `InputFocus` resource which lives in a new crate, `bevy_input_focus`, and now includes a bunch of helper functions that make it easier to implement widgets that are focus-aware.

This new crate also supports "pluggable focus navigation strategies", of which there are currently two: there's a "tab navigation" strategy, which implements the traditional desktop sequential navigation using the TAB key, and a more "console-like" 2D navigation strategy that uses a hybrid of spatial searching and explicit navigation links.


--- END FILE `release-content/0.16/release-notes/15611_Add_bevy_input_focus_crate.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16132_Entity_cloning.md` ---


<!-- Entity cloning -->
<!-- https://github.com/bevyengine/bevy/pull/16132 -->
Bevy now has first-class support for cloning entities. While it was possible to do this before using reflection and `ReflectComponent` functionality, the common implementation was slow and required registering all cloneable components. With **Bevy 0.16**, entity cloning is supported natively and is as simple as adding `#[derive(Clone)]` to a component to make it cloneable.

```rust
#[derive(Component, Clone)]
#[require(MagicalIngredient)]
struct Potion;

#[derive(Component, Default, Clone)]
struct MagicalIngredient {
    amount: f32,
}

fn process_potions(
    input: Res<ButtonInput<KeyCode>>,
    mut commands: Commands,
    mut potions: Query<(Entity, &mut MagicalIngredient), With<Potion>>,
) {
    // Create a new potion
    if input.just_pressed(KeyCode::KeyS) {
        commands.spawn(
            (Name::new("Simple Potion"), Potion)
        );
    }
    // Add as much magic as we want
    else if input.just_pressed(KeyCode::KeyM) {
        for (_, mut ingredient) in potions.iter_mut() {
            ingredient.amount += 1.0
        }
    }
    // And then duplicate all the potions!
    else if input.just_pressed(KeyCode::KeyD) {
        for (potion, _) in potions.iter() {
            commands.entity(potion).clone_and_spawn();
        }
    }
}

```

`clone_and_spawn` spawns a new entity with all cloneable components, skipping those that can't be cloned. If your use case requires different behavior, there are more specialized methods:

- `clone_components` clones components from the source entity to a specified target entity instead of spawning a new one.
- `move_components` removes components from the source entity after cloning them to the target entity.
- `clone_and_spawn_with` and `clone_with` allow customization of the cloning behavior by providing access to `EntityClonerBuilder` before performing the clone.

`EntityClonerBuilder` can be used to configure how cloning is performed - for example, by filtering which components should be cloned, modifying how `required` components are cloned, or controlling whether entities linked by relationships should be cloned recursively.

An important note: components with generic type parameters will not be cloneable by default. For these cases, you should add `#[derive(Reflect)]` and `#[reflect(Component)]` to the component and register it for the entity cloning functionality to work properly.

```rust
#[derive(Component, Reflect, Clone)]
#[reflect(Component)]
struct GenericComponent<T> {
    // ...
}

fn main(){
    // ...
    app.register_type::<GenericComponent<i32>>;
    // ...
}
```

See documentation for `EntityCloner` if you're planing on implementing custom clone behaviors for components or need further explanation on how this works.

--- END FILE `release-content/0.16/release-notes/16132_Entity_cloning.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16314_Procedural_atmospheric_scattering.md` ---


<!-- Procedural atmospheric scattering -->
<!-- https://github.com/bevyengine/bevy/pull/16314 -->
**Bevy 0.16** introduces procedural atmospheric scattering, a customizable system for simulating sunsets, sunrises, and dynamic day/night cycles in real time:

<video controls loop aria-label="A showcase of simulated sunrises and sunsets made in Bevy"><source src="atmosphere-showcase.mp4" type="video/mp4"/></video>
Credit to `@aevyrie` for their amazing [atmosphere showcase]! It uses a fancy custom exposure curve to accentuate the near-dusk colors.

Enabling atmosphere rendering is simple, just add the new [`Atmosphere`] component to your camera!

```rs
commands.spawn((
    Camera3d::default(),
    Atmosphere::EARTH,
));

// the atmosphere will consider all directional lights in the scene as "suns"
commands.spawn(DirectionalLight::default());
```

When it is enabled, the primary Bevy skybox is overlaid with one that updates in real-time based on the directional lights in the scene, and the default distance fog is replaced with one that takes into account directional lights and the other atmosphere parameters. Distant objects will fade to blue on a clear day, and will be tinged orange and pink at sunset! Also, because the atmosphere is composited on *top* of the skybox, creating a nighttime starscape is easy ... just spawn the skybox and it'll naturally fade away as the sky grows brighter at dawn.

As with most PBR techniques, it's *correct*, but it can take some tweaking to look its best. All of the atmosphere parameters can also be customized: for example, a high desert sky might exhibit less Mie scattering due to the lack of humidity. The included example at `examples/3d/atmosphere.rs` includes some recommendations for lighting and camera settings.

There's some current limitations to be aware of: the atmosphere currently doesn't affect the [`EnvironmentMapLight`] or the direct lighting from directional lights on surfaces, so reflections might not be fully accurate. We're also working on integrating atmospheric scattering with volumetric fog (see the [What's Next?](#what-s-next) section for our ambitious plans!).

Because of a number of optimizations described in Sébastien Hillaire's [EGSR 2020 paper], our implementation is super fast, and should work great even on mobile devices and WebGPU. The secret sauce is that because the atmosphere is mostly symmetric, we can precalculate most of the ray marching inner loop ahead of time.

[atmosphere showcase]: https://github.com/aevyrie/bevy/tree/atmosphere_showcase
[EGSR 2020 paper]: https://sebh.github.io/publications/egsr2020.pdf
[`EnvironmentMapLight`]: https://docs.rs/bevy/0.16/bevy/pbr/environment_map/struct.EnvironmentMapLight.html
[`Atmosphere`]: https://docs.rs/bevy/0.16/bevy/pbr/struct.Atmosphere.html


--- END FILE `release-content/0.16/release-notes/16314_Procedural_atmospheric_scattering.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16368_Add_a_bindless_mode_to_AsBindGroup.md` ---


<!-- Add a bindless mode to `AsBindGroup`. -->
<!-- https://github.com/bevyengine/bevy/pull/16368 -->

<!-- TODO -->


--- END FILE `release-content/0.16/release-notes/16368_Add_a_bindless_mode_to_AsBindGroup.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16372_Add_Immutable_Component_Support.md` ---


<!-- Add Immutable `Component` Support -->
<!-- https://github.com/bevyengine/bevy/pull/16372 -->

**Bevy 0.16** adds the concept of **immutable components**: data that cannot be mutated once it is inserted (ex: you cannot query for `&mut MyComponent`). The only way to modify an immutable component is to insert a new instance on top.

A component can be made immutable by adding the `#[component(immutable)]` attribute:

```rust
#[derive(Component)]
#[component(immutable)]
pub struct MyComponent(pub u32);
```

By embracing this restriction, we can ensure that component lifecycle hooks and observers (add/remove/insert/replace) capture _every_ change that occurs, enabling them to uphold complex invariants.

To illustrate this, consider the following example, where we track the global sum of all `SumMe` components:

```rust
#[derive(Component)]
#[component(immutable)]
pub struct SumMe(pub u32);

// This will always hold the sum of all `SumMe` components on entities.
#[derive(Resource)]
struct TotalSum(u32);

// This observer will trigger when spawning or inserting a SumMe component
fn add_when_inserting(mut trigger: Trigger<OnInsert, SumMe>, query: Query<&SumMe>, mut total_sum: ResMut<TotalSum>){
    let sum_me = query.get(trigger.entity());
    total_sum.0 += sum_me.0;
}

// This observer will trigger when despawning or removing a SumMe component
fn subtract_when_removing(mut trigger: Trigger<OnRemove, SumMe>, query: Query<&SumMe>, mut total_sum: ResMut<TotalSum>){
    let sum_me = query.get(trigger.entity());
    total_sum.0 -= sum_me.0;
}

// Changing this to `&mut SumMe` would fail to compile!
fn modify_values(mut commands: Commands, query: Query<(Entity, &SumMe)>){
    for (entity, sum_me) in query.iter(){
        // We can read the value, but not write to it.
        let current_value = sum_me.0;
        // This will overwrite: indirectly mutating the value
        // and triggering both observers: removal first, then insertion
        commands.entity(entity).insert(sum_me.0 + 1);
    }
}
```

While immutable components are a niche tool, they're a great fit for rarely mutated (or small count) components where correctness is key.
For example, **Bevy 0.16** uses immutable components (and hooks!) as the foundation of our shiny new **relationships** to ensure that both sides of the relationship (e.g. [`ChildOf`] and [`Children`]) stay in sync.

We're keen to develop a first-class indexing solution using these new tools, and excited to hear about your ideas. Stay tuned; we've only scratched the surface here!

[`ChildOf`]: https://docs.rs/bevy/0.16/bevy/ecs/hierarchy/struct.ChildOf.html
[`Children`]: https://docs.rs/bevy/0.16/bevy/ecs/hierarchy/struct.Children.html


--- END FILE `release-content/0.16/release-notes/16372_Add_Immutable_Component_Support.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16388_Add_optional_transparency_passthrough_for_sprite_backend_w.md` ---


<!-- Add optional transparency passthrough for sprite backend with bevy_picking -->
<!-- https://github.com/bevyengine/bevy/pull/16388 -->
In most cases when working on a game, you don't want clicks over the transparent part of sprites to count as a click on that sprite. This is especially true if you're working on a 2D game with a lot of overlapping sprites which have transparent regions.

In previous versions of bevy, sprite interactions were handled as simple bounding box checks. If your cursor was within the boundary of the sprite's box, it would block interactions with the sprites behind it, even if the area of the sprite is fully transparent.

In **Bevy 0.16**, when interacting with transparent sections of an entity sprite, those interactions will pass through to the entities beneath it. No changes required to your codebase!

By default passthrough will occur for any part of a sprite which has an alpha value of `0.1` or lower. If you wish to revert back to rect-checking for sprites or change the cutoff, you can do so by overwriting `SpritePickingSettings`.

```rust
// Change the alpha value cutoff to 0.2 instead of the default 0.1
app.insert_resource(SpritePickingSettings {
  picking_mode: SpritePickingMode::AlphaThreshold(0.2)
});

// Revert to Bounding Box picking mode
app.insert_resource(SpritePickingSettings {
  picking_mode: SpritePickingMode::BoundingBox
});
```


--- END FILE `release-content/0.16/release-notes/16388_Add_optional_transparency_passthrough_for_sprite_backend_w.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16427_Use_multidraw_for_opaque_meshes_when_GPU_culling_is_in_use.md` ---


<!-- Use multidraw for opaque meshes when GPU culling is in use. -->
<!-- https://github.com/bevyengine/bevy/pull/16427 -->

<!-- TODO -->


--- END FILE `release-content/0.16/release-notes/16427_Use_multidraw_for_opaque_meshes_when_GPU_culling_is_in_use.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16503_Derivative_access_patterns_for_curves.md` ---


`bevy_math` has collected a sizable collection of curves and methods for working with curves, which are useful for everything from animations to color gradients to gameplay logic.

One of the most natural and important things you might want to do with a curve is to inspect its **derivative**:
the rate at which it's changing.
You might even be after its **second derivative**: the rate at which the rate of change is changing.

In **Bevy 0.16** you can now easily calculate these things!

```rust
let points = [
    vec2(-1.0, -20.0),
    vec2(3.0, 2.0),
    vec2(5.0, 3.0),
    vec2(9.0, 8.0),
];

// A cubic spline curve that goes through `points`.
let curve = CubicCardinalSpline::new(0.3, points).to_curve().unwrap();

// Calling `with_derivative` causes derivative output to be included in the output of the curve API.
let curve_with_derivative = curve.with_derivative();

// A `Curve<f32>` that outputs the speed of the original.
let speed_curve = curve_with_derivative.map(|x| x.derivative.norm());
```

We've implemented the required traits for most of our native curve types: splines, lines, and all manner of compound curves.
Curves which accept arbitrary functions are not covered (build your own specialized curve types),
as Rust does not have a first-class notion of a differentiable function!


--- END FILE `release-content/0.16/release-notes/16503_Derivative_access_patterns_for_curves.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16778_Event_source_location_tracking.md` ---


<!-- Better source location tracking -->

Bevy's unified data model allows introspection and debugging tools to work for the entire engine:
For example, last release's `track_change_detection` feature flag lets you
[automatically track](/news/bevy-0-15/#change-detection-source-location-tracking) which which line of source code inserted or mutated any component or resource.

Now it also tracks which code
- triggered a hook or observer: `HookContext.caller`, `Trigger::caller()`
- sent an event: `EventId.caller`
- spawned or despawned an entity (until the entity index is reused): `EntityRef::spawned_by()`, `Entities::entity_get_spawned_or_despawned_by()`

And as a side effect, this leads to nicer error messages in some cases, such as this nicely improved despawn message:

`Entity 0v1 was despawned by src/main.rs:10:11`

Having outgrown its old name, the feature flag is now called `track_location`.


--- END FILE `release-content/0.16/release-notes/16778_Event_source_location_tracking.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/16810_Add_AssetChanged_query_filter.md` ---


In Bevy, "assets" are data we want to hold a single copy of, even when used by many entities: things like sounds, images and 3D models.
Assets like `Image` are stored in the [`Assets<Image>`] resource. Entities then have components like [`Sprite`], which hold a [`Handle<Image>`] inside of it, identifying which asset to use for that entity.

While this works great for avoiding storing ten thousands ogre meshes in memory when you're making a tower defense,
this relatively indirect pattern makes it hard to figure out when an asset that you're relying on has changed.
That's because the [`Handle<T>`] could change, pointing to a new asset, or the underlying asset in [`Assets<T>`] could change,
modifying the underlying data.

While querying for `Changed<Sprite>` will catch changes to the handle, it *won't* catch changes to the underlying asset,
resulting in frustrating bugs that are hard to detect, as they only occur when things change in an unusual way.

To solve this, we've added an [`AssetChanged`] query filter, which works for any type (like [`Sprite`])
which implements the new [`AsAssetId`] trait.
Something like `Query<&mut Aabb, With<AssetChanged<Mesh3d>>>` now Just Works™, allowing you to recompute data whenever the underlying asset is changed for any reason.

[`Assets<T>`]: https://docs.rs/bevy/0.16/bevy/asset/struct.Assets.html
[`Sprite`]: https://docs.rs/bevy/0.16/bevy/prelude/struct.Sprite.html
[`Handle<T>`]: https://docs.rs/bevy/0.16/bevy/asset/enum.Handle.html
[`AssetChanged`]: https://docs.rs/bevy/0.16/bevy/asset/prelude/struct.AssetChanged.html
[`AsAssetId`]: https://docs.rs/bevy/0.16/bevy/asset/trait.AsAssetId.html


--- END FILE `release-content/0.16/release-notes/16810_Add_AssetChanged_query_filter.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17096_Anamorphic_Bloom.md` ---


Bloom is that soft glow bleeding out from bright areas of light: in the real world, this is caused by sensors on your camera (or eyes) becoming fully saturated.
In games, it's a powerful artistic tool for creating everything from cyberpunk neon signs to tastefully glowing windows to juicy geometrically-inspired arcade games.

Bevy has had bloom since version 0.9, but we're giving artists another simple lever to tweak: the ability to stretch, squash and otherwise distort the effect by setting the 2-dimensional `scale` parameter on the [`Bloom`] component on your camera.

![A realistic high-polygon model of a fancy black Porsche 911 demonstrating anamorphic bloom in its stretched-out tail light glow. Rendered in Bevy 0.16!](anamorphic-car-bloom.jpg)

When heavily skewed (usually horizontally), this effect is known as **anamorphic bloom**.
This effect is associated with a cinematic, futuristic vibe, and emulates the unusual geometry of certain film cameras as they compress a wider image onto narrower film.
But, regardless of why it occurs, it simply looks neat!

[`Bloom`]: https://docs.rs/bevy/0.16/bevy/core_pipeline/bloom/struct.Bloom.html


--- END FILE `release-content/0.16/release-notes/17096_Anamorphic_Bloom.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17216_Stop_automatically_generating_meta_files_for_assets_while_.md` ---


<!-- Stop automatically generating meta files for assets while using asset processing. -->
<!-- https://github.com/bevyengine/bevy/pull/17216 -->

In **Bevy 0.12**, we [introduced Assets V2](/news/bevy-0-12/#bevy-asset-v2). This was a complete rewrite of our asset system, which added features like "asset preprocessing" (the ability to process assets into more efficient forms at development time, prior to deploying your game). This however
created "meta files" for every asset in your project - meaning when you started using asset
preprocessing *at all*, your entire `assets` folder would be filled with these meta files
automatically (even for assets that don't need any preprocessing).

To alleviate this pain, enabling asset preprocessing no longer automatically writes meta files! This
makes it easier to enable asset preprocessing and adopt it gradually.

In addition, we've added `AssetServer::write_default_loader_meta_file_for_path` and
`AssetProcessor::write_default_meta_file_for_path` to allow users to explicitly generate the default
meta files for assets when necessary.

Consider enabling asset processing with:

```rust
app.add_plugins(DefaultPlugins.set(
    AssetPlugin {
        mode: AssetMode::Processed,
        ..default()
    }
));
```

Enabling the `bevy/asset_processor` feature will then process files automatically for you. See
[the asset processing example](https://github.com/bevyengine/bevy/blob/main/examples/asset/processing/asset_processing.rs)
for more details!


--- END FILE `release-content/0.16/release-notes/17216_Stop_automatically_generating_meta_files_for_assets_while_.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17398_Relationships_nonfragmenting_onetomany.md` ---


When building Bevy apps, it is often useful to "link" entities together. The most common case in Bevy is connecting parent and child entities together. In previous Bevy versions, a child would have a `Parent` component, which stored a reference to the parent entity, and the parent entity would have a `Children` component, which stored a list of all of its children entities. To ensure these connections remained valid, developers were not allowed to modify these components directly. Instead, all changes had to be done via specialized commands.

This worked, but it had some pretty glaring downsides:

1. Maintaining hierarchies was "separate" from the core ECS data model. This made it hard to improve our spawn APIs, and made interacting with hierarchies less natural.
2. The system was specialized and not reusable. Developers wanting to define their own relationship types had to reinvent the wheel.
3. To ensure data integrity, expensive scans were required to avoid duplicates.

In **Bevy 0.16** we have added initial support for **relationships**: a generalized and efficient component-driven system for linking entities together bidirectionally. This is what defining a new [`Relationship`] looks like:

```rust
/// This is a "relationship" component.
/// Add it to an entity that "likes" another entity.
#[derive(Component)]
#[relationship(relationship_target = LikedBy)]
struct Likes(pub Entity);

/// This is the "relationship target" component.
/// It will be automatically inserted and updated to contain
/// all entities that currently "like" this entity.
#[derive(Component, Deref)]
#[relationship_target(relationship = Likes)]
struct LikedBy(Vec<Entity>);

// Later in your app
let e1 = world.spawn_empty().id();
let e2 = world.spawn(Likes(e1)).id();
let e3 = world.spawn(Likes(e1)).id();

// e1 is liked by e2 and e3 
let liked_by = world.entity(e1).get::<LikedBy>().unwrap();
assert_eq!(&**liked_by, &[e2, e3]);
```

The [`Relationship`] component is the "source of truth", and the [`RelationshipTarget`] component is updated to reflect that source of truth. This means that adding/removing relationships should always be done via the [`Relationship`] component.

We use this "source of truth" model instead of allowing both components to "drive" for performance reasons. Allowing writes to both sides would require expensive scanning during inserts to ensure they are in sync and have no duplicates. The "relationships as the source of truth" approach allows us to make adding relationships constant-time (which is an improvement over the old Bevy parent/child approach!).

Relationships are built on top of Bevy's [Component Hooks](/news/bevy-0-14/#ecs-hooks-and-observers), which immediately and efficiently maintain the connection between the [`Relationship`] and the [`RelationshipTarget`] by plugging directly into the component add/remove/update lifecycle. In combination with the new [Immutable Components](#immutable-components) feature (relationship components are immutable), this ensures data integrity is maintained no matter what developers do!

Bevy's existing hierarchy system has been fully replaced by the new [`ChildOf`] [`Relationship`] and [`Children`] [`RelationshipTarget`]. Adding a child is now as simple as:

```rust
commands.spawn(ChildOf(some_parent));
```

Likewise reparenting an entity is as simple as:

```rust
commands.entity(some_entity).insert(ChildOf(new_parent));
```

We also took this chance to improve our spawn APIs more generally. Read the next section for details!

Note that this is just the first step for relationships. We have plans to expand their capabilities:

1. **Many-To-Many Relationships**: The current system is one-to-many (ex: The [`ChildOf`] [`Relationship`] points to "one" target entity and the [`Children`] [`RelationshipTarget`] can be targeted by "many" child entities). Some relationships could benefit from supporting many relationship targets.
2. **Fragmenting Relationships**: In the current system, relationship components "fragment" ECS archetypes based on their _type_, just like a normal component (Ex: `(Player, ChildOf(e1))`, and `(Player, ChildOf(e2))` exist in the same archetype). Fragmenting relationships would be an opt-in system that fragment archetypes based on their _value_ as well, which would result in entities with the same relationship targets being stored next to each other. This serves as an index, making querying by value faster, and making some access patterns more cache friendly.

[`Relationship`]: https://docs.rs/bevy/0.16/bevy/ecs/relationship/trait.Relationship.html
[`RelationshipTarget`]: https://docs.rs/bevy/0.16/bevy/prelude/trait.RelationshipTarget.html
[`ChildOf`]: https://docs.rs/bevy/0.16/bevy/prelude/struct.ChildOf.html
[`Children`]: https://docs.rs/bevy/0.16/bevy/ecs/hierarchy/struct.Children.html


--- END FILE `release-content/0.16/release-notes/17398_Relationships_nonfragmenting_onetomany.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17521_Improved_Spawn_APIs_and_Bundle_Effects.md` ---


Spawning hierarchies in Bevy has historically been a bit cumbersome:

```rust
commands
    .spawn(Player)
    .with_children(|p| {
        p.spawn(RightHand).with_children(|p| {
            p.spawn(Glove);
            p.spawn(Sword);
        });
        p.spawn(LeftHand).with_children(|p| {
            p.spawn(Glove);
            p.spawn(Shield);
        });
    });
```

We have big plans to improve Bevy's spawning experience with our [Next Generation Scene / UI System](https://github.com/bevyengine/bevy/discussions/14437) (BSN). An important stepping stone on that path is making it possible to express hierarchies directly via data, rather than using builder methods. The addition of Relationships further increases the value of building such a system, as _all_ relationships can benefit from it.

In **Bevy 0.16** we have vastly improved the ergonomics of spawning hierarchies:

```rust
commands.spawn((
    Player,
    children![
        (RightHand, children![Glove, Sword]),
        (LeftHand, children![Glove, Shield]),
    ],
));
```

This builds on the existing Bundle API by adding support for "bundle effects", which are applied immediately after a Bundle is inserted. Notably, this enables developers to define functions that return a hierarchy like this:

```rust
fn player(name: &str) -> impl Bundle {
    (
        Player,
        Name::new(name),
        children![
            (RightHand, children![Glove, Sword]),
            (LeftHand, children![Glove, Shield]),
        ]
    )
}

// later in your app
commands.spawn(player("Bob"));
```

In most cases the `children!` macro should be preferred for ergonomics reasons. It expands to the following API:

```rust
commands.spawn((
    Player,
    Children::spawn((
        Spawn((
            RightHand,
            Children::spawn((Spawn(Glove), Spawn(Sword))),
        )),
        Spawn((
            LeftHand,
            Children::spawn((Spawn(Glove), Spawn(Shield))),
        )),
    )),
));
```

There are a number of spawn wrapper variants, which provide additional flexibility:

```rust
world.spawn((
    Name::new("Root"),
    Children::spawn((
        Spawn(Name::new("Child1")),   
        SpawnIter(["Child2", "Child3"].into_iter().map(Name::new)),
        SpawnWith(|parent: &mut ChildSpawner| {
            parent.spawn(Name::new("Child4"));
            parent.spawn(Name::new("Child5"));
        })
    )),
))
```

Notably, this API works for _all_ relationship types. For example, you could spawn a `Likes` / `LikedBy` relationship hierarchy (as defined in the relationships section above) like this:

```rust
world.spawn((
    Name::new("Monica"),
    LikedBy::spawn((
        Spawn(Name::new("Naomi")),
        Spawn(Name::new("Dwight")),
    ))
))
```

There is also a `related!` macro, which does the same thing as `children!`, but for any relationship type:

```rust
world.spawn((
    Name::new("Monica"),
    related!(LikedBy[
        Name::new("Naomi"),
        Name::new("Dwight"),
    ]),
))
```

This API also allows us to optimize hierarchy construction time by cutting down on re-allocations, as we can generally (with the exception of cases like `SpawnWith`) statically determine how many related entities an entity will have and preallocate space for them in the `RelationshipTarget` component (ex: `Children`).


--- END FILE `release-content/0.16/release-notes/17521_Improved_Spawn_APIs_and_Bundle_Effects.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17559_Basic_UI_text_shadows.md` ---


Bevy UI now supports text shadows:

![image of button with text shadow](text_shadow.jpg)

Just add the [`TextShadow`] component to any [`Text`] entity. [`TextShadow`] can be used to configure the offset and the color of the shadow.

[`TextShadow`]: https://docs.rs/bevy/0.16/bevy/prelude/struct.TextShadow.html
[`Text`]: https://docs.rs/bevy/0.16/bevy/prelude/struct.Text.html


--- END FILE `release-content/0.16/release-notes/17559_Basic_UI_text_shadows.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17567_Cold_Specialization.md` ---


<!-- Cold Specialization -->
<!-- https://github.com/bevyengine/bevy/pull/17567 -->

<!-- TODO -->


--- END FILE `release-content/0.16/release-notes/17567_Cold_Specialization.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17648_mesh_tags.md` ---


Bevy has powerful support for [automatic instancing] for any entities that share the same mesh and material. However, sometimes it can still be useful to reference data that is not the same across all instances of a material. Previously, this required either writing significant amount of custom rendering code or giving up the performance benefits of automatic instancing by creating more materials.

The new `MeshTag` component allows adding a custom `u32` tag to mesh-material entities that can be referenced in the vertex shader for a material. In combination with storage textures or the [`ShaderStorageBuffer` asset] added in **Bevy 0.15**, this provides a flexible new mechanism to access external data on a per-instance basis or otherwise tag your mesh instances.

Spawn a mesh tag with a mesh-material entity: 
```rust
commands.spawn((
    // Clone a mesh and material handle to enable automatic instancing 
    Mesh3d(mesh_handle.clone()),
    MeshMaterial3d(material_handle.clone()),
    // The mesh tag can be any `u32` that is meaningful to your application, like
    // a particular variant of an enum or an index into some external data 
    MeshTag(1234), 
));
```

Lookup the tag in a vertex shader:
```wgsl
#import bevy_pbr::mesh_functions

@vertex
fn vertex(vertex: Vertex) -> VertexOutput {
    // Lookup the tag for the given mesh
    let tag = mesh_functions::get_tag(vertex.instance_index);

    // Index into a storage buffer, read a storage texture texel, etc...
}

```

[automatic instancing]: https://bevy.org/examples/shaders/automatic-instancing/
[`ShaderStorageBuffer` asset]: https://bevy.org/news/bevy-0-15/#shader-storage-buffer-asset

--- END FILE `release-content/0.16/release-notes/17648_mesh_tags.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17758_Trait_tags_on_docsrs.md` ---


<!-- Trait tags on docs.rs -->
<!-- https://github.com/bevyengine/bevy/pull/17758 -->

Bevy provides several core traits that define how a type is used. For example, to attach data to an entity it must implement `Component`. When reading the Rust API docs, determining whether a type is a `Component` (or some other core Bevy trait) requires scrolling through all of the docs until you find the relevant trait. But in **Bevy 0.16**, on docs.rs Bevy now displays labels indicating which core Bevy traits a type implements:

![Rustdoc showing a "Component" label below "Camera" type](trait-tags.jpg)

This happens for the traits
`Plugin` / `PluginGroup`,
`Component`,
`Resource`,
`Asset`,
`Event`,
`ScheduleLabel`,
`SystemSet`,
`SystemParam`,
`Relationship` and
`RelationshipTarget`.

This is done for now through [javascript](https://github.com/bevyengine/bevy/tree/release-0.16.0/docs-rs). This should be useful for other Rust frameworks than Bevy, and we'll work with the rustdoc team on how to make this built in and more generic. Get in touch if you're interested so we can start a specification!


--- END FILE `release-content/0.16/release-notes/17758_Trait_tags_on_docsrs.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17840_Parallel_Transform_Propagation.md` ---


Transforms in Bevy (and other 3D software) come in two flavors:

1. [`GlobalTransform`]: represents the absolute world-space position, scale and rotation of an object.
2. [`Transform`]: represent the position, scale, and rotation of an object relative to its parent. This is also known as the "local" transform.

In order to compute the [`GlobalTransform`] of each object (which is what rendering and physics care about!),
we need to recursively combine the [`Transform`] of all of our objects down the parent-child hierarchy.
This process, known as transform propagation, can be pretty expensive, especially with many entities in a scene.

**Bevy 0.16** comes with *two* impressive performance optimizations:

1. **Improved parallelization strategies**: While we were already splitting the work across threads,
better work sharing, parallelization across trees and a leaf vs non-leaf split to optimize cache coherency made a huge difference.
2. **Saving work for trees where none of the objects have moved**: Level geometry and props are not typically moving around each frame, so this optimization applies to *many* cases! We're now propagating a "dirty bit" up the hierarchy towards ancestors; allowing transform propagation to ignore entire subtrees of the hierarchy if they encounter an entity without the dirty bit.

The results speak for themselves: taken together, our testing on the huge (127,515 objects) [Caldera Hotel] scene  from Call of Duty: Warzone shows that transform propagation took 1.1 ms in **Bevy 0.15** on an M4 Max Macbook, and 0.1 ms after these changes in **Bevy 0.16**.
Even fully dynamic scenes (like our [`many_foxes`] stress test) are substantially faster due to the improved parallelism. Nice!
This work matters even more for more typical hardware: on large scenes on mid or low-end hardware transform propagation could eat an entire 25% of the frame budget. Ouch!

While that's an impressive 11x performance improvement, the absolute magnitude of the time saved is the key metric.
With about 16 ms per frame at 60 FPS, that's 6% of your *entire* game's CPU budget saved. making huge open worlds or incredibly complex CAD assemblies more viable than ever before.

![A screenshot of a `tracy` histogram showing the effects of these changes on Caldera. 0.15 peaks at 1.1 ms, while 0.16 peaks at 0.1 ms.][caldera-transform-propagation-bench]

If you're interested in the gory technical details of these optimizations, take a look at [the code itself].
It's incredibly well-commented and great to learn from.

These optimizations were upstreamed from the [`big_space`] crate (by the author of that crate!)

[Caldera Hotel]: https://github.com/Activision/caldera
[the code itself]: https://github.com/bevyengine/bevy/blob/b0c446739888705d3e95b640e9d13e0f1f53f06d/crates/bevy_transform/src/systems.rs#L12
[caldera-transform-propagation-bench]: caldera-transform-propagation-bench.jpg
[`many_foxes`]: https://github.com/bevyengine/bevy/blob/main/examples/stress_tests/many_foxes.rs
[`big_space`]: https://github.com/aevyrie/big_space
[`GlobalTransform`]: https://docs.rs/bevy/0.16.0/bevy/transform/components/struct.GlobalTransform.html
[`Transform`]: https://docs.rs/bevy/0.16.0/bevy/transform/components/struct.Transform.html

--- END FILE `release-content/0.16/release-notes/17840_Parallel_Transform_Propagation.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17953_Add_support_for_experimental_WESL_shader_source.md` ---


<!-- Add support for experimental WESL shader source -->
<!-- https://github.com/bevyengine/bevy/pull/17953 -->

Bevy continues to live life on the edge, the bleeding edge, of graphics technology. Today, Bevy supports [WESL](https://wesl-lang.dev/) shaders!

Most Bevy shaders are written in [WGSL](https://www.w3.org/TR/WGSL/), a modern shader language built for simplicity. But while WGSL is pretty simple as far as shader languages go, it also leaves a lot to be desired in terms of higher level features. Currently, Bevy has its own extended version of WGSL, which adds support for conditional compiling, importing between files, and other useful features.

WESL is a brand new shader language that extends WGSL (often in ways similar to Bevy's approach) and aims to bring common language conveniences to the GPU. WESL not only includes conditional compiling and importing between files, but it is also growing to support generics, package managers, and more.

It's important to note that WESL is still relatively early in development, and not all of its features are fully functional yet, nor are all its features supported in Bevy (yet). For that reason, WESL support is gated behind the cargo feature `shader_format_wesl`, which is disabled by default.

Despite the additional features, WESL is easy to layer on top of existing WGSL shaders. This is because it is a superset of WGSL (WGSL is valid WESL). That makes it easy to migrate existing WGSL to WESL, though it's worth mentioning that the Bevy's own "extended WGSL syntax" will need to be ported to its WESL counterparts. The WESL team (who helped write these notes!) is actively listening to feedback, and so is Bevy. If you do choose to use WESL in addition to or in replacement of WGSL, your thoughts, feature requests, and any pain points you encounter can be shared [here](https://github.com/wgsl-tooling-wg/wesl-rs).

If you're interested in trying WESL, check out the new [Material - WESL](https://bevy.org/examples/shaders/shader-material-wesl/) example. Before using this in a production environment, be sure to check out the original [PR](https://github.com/bevyengine/bevy/pull/17953) for a full list of caveats.

WESL is an exciting frontier for shader languages. You can track their progress and plans [here](https://wesl-lang.dev/).


--- END FILE `release-content/0.16/release-notes/17953_Add_support_for_experimental_WESL_shader_source.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/17955_Add_no_std_support_to_bevy.md` ---


<!-- Add `no_std` support to `bevy` -->
<!-- https://github.com/bevyengine/bevy/pull/17955 -->

Bevy now has support for `no_std` targets, allowing it to be used on a much wider range of platforms.

Early reports from users have shown Bevy working on bare-metal desktops, embedded devices, and even retro consoles such as the GameBoy Advance:

<video controls loop aria-label="A purple GameBoy Advance running a game made using Bevy"><source  src="bevy-gba.mp4" type="video/mp4"/></video>

Credit to [Chris Biscardi](https://www.youtube.com/@chrisbiscardi) for creating this awesome demo!

Bevy `no_std` support has been [discussed] going back over 4 years, but was initially dropped to avoid the added complexity managing `no_std` support can bring.
To be `no_std` compatible, your crate and _all_ of its dependencies must also be `no_std`.
Coordinating that kind of support across over a hundred dependencies was just not feasible, let alone losing access to Rust's standard library.

Since then, Rust's support for `no_std` has evolved dramatically with support for critical APIs such as [`Error`] coming in [Rust 1.81].
Starting with tracking issue [#15460] and a [`no_std` Working Group], Bevy's various crates were individually made `no_std` compatible where possible.
To aid this effort, [`bevy_platform`] was developed with the goal of providing opinionated alternatives to `std` items.

This effort reached a substantial milestone during the development of **Bevy 0.16**: support for `no_std` in our main `bevy` crate.
To use Bevy on a `no_std` platform, simply disable default features and use Bevy just like any other `no_std` dependency.

```toml
[dependencies]
bevy = { version = "0.16", default-features = false }
```

Note that not all of Bevy's features are compatible with `no_std` yet.
Rendering, audio, and assets are notable missing APIs that you will need to find an alternative for that's suitable for your platform.
But, Bevy's powerful [`Plugin`] system allows the community to build back support for that functionality for their particular platforms.

For those community members working on libraries for Bevy, we encourage you to try out `no_std` support if you can!
There's a new [`no_std` library] example which demonstrates how to make a crate that is compatible with `std` and `no_std` users, with detailed comments and advice.
During the release candidate period, quite a few libraries have successfully experimented with `no_std` support, such as [`bevy_rand`] and [`bevy_replicon`].

Determining what `no_std` targets support Bevy is still a work in progress. If you have an unusual platform you'd like to try getting Bevy working on, check out the [`#unusual-platforms`] channel on Bevy's Discord server for advice!

[`Error`]: https://doc.rust-lang.org/stable/core/error/trait.Error.html
[#15460]: https://github.com/bevyengine/bevy/issues/15460
[`no_std` Working Group]: https://discord.com/channels/691052431525675048/1303128171352293410
[`bevy_platform`]: https://crates.io/crates/bevy_platform/
[`#unusual-platforms`]: https://discord.com/channels/691052431525675048/1284885928837517432
[discussed]: https://github.com/bevyengine/bevy/discussions/705
[`Plugin`]: https://docs.rs/bevy/latest/bevy/app/trait.Plugin.html
[Rust 1.81]: https://releases.rs/docs/1.81.0/#stabilized-apis
[`no_std` library]: https://github.com/bevyengine/bevy/tree/main/examples/no_std/library
[`bevy_replicon`]: https://github.com/projectharmonia/bevy_replicon/tree/bevy-0.16-dev
[`bevy_rand`]: https://github.com/Bluefinger/bevy_rand
[`bevy_transform_interpolation`]: https://github.com/Jondolf/bevy_transform_interpolation


--- END FILE `release-content/0.16/release-notes/17955_Add_no_std_support_to_bevy.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/18555_Improved_require_syntax.md` ---


**Bevy 0.15** introduced [Required Components](/news/bevy-0-15/#required-components), which enabled components to "require" other components when they are inserted. A component's required components are automatically inserted alongside them (with some configured default value).

**Bevy 0.15** supported the following syntax for defining Required Components:

```rust
#[derive(Component)]
#[require(
    A, // Default: this will use A::default()
    B(some_b), // Function: this will use some_b to create B
    C(|| C { value: 1 }), // Inline Closure: will use the given closure
)]
struct Foo;

fn some_b() -> B {
    B(1)
}
```

This worked pretty well, but it had some downsides:

1. Defining custom values involved more boilerplate than necessary. You either had to define a whole standalone function to return the value, or use clunky closure syntax (where you repeat the component name).
2. Defining custom values wasn't aligned with Rust syntax or common derive macro conventions.

In **Bevy 0.16** we reworked and expanded Required Component syntax to support inline values and a more natural and idiomatic "expression" syntax.

```rust
#[derive(Component)]
#[require(
    A, // this will use A::default()
    B(1), // inline tuple-struct value
    C { value: 1 }, // inline named-struct value
    D::Variant, // inline enum variant
    E::SOME_CONST, // inline associated const
    F::new(1), // inline constructor
    G = returns_g(), // an expression that returns G
    H = SomethingElse::new(), // expression returns SomethingElse, where SomethingElse: Into<H> 
)]
struct Foo;
```

Much better!


--- END FILE `release-content/0.16/release-notes/18555_Improved_require_syntax.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/decals.md` ---


**Decals** are textures which can be dynamically layered on top of existing meshes, conforming to their geometry.
This has two benefits over simply changing a mesh's texture:

1. You can add them dynamically in response to player actions. Most famously, bullet holes in FPS games use decals for this.
2. You don't need to create an entirely new texture for every combination, which makes them more efficient and flexible when creating levels with details like graffiti or cracks in building facades.

Like many things in rendering, there are a huge number of ways to implement this feature, each with their own tradeoffs.
In **Bevy 0.16**, we've selected two complementary approaches: **forward decals** and **clustered decals**.

### Forward Decals

![decals](decals.jpg)

Our implementation of forward decals (or to be more precise, contact projective decals) was inspired by [Alexander Sannikovs talk on the rendering techniques of Path of Exile 2], and was upstreamed from the [`bevy_contact_projective_decals`] ecosystem crate.
Due to the nature of this technique, looking at the decal from very steep angles will cause distortion.
This can be mitigated by creating textures that are bigger than the effect, giving the decal more space to stretch.
To create a forward decal, spawn a [`ForwardDecal`] entity, which uses a [`ForwardDecalMaterial`] using the [`ForwardDecalMaterialExt`] material extension.

### Clustered Decals

![clustered decals](clustered-decals.jpg)

Clustered decals (or decal projectors) work by projecting images from a 1x1x1 cube onto surfaces found in the +Z direction.
They are clusterable objects, just like point lights and light probes, which means that decals are only evaluated for objects within the bounds of the projector.
To create a clustered decal, spawn a [`ClusteredDecal`] entity.

Ultimately, forward decals offer broader hardware and driver support, while clustered decals are higher quality and don't require the creation of bounding geometry, improving performance.
Currently clustered decals require bindless textures and thus don't support WebGL2, WebGPU, iOS and Mac targets. Forward decals _are_ available on these targets.

[Alexander Sannikovs talk on the rendering techniques of Path of Exile 2]: https://www.youtube.com/watch?v=TrHHTQqmAaM
[`bevy_contact_projective_decals`]: https://github.com/naasblod/bevy_contact_projective_decals
[`ForwardDecal`]: https://docs.rs/bevy/0.16/bevy/pbr/decal/struct.ForwardDecal.html
[`ForwardDecalMaterial`]: https://docs.rs/bevy/0.16/bevy/pbr/decal/type.ForwardDecalMaterial.html
[`ForwardDecalMaterialExt`]: https://docs.rs/bevy/0.16/bevy/pbr/decal/struct.ForwardDecalMaterialExt.html
[`ClusteredDecal`]: https://docs.rs/bevy/0.16/bevy/pbr/decal/clustered/struct.ClusteredDecal.html


--- END FILE `release-content/0.16/release-notes/decals.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/gpu_driven_rendering.md` ---


Over the years, the trend in real-time rendering has increasingly been to move work from the CPU to the GPU. One of the latest developments in this area has been *GPU-driven rendering*, in which the GPU takes a representation of the scene and essentially works out what to draw on its own.

**Bevy 0.16** adds GPU-driven rendering support for most "standard" 3D mesh rendering, including skinned meshes. This dramatically reduces the amount of CPU time that the renderer needs for larger scenes. It's automatically enabled on platforms that support it; unless your application hooks into the rendering pipeline, upgrading to **Bevy 0.16** will automatically enable GPU-driven rendering for your meshes. This joins the support that **Bevy 0.14** and **0.15** added for GPU-driven rendering of [Virtual Geometry](/news/bevy-0-14/#virtual-geometry-experimental).

On Activision's "heavy" hotel section of the [Caldera scene](https://github.com/Activision/caldera) from Call of Duty Warzone, **Bevy 0.16** with GPU-driven rendering performs roughly 3x better than **Bevy 0.15**! (this includes *all* optimizations between these releases)

![Caldera scene rendered in Bevy](caldera.jpg)

On a mobile Nvidia 4090 with Vulkan / Linux, **Bevy 0.16** runs the scene at 10.16ms (~101 FPS), compared to 33.55ms (~30 FPS) on **Bevy 0.15**. Massive wins!

### Overview: CPU-Driven Rendering

To explain how GPU-driven rendering operates, it's easiest to first describe how CPU-driven rendering works:

1. The CPU determines the objects that are visible, via frustum culling and perhaps occlusion culling.
2. For each such object:
    * The CPU sends the object's transform to the GPU, possibly in addition to other data such as joint weights.
    * The CPU tells the GPU where the mesh data is.
    * The CPU writes the material data to the GPU.
    * The CPU tells the GPU where textures and other buffers needed to render the objects are (light data, etc.)
    * The CPU issues a drawcall.
    * The GPU renders the object.

### Overview: GPU-Driven Rendering

In contrast, GPU-driven rendering in Bevy works like this:

1. The CPU supplies a single buffer containing transform information for all objects to the GPU, so that shaders can process many objects at once.
2. If new objects have been spawned since the last frame, the CPU fills out tables specifying where the mesh data for the new objects are.
3. If materials have been modified since the last frame, the CPU uploads information about those materials to the GPU.
4. The CPU creates lists of objects to be rendered this frame. Each object is simply referenced by an integer ID, so these lists are small. The number of lists depends on the size and complexity of the scene, but there are rarely more than 15 such lists even for large scenes.
5. For each such list:
    * The CPU issues a *single* drawcall.
    * The GPU processes all objects in the list, determining which ones are truly visible.
    * The GPU renders each such visible object.

For large scenes that may have tens of thousands of objects, GPU-driven rendering frequently results in a reduction in CPU rendering overhead of 3× or more. It's also necessary for occlusion culling, because of the GPU transform step (5(b) above).

### GPU-Driven Rendering Techniques

Internally, GPU-driven rendering is less a single technique than a combination of several techniques. These include:

* *Multi-draw indirect* (MDI), a GPU API that allows multiple meshes to be drawn in a single drawcall, the details of which the GPU provides by filling out tables in GPU memory. In order to use MDI effectively, Bevy uses a new subsystem, the *mesh allocator*, which manages the details of packing meshes together in GPU memory.
  * *Multi-draw indirect count* (MDIC), an extension to multi-draw indirect that allows the GPU to determine the *number* of meshes to draw with minimal overhead.
* *Bindless resources*, which allow Bevy to supply the textures (and other resources) for many objects as a group, instead of having to bind textures one-by-one on the CPU. These resources are managed by a new subsystem known as the *material allocator*.
* *GPU transform and cull*, which allows Bevy to compute the position and visibility of every object from the camera's perspective on the GPU instead of on the CPU.
* The *retained render world*, which allows the CPU to avoid processing and uploading data that hasn't changed since the last frame.
* *Cached pipeline specialization*, which leverages Bevy's component-level change detection to more quickly determine when the rendering state for meshes is unchanged from the previous frame.

### GPU-Driven Platform Compatibility

At the moment, not all platforms offer full support for this feature. The following table summarizes the platform support for the various parts of GPU-driven rendering:

| OS      | Graphics API | GPU transform | Multi-draw & GPU cull | Bindless resources |
|---------|--------------|---------------|-----------------------|--------------------|
| Windows | Vulkan       | ✅            | ✅                   | ✅                |
| Windows | Direct3D 12  | ✅            | ❌                   |❌                 |
| Windows | OpenGL       | ✅            |❌                    |❌                 |
| Linux   | Vulkan       | ✅            | ✅                   | ✅                |
| Linux   | OpenGL       | ✅            |❌                    |❌                 |
| macOS   | Metal        | ✅            |❌                    |➖¹                |
| iOS     | Metal        | ✅            |❌                    |➖¹                |
| Android | Vulkan       | ➖²            |➖²                    |➖²               |
| Web     | WebGPU       | ✅            |❌                    |❌                 |
| Web     | WebGL 2       | ❌            |❌                    |❌                 |

¹ Bevy does support bindless resources on Metal, but the limits are currently significantly lower, potentially resulting in more drawcalls.

² Some Android drivers that are known to exhibit bugs in Bevy's workloads are denylisted and will cause Bevy to fall back to CPU-driven rendering.

In most cases, you don't need to do anything special in order for your application to support GPU-driven rendering. There are two main exceptions:

1. Materials with custom WGSL shaders will continue to use CPU-driven rendering by default. In order for your materials to use GPU-driven rendering, you'll want to use the new `#[bindless]` feature on `AsBindGroup`. See the `AsBindGroup` documentation and the `shader_material_bindless` example for more details. If you're using `ExtendedMaterial`, check out the new `extended_material_bindless` example.
2. Applications and plugins that hook into the renderer at a low level will need to be updated to support GPU-driven rendering. The newly-updated `custom_phase_item` and `specialized_mesh_pipeline` examples may prove useful as a guide to do this.

### What's Next for GPU-Driven Rendering?

Bevy's current GPU-driven rendering isn't the end of the story. There's a sizable amount of potential future work to be done:

* **Bevy 0.16** only supports GPU-driven rendering for the 3D pipeline, but the techniques are equally applicable to the 2D pipeline. Future versions of Bevy should support GPU-driven rendering for 2D mesh rendering, sprites, UI, and so on.
* Bevy currently draws objects with morph targets using CPU-driven rendering. This is something we plan to address in the future. Note that the presence of objects with morph targets doesn't prevent objects that don't have morph targets from being drawn with GPU-driven rendering.
* In the future, a portion of the GPU-driven rendering infrastructure could be ported to platforms that don't support the full set of features, offering some performance improvements on those platforms. For example, even on WebGL 2 the renderer could make use of the material allocator to pack data more efficiently.
* We're watching new API features, such as [Vulkan device generated commands] and [Direct3D 12 work graphs], with interest. These would allow future versions of Bevy to offload even more work to the GPU, such as sorting of transparent objects. While figuring out how to unify these disparate APIs in a single renderer will be a challenge, the future possibilities in this space are exciting.

If you're interested in any of these tasks, feel free to ask [in our Discord](https://discord.gg/bevy) or via [GitHub issues](https://github.com/bevyengine/bevy/issues).

[Vulkan device generated commands]: https://www.supergoodcode.com/device-generated-commands/

[Direct3D 12 work graphs]: https://devblogs.microsoft.com/directx/d3d12-work-graphs/

--- END FILE `release-content/0.16/release-notes/gpu_driven_rendering.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/gpu_tracing.md` ---


If you wish to optimize something, you must first measure and understand it.
When looking at the performance of applications, [tracy] is our tool of choice.
It gives us a clear understanding of how long work takes, when it happens relative to other work each frame,
and how various threads are used.
Read our [profiling docs] to get started!

But until now, it's had a critical limitation: work done on the GPU wasn't shown,
forcing devs to pull up dedicated GPU-focused tools (like [NSight] or [RenderDoc]) and struggle to piece together an intuition for how it all fits together.

In 0.16, we've connected the [rendering diagnostics added in Bevy 0.14] to [tracy], creating a cohesive picture of
all of the work that's being done in a Bevy application in a single convenient place.

That said, we've only instrumented a few of our passes so far.
While we will improve this in the future, you will need to add spans to your own custom rendering code,
and specialized GPU diagnostic tools will always be more powerful: capturing all GPU-related work done,
and providing more detailed information.

Special thanks to [@wumpf] for trailblazing this work in the excellent [wgpu-profiler] tool, and demonstrating how to wire [wgpu] and [tracy] together.

[tracy]: https://github.com/wolfpld/tracy
[profiling docs]: https://github.com/bevyengine/bevy/blob/main/docs/profiling.md
[NSight]: https://developer.nvidia.com/nsight-systems
[RenderDoc]: https://renderdoc.org/
[@wumpf]: https://github.com/Wumpf
[wgpu-profiler]: https://github.com/Wumpf/wgpu-profiler
[rendering diagnostics added in Bevy 0.14]: https://bevy.org/news/bevy-0-14/#tools-for-profiling-gpu-performance


--- END FILE `release-content/0.16/release-notes/gpu_tracing.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/occlusion_culling.md` ---


**Occlusion culling** is the idea that we don't need to draw something that's completely blocked by other opaque objects, from the perspective of the camera. For example: we don't need to draw a person hidden behind a wall, even if they're within the range used for frustum culling.

Bevy already has an optional [Depth Prepass](/news/bevy-0-10/#depth-and-normal-prepass), which renders a simple version of the scene and captures a 2D depth buffer. This can then be used to skip hidden objects in the more expensive main pass. However this doesn't skip the vertex shading overhead, and the depth checks in the fragment shader also add overhead.

In **Bevy 0.16**, we've added modern [two-phase occlusion culling](https://medium.com/@mil_kru/two-pass-occlusion-culling-4100edcad501) (in contrast to a traditional "potentially visible sets" design). This approach was already used by our [virtual geometry](/news/bevy-0-14/#virtual-geometry-experimental) rendering system, and works quite well with the GPU-driven rendering architecture that we've established during this cycle! For more details on our implementation, [check out this PR](https://github.com/bevyengine/bevy/pull/17413).

For now, this feature is marked as experimental, due to known precision issues that can mark meshes as occluded even when they're not.
In practice, we're not convinced that this is a serious concern, so please let us know how it goes!
To try out the new mesh occlusion culling, add the [`DepthPrepass`] and [`OcclusionCulling`] components to your camera.

An important note: occlusion culling won't be faster on all scenes. Small scenes, or those using simpler non-PBR rendering are particularly likely to be slower with occlusion culling turned on. Enabling occlusion culling incurs overhead ... the work that it skips must be more expensive than the cost of running the checks for it to be worth it!

Like always: you need to measure your performance to improve it.

If you're a rendering engineer who'd like to help us resolve these precision issues and stabilize this feature, we're looking to borrow from Hans-Kristian Arntzen's design in [Granite].
Chime in at [issue #14062] (and read our [Contributing Guide]) and we can help you get started.

[`DepthPrepass`]: https://docs.rs/bevy/0.16/bevy/core_pipeline/prepass/struct.DepthPrepass.html
[`OcclusionCulling`]: https://docs.rs/bevy/0.16/bevy/render/experimental/occlusion_culling/struct.OcclusionCulling.html
[issue #14062]: https://github.com/bevyengine/bevy/issues/14062
[Granite]: https://github.com/Themaister/Granite
[Contributing Guide]: https://bevy.org/learn/contribute/introduction/


--- END FILE `release-content/0.16/release-notes/occlusion_culling.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/unified_error_handling.md` ---


Bevy has historically left error handling as an exercise for the user. Many Bevy APIs return Results / errors, but Bevy ECS systems and commands did not themselves support returning Results / errors. Additionally, Bevy provides some "shorthand" panicking APIs that require less typing than unwrapping results. These things encouraged developers to write overly panick-ey behavior, even when that wasn't desired.

Ideally developers can _choose_ whether or not their systems should panic. For example, panic while you are developing to discover errors quickly (and force you to solve them), but when deploying to production just print errors to a console to avoid disrupting the user's experience.

**Bevy 0.16** introduces a new unified paradigm for error handling to help you ship crash-free games (and other applications!)
without sacrificing the loud-and-fast development that panics enable.

We've prioritized a simple and consistent design, with a few bells and whistles for easier debugging:

- Bevy systems, observers, and commands now support returning [`Result`], which is a type alias for `Result<(), BevyError>`
- [`Result`] expects the new [`BevyError`], which accepts any error type (much like [`anyhow`]). This makes it easy and ergonomic to use the [`?` operator] in systems / observers / commands to capture and return errors.
- [`BevyError`] automatically captures [high quality custom backtraces]. By default these are filtered down to just the essentials, cutting down on a lot of the noise from Rust and Bevy internals.
- Errors returned by systems, observers, and commands are now handled by the [`GLOBAL_ERROR_HANDLER`]. This defaults to panicking, but can be set to anything (log, panic, custom logic, etc). We generally encourage developing with the panicking default, then switching to logging errors when deploying to production.

We now encourage developers to bubble up errors whenever possible, rather than panicking immediately where the error occurs.

Instead of:

```rust
use bevy::prelude::*;

fn move_player(mut query: Query<&mut Transform, With<Player>>) {
    let mut player_transform = query.single_mut().unwrap();
    player_transform.translation.x += 1.0;
}
```

Try:

```rust
use bevy::prelude::*;

fn move_player(mut query: Query<&mut Transform, With<Player>>) -> Result {
    let mut player_transform = query.single_mut()?;
    player_transform.translation.x += 1.0;
    Ok(())
}
```

[`Result`]: https://docs.rs/bevy/0.16/bevy/ecs/error/type.Result.html
[`?` operator]: https://doc.rust-lang.org/rust-by-example/std/result/question_mark.html
[`anyhow`]: https://docs.rs/anyhow/latest/anyhow/
[high quality custom backtraces]: https://github.com/bevyengine/bevy/pull/18144
[`GLOBAL_ERROR_HANDLER`]: https://docs.rs/bevy/0.16/bevy/ecs/error/static.GLOBAL_ERROR_HANDLER.html
[`BevyError`]: https://docs.rs/bevy/0.16/bevy/ecs/error/struct.BevyError.html


--- END FILE `release-content/0.16/release-notes/unified_error_handling.md` ---


--- BEGIN FILE `release-content/0.16/release-notes/virtual_geometry_improvements.md` ---


Virtual geometry (the `meshlet` cargo feature) is Bevy's Nanite-like rendering system, allowing much greater levels of geometry density than is otherwise possible, and freeing artists from manually creating LODs.

In **Bevy 0.16**, virtual geometry got some performance improvements thanks to new algorithms and GPU APIs.

Read more details on the [author's blog post](https://jms55.github.io/posts/2025-03-27-virtual-geometry-bevy-0-16).

Users are not required to regenerate their [`MeshletMesh`](https://docs.rs/bevy/0.16/bevy/pbr/experimental/meshlet/struct.MeshletMesh.html) assets, but doing so is recommended in order to take advantage of the improved clustering algorithm in **Bevy 0.16**.

![Screenshot of the meshlet example](meshlet_bunnies.jpg)


--- END FILE `release-content/0.16/release-notes/virtual_geometry_improvements.md` ---


